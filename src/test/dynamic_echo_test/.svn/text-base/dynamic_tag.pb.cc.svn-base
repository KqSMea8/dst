// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dynamic_tag.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* DynamicTag1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
DynamicTag1_reflection_ = NULL;
const ::google::protobuf::Descriptor* DynamicTag2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
DynamicTag2_reflection_ = NULL;
const ::google::protobuf::Descriptor* TagDynamicTest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
TagDynamicTest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_dynamic_5ftag_2eproto() {
    protobuf_AddDesc_dynamic_5ftag_2eproto();
    const ::google::protobuf::FileDescriptor* file =
        ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
            "dynamic_tag.proto");
    GOOGLE_CHECK(file != NULL);
    DynamicTag1_descriptor_ = file->message_type(0);
    static const int DynamicTag1_offsets_[1] = {
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicTag1, name_),
    };
    DynamicTag1_reflection_ =
        new ::google::protobuf::internal::GeneratedMessageReflection(
        DynamicTag1_descriptor_,
        DynamicTag1::default_instance_,
        DynamicTag1_offsets_,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicTag1, _has_bits_[0]),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicTag1, _unknown_fields_),
        -1,
        ::google::protobuf::DescriptorPool::generated_pool(),
        ::google::protobuf::MessageFactory::generated_factory(),
        sizeof(DynamicTag1));
    DynamicTag2_descriptor_ = file->message_type(1);
    static const int DynamicTag2_offsets_[1] = {
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicTag2, name_),
    };
    DynamicTag2_reflection_ =
        new ::google::protobuf::internal::GeneratedMessageReflection(
        DynamicTag2_descriptor_,
        DynamicTag2::default_instance_,
        DynamicTag2_offsets_,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicTag2, _has_bits_[0]),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicTag2, _unknown_fields_),
        -1,
        ::google::protobuf::DescriptorPool::generated_pool(),
        ::google::protobuf::MessageFactory::generated_factory(),
        sizeof(DynamicTag2));
    TagDynamicTest_descriptor_ = file->message_type(2);
    static const int TagDynamicTest_offsets_[1] = {
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagDynamicTest, name_),
    };
    TagDynamicTest_reflection_ =
        new ::google::protobuf::internal::GeneratedMessageReflection(
        TagDynamicTest_descriptor_,
        TagDynamicTest::default_instance_,
        TagDynamicTest_offsets_,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagDynamicTest, _has_bits_[0]),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagDynamicTest, _unknown_fields_),
        -1,
        ::google::protobuf::DescriptorPool::generated_pool(),
        ::google::protobuf::MessageFactory::generated_factory(),
        sizeof(TagDynamicTest));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
    ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                                       &protobuf_AssignDesc_dynamic_5ftag_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        DynamicTag1_descriptor_, &DynamicTag1::default_instance());
    ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        DynamicTag2_descriptor_, &DynamicTag2::default_instance());
    ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        TagDynamicTest_descriptor_, &TagDynamicTest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dynamic_5ftag_2eproto() {
    delete DynamicTag1::default_instance_;
    delete DynamicTag1_reflection_;
    delete DynamicTag2::default_instance_;
    delete DynamicTag2_reflection_;
    delete TagDynamicTest::default_instance_;
    delete TagDynamicTest_reflection_;
}

void protobuf_AddDesc_dynamic_5ftag_2eproto() {
    static bool already_here = false;
    if (already_here) {
        return;
    }
    already_here = true;
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
        "\n\021dynamic_tag.proto\"\033\n\013DynamicTag1\022\014\n\004na"
        "me\030\001 \001(\t\"\033\n\013DynamicTag2\022\014\n\004name\030\001 \001(\t\"\036\n"
        "\016TagDynamicTest\022\014\n\004name\030\001 \001(\t", 109);
    ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
        "dynamic_tag.proto", &protobuf_RegisterTypes);
    DynamicTag1::default_instance_ = new DynamicTag1();
    DynamicTag2::default_instance_ = new DynamicTag2();
    TagDynamicTest::default_instance_ = new TagDynamicTest();
    DynamicTag1::default_instance_->InitAsDefaultInstance();
    DynamicTag2::default_instance_->InitAsDefaultInstance();
    TagDynamicTest::default_instance_->InitAsDefaultInstance();
    ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dynamic_5ftag_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dynamic_5ftag_2eproto {
    StaticDescriptorInitializer_dynamic_5ftag_2eproto() {
        protobuf_AddDesc_dynamic_5ftag_2eproto();
    }
} static_descriptor_initializer_dynamic_5ftag_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int DynamicTag1::kNameFieldNumber;
#endif  // !_MSC_VER

DynamicTag1::DynamicTag1()
    : ::google::protobuf::Message() {
    SharedCtor();
}

void DynamicTag1::InitAsDefaultInstance() {
}

DynamicTag1::DynamicTag1(const DynamicTag1& from)
    : ::google::protobuf::Message() {
    SharedCtor();
    MergeFrom(from);
}

void DynamicTag1::SharedCtor() {
    _cached_size_ = 0;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DynamicTag1::~DynamicTag1() {
    SharedDtor();
}

void DynamicTag1::SharedDtor() {
    if (name_ != &::google::protobuf::internal::kEmptyString) {
        delete name_;
    }
    if (this != default_instance_) {
    }
}

void DynamicTag1::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DynamicTag1::descriptor() {
    protobuf_AssignDescriptorsOnce();
    return DynamicTag1_descriptor_;
}

const DynamicTag1& DynamicTag1::default_instance() {
    if (default_instance_ == NULL) {
        protobuf_AddDesc_dynamic_5ftag_2eproto();
    }
    return *default_instance_;
}

DynamicTag1* DynamicTag1::default_instance_ = NULL;

DynamicTag1* DynamicTag1::New() const {
    return new DynamicTag1;
}

void DynamicTag1::Clear() {
    if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (has_name()) {
            if (name_ != &::google::protobuf::internal::kEmptyString) {
                name_->clear();
            }
        }
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    mutable_unknown_fields()->Clear();
}

bool DynamicTag1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
    ::google::protobuf::uint32 tag;
    while ((tag = input->ReadTag()) != 0) {
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // optional string name = 1;
        case 1: {
            if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_name()));
                ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                    this->name().data(), this->name().length(),
                    ::google::protobuf::internal::WireFormat::PARSE);
            } else {
                goto handle_uninterpreted;
            }
            if (input->ExpectAtEnd()) {
                return true;
            }
            break;
        }

        default: {
handle_uninterpreted:
            if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                return true;
            }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                    input, tag, mutable_unknown_fields()));
            break;
        }
        }
    }
    return true;
#undef DO_
}

void DynamicTag1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
    // optional string name = 1;
    if (has_name()) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::SERIALIZE);
        ::google::protobuf::internal::WireFormatLite::WriteString(
            1, this->name(), output);
    }

    if (!unknown_fields().empty()) {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
            unknown_fields(), output);
    }
}

::google::protobuf::uint8* DynamicTag1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
    // optional string name = 1;
    if (has_name()) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::SERIALIZE);
        target =
            ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                1, this->name(), target);
    }

    if (!unknown_fields().empty()) {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                     unknown_fields(), target);
    }
    return target;
}

int DynamicTag1::ByteSize() const {
    int total_size = 0;

    if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        // optional string name = 1;
        if (has_name()) {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::StringSize(
                              this->name());
        }

    }
    if (!unknown_fields().empty()) {
        total_size +=
            ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                unknown_fields());
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void DynamicTag1::MergeFrom(const ::google::protobuf::Message& from) {
    GOOGLE_CHECK_NE(&from, this);
    const DynamicTag1* source =
        ::google::protobuf::internal::dynamic_cast_if_available<const DynamicTag1*>(
            &from);
    if (source == NULL) {
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        MergeFrom(*source);
    }
}

void DynamicTag1::MergeFrom(const DynamicTag1& from) {
    GOOGLE_CHECK_NE(&from, this);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_name()) {
            set_name(from.name());
        }
    }
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DynamicTag1::CopyFrom(const ::google::protobuf::Message& from) {
    if (&from == this) {
        return;
    }
    Clear();
    MergeFrom(from);
}

void DynamicTag1::CopyFrom(const DynamicTag1& from) {
    if (&from == this) {
        return;
    }
    Clear();
    MergeFrom(from);
}

bool DynamicTag1::IsInitialized() const {

    return true;
}

void DynamicTag1::Swap(DynamicTag1* other) {
    if (other != this) {
        std::swap(name_, other->name_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }
}

::google::protobuf::Metadata DynamicTag1::GetMetadata() const {
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::Metadata metadata;
    metadata.descriptor = DynamicTag1_descriptor_;
    metadata.reflection = DynamicTag1_reflection_;
    return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DynamicTag2::kNameFieldNumber;
#endif  // !_MSC_VER

DynamicTag2::DynamicTag2()
    : ::google::protobuf::Message() {
    SharedCtor();
}

void DynamicTag2::InitAsDefaultInstance() {
}

DynamicTag2::DynamicTag2(const DynamicTag2& from)
    : ::google::protobuf::Message() {
    SharedCtor();
    MergeFrom(from);
}

void DynamicTag2::SharedCtor() {
    _cached_size_ = 0;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DynamicTag2::~DynamicTag2() {
    SharedDtor();
}

void DynamicTag2::SharedDtor() {
    if (name_ != &::google::protobuf::internal::kEmptyString) {
        delete name_;
    }
    if (this != default_instance_) {
    }
}

void DynamicTag2::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DynamicTag2::descriptor() {
    protobuf_AssignDescriptorsOnce();
    return DynamicTag2_descriptor_;
}

const DynamicTag2& DynamicTag2::default_instance() {
    if (default_instance_ == NULL) {
        protobuf_AddDesc_dynamic_5ftag_2eproto();
    }
    return *default_instance_;
}

DynamicTag2* DynamicTag2::default_instance_ = NULL;

DynamicTag2* DynamicTag2::New() const {
    return new DynamicTag2;
}

void DynamicTag2::Clear() {
    if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (has_name()) {
            if (name_ != &::google::protobuf::internal::kEmptyString) {
                name_->clear();
            }
        }
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    mutable_unknown_fields()->Clear();
}

bool DynamicTag2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
    ::google::protobuf::uint32 tag;
    while ((tag = input->ReadTag()) != 0) {
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // optional string name = 1;
        case 1: {
            if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_name()));
                ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                    this->name().data(), this->name().length(),
                    ::google::protobuf::internal::WireFormat::PARSE);
            } else {
                goto handle_uninterpreted;
            }
            if (input->ExpectAtEnd()) {
                return true;
            }
            break;
        }

        default: {
handle_uninterpreted:
            if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                return true;
            }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                    input, tag, mutable_unknown_fields()));
            break;
        }
        }
    }
    return true;
#undef DO_
}

void DynamicTag2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
    // optional string name = 1;
    if (has_name()) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::SERIALIZE);
        ::google::protobuf::internal::WireFormatLite::WriteString(
            1, this->name(), output);
    }

    if (!unknown_fields().empty()) {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
            unknown_fields(), output);
    }
}

::google::protobuf::uint8* DynamicTag2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
    // optional string name = 1;
    if (has_name()) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::SERIALIZE);
        target =
            ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                1, this->name(), target);
    }

    if (!unknown_fields().empty()) {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                     unknown_fields(), target);
    }
    return target;
}

int DynamicTag2::ByteSize() const {
    int total_size = 0;

    if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        // optional string name = 1;
        if (has_name()) {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::StringSize(
                              this->name());
        }

    }
    if (!unknown_fields().empty()) {
        total_size +=
            ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                unknown_fields());
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void DynamicTag2::MergeFrom(const ::google::protobuf::Message& from) {
    GOOGLE_CHECK_NE(&from, this);
    const DynamicTag2* source =
        ::google::protobuf::internal::dynamic_cast_if_available<const DynamicTag2*>(
            &from);
    if (source == NULL) {
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        MergeFrom(*source);
    }
}

void DynamicTag2::MergeFrom(const DynamicTag2& from) {
    GOOGLE_CHECK_NE(&from, this);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_name()) {
            set_name(from.name());
        }
    }
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DynamicTag2::CopyFrom(const ::google::protobuf::Message& from) {
    if (&from == this) {
        return;
    }
    Clear();
    MergeFrom(from);
}

void DynamicTag2::CopyFrom(const DynamicTag2& from) {
    if (&from == this) {
        return;
    }
    Clear();
    MergeFrom(from);
}

bool DynamicTag2::IsInitialized() const {

    return true;
}

void DynamicTag2::Swap(DynamicTag2* other) {
    if (other != this) {
        std::swap(name_, other->name_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }
}

::google::protobuf::Metadata DynamicTag2::GetMetadata() const {
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::Metadata metadata;
    metadata.descriptor = DynamicTag2_descriptor_;
    metadata.reflection = DynamicTag2_reflection_;
    return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TagDynamicTest::kNameFieldNumber;
#endif  // !_MSC_VER

TagDynamicTest::TagDynamicTest()
    : ::google::protobuf::Message() {
    SharedCtor();
}

void TagDynamicTest::InitAsDefaultInstance() {
}

TagDynamicTest::TagDynamicTest(const TagDynamicTest& from)
    : ::google::protobuf::Message() {
    SharedCtor();
    MergeFrom(from);
}

void TagDynamicTest::SharedCtor() {
    _cached_size_ = 0;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TagDynamicTest::~TagDynamicTest() {
    SharedDtor();
}

void TagDynamicTest::SharedDtor() {
    if (name_ != &::google::protobuf::internal::kEmptyString) {
        delete name_;
    }
    if (this != default_instance_) {
    }
}

void TagDynamicTest::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TagDynamicTest::descriptor() {
    protobuf_AssignDescriptorsOnce();
    return TagDynamicTest_descriptor_;
}

const TagDynamicTest& TagDynamicTest::default_instance() {
    if (default_instance_ == NULL) {
        protobuf_AddDesc_dynamic_5ftag_2eproto();
    }
    return *default_instance_;
}

TagDynamicTest* TagDynamicTest::default_instance_ = NULL;

TagDynamicTest* TagDynamicTest::New() const {
    return new TagDynamicTest;
}

void TagDynamicTest::Clear() {
    if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (has_name()) {
            if (name_ != &::google::protobuf::internal::kEmptyString) {
                name_->clear();
            }
        }
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    mutable_unknown_fields()->Clear();
}

bool TagDynamicTest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
    ::google::protobuf::uint32 tag;
    while ((tag = input->ReadTag()) != 0) {
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // optional string name = 1;
        case 1: {
            if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_name()));
                ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                    this->name().data(), this->name().length(),
                    ::google::protobuf::internal::WireFormat::PARSE);
            } else {
                goto handle_uninterpreted;
            }
            if (input->ExpectAtEnd()) {
                return true;
            }
            break;
        }

        default: {
handle_uninterpreted:
            if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                return true;
            }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                    input, tag, mutable_unknown_fields()));
            break;
        }
        }
    }
    return true;
#undef DO_
}

void TagDynamicTest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
    // optional string name = 1;
    if (has_name()) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::SERIALIZE);
        ::google::protobuf::internal::WireFormatLite::WriteString(
            1, this->name(), output);
    }

    if (!unknown_fields().empty()) {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
            unknown_fields(), output);
    }
}

::google::protobuf::uint8* TagDynamicTest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
    // optional string name = 1;
    if (has_name()) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::SERIALIZE);
        target =
            ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                1, this->name(), target);
    }

    if (!unknown_fields().empty()) {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                     unknown_fields(), target);
    }
    return target;
}

int TagDynamicTest::ByteSize() const {
    int total_size = 0;

    if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        // optional string name = 1;
        if (has_name()) {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::StringSize(
                              this->name());
        }

    }
    if (!unknown_fields().empty()) {
        total_size +=
            ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                unknown_fields());
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void TagDynamicTest::MergeFrom(const ::google::protobuf::Message& from) {
    GOOGLE_CHECK_NE(&from, this);
    const TagDynamicTest* source =
        ::google::protobuf::internal::dynamic_cast_if_available<const TagDynamicTest*>(
            &from);
    if (source == NULL) {
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        MergeFrom(*source);
    }
}

void TagDynamicTest::MergeFrom(const TagDynamicTest& from) {
    GOOGLE_CHECK_NE(&from, this);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_name()) {
            set_name(from.name());
        }
    }
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TagDynamicTest::CopyFrom(const ::google::protobuf::Message& from) {
    if (&from == this) {
        return;
    }
    Clear();
    MergeFrom(from);
}

void TagDynamicTest::CopyFrom(const TagDynamicTest& from) {
    if (&from == this) {
        return;
    }
    Clear();
    MergeFrom(from);
}

bool TagDynamicTest::IsInitialized() const {

    return true;
}

void TagDynamicTest::Swap(TagDynamicTest* other) {
    if (other != this) {
        std::swap(name_, other->name_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }
}

::google::protobuf::Metadata TagDynamicTest::GetMetadata() const {
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::Metadata metadata;
    metadata.descriptor = TagDynamicTest_descriptor_;
    metadata.reflection = TagDynamicTest_reflection_;
    return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
