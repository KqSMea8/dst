// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wordcount.proto

#ifndef PROTOBUF_wordcount_2eproto__INCLUDED
#define PROTOBUF_wordcount_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace dstream {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_wordcount_2eproto();
void protobuf_AssignDesc_wordcount_2eproto();
void protobuf_ShutdownFile_wordcount_2eproto();

class WordCountRequest;
class WordCountResponse;

// ===================================================================

class WordCountRequest : public ::google::protobuf::Message {
public:
    WordCountRequest();
    virtual ~WordCountRequest();

    WordCountRequest(const WordCountRequest& from);

    inline WordCountRequest& operator=(const WordCountRequest& from) {
        CopyFrom(from);
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
        return _unknown_fields_;
    }

    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
        return &_unknown_fields_;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const WordCountRequest& default_instance();

    void Swap(WordCountRequest* other);

    // implements Message ----------------------------------------------

    WordCountRequest* New() const;
    void CopyFrom(const ::google::protobuf::Message& from);
    void MergeFrom(const ::google::protobuf::Message& from);
    void CopyFrom(const WordCountRequest& from);
    void MergeFrom(const WordCountRequest& from);
    void Clear();
    bool IsInitialized() const;

    int ByteSize() const;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input);
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const;
    ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
    int GetCachedSize() const {
        return _cached_size_;
    }
private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const;
public:

    ::google::protobuf::Metadata GetMetadata() const;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // optional string word = 1;
    inline bool has_word() const;
    inline void clear_word();
    static const int kWordFieldNumber = 1;
    inline const ::std::string& word() const;
    inline void set_word(const ::std::string& value);
    inline void set_word(const char* value);
    inline void set_word(const char* value, size_t size);
    inline ::std::string* mutable_word();
    inline ::std::string* release_word();

    // optional int32 counts = 2;
    inline bool has_counts() const;
    inline void clear_counts();
    static const int kCountsFieldNumber = 2;
    inline ::google::protobuf::int32 counts() const;
    inline void set_counts(::google::protobuf::int32 value);

    // @@protoc_insertion_point(class_scope:dstream.WordCountRequest)
private:
    inline void set_has_word();
    inline void clear_has_word();
    inline void set_has_counts();
    inline void clear_has_counts();

    ::google::protobuf::UnknownFieldSet _unknown_fields_;

    ::std::string* word_;
    ::google::protobuf::int32 counts_;

    mutable int _cached_size_;
    ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

    friend void  protobuf_AddDesc_wordcount_2eproto();
    friend void protobuf_AssignDesc_wordcount_2eproto();
    friend void protobuf_ShutdownFile_wordcount_2eproto();

    void InitAsDefaultInstance();
    static WordCountRequest* default_instance_;
};
// -------------------------------------------------------------------

class WordCountResponse : public ::google::protobuf::Message {
public:
    WordCountResponse();
    virtual ~WordCountResponse();

    WordCountResponse(const WordCountResponse& from);

    inline WordCountResponse& operator=(const WordCountResponse& from) {
        CopyFrom(from);
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
        return _unknown_fields_;
    }

    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
        return &_unknown_fields_;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const WordCountResponse& default_instance();

    void Swap(WordCountResponse* other);

    // implements Message ----------------------------------------------

    WordCountResponse* New() const;
    void CopyFrom(const ::google::protobuf::Message& from);
    void MergeFrom(const ::google::protobuf::Message& from);
    void CopyFrom(const WordCountResponse& from);
    void MergeFrom(const WordCountResponse& from);
    void Clear();
    bool IsInitialized() const;

    int ByteSize() const;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input);
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const;
    ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
    int GetCachedSize() const {
        return _cached_size_;
    }
private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const;
public:

    ::google::protobuf::Metadata GetMetadata() const;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // optional string word = 1;
    inline bool has_word() const;
    inline void clear_word();
    static const int kWordFieldNumber = 1;
    inline const ::std::string& word() const;
    inline void set_word(const ::std::string& value);
    inline void set_word(const char* value);
    inline void set_word(const char* value, size_t size);
    inline ::std::string* mutable_word();
    inline ::std::string* release_word();

    // optional int32 counts = 2;
    inline bool has_counts() const;
    inline void clear_counts();
    static const int kCountsFieldNumber = 2;
    inline ::google::protobuf::int32 counts() const;
    inline void set_counts(::google::protobuf::int32 value);

    // @@protoc_insertion_point(class_scope:dstream.WordCountResponse)
private:
    inline void set_has_word();
    inline void clear_has_word();
    inline void set_has_counts();
    inline void clear_has_counts();

    ::google::protobuf::UnknownFieldSet _unknown_fields_;

    ::std::string* word_;
    ::google::protobuf::int32 counts_;

    mutable int _cached_size_;
    ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

    friend void  protobuf_AddDesc_wordcount_2eproto();
    friend void protobuf_AssignDesc_wordcount_2eproto();
    friend void protobuf_ShutdownFile_wordcount_2eproto();

    void InitAsDefaultInstance();
    static WordCountResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// WordCountRequest

// optional string word = 1;
inline bool WordCountRequest::has_word() const {
    return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WordCountRequest::set_has_word() {
    _has_bits_[0] |= 0x00000001u;
}
inline void WordCountRequest::clear_has_word() {
    _has_bits_[0] &= ~0x00000001u;
}
inline void WordCountRequest::clear_word() {
    if (word_ != &::google::protobuf::internal::kEmptyString) {
        word_->clear();
    }
    clear_has_word();
}
inline const ::std::string& WordCountRequest::word() const {
    return *word_;
}
inline void WordCountRequest::set_word(const ::std::string& value) {
    set_has_word();
    if (word_ == &::google::protobuf::internal::kEmptyString) {
        word_ = new ::std::string;
    }
    word_->assign(value);
}
inline void WordCountRequest::set_word(const char* value) {
    set_has_word();
    if (word_ == &::google::protobuf::internal::kEmptyString) {
        word_ = new ::std::string;
    }
    word_->assign(value);
}
inline void WordCountRequest::set_word(const char* value, size_t size) {
    set_has_word();
    if (word_ == &::google::protobuf::internal::kEmptyString) {
        word_ = new ::std::string;
    }
    word_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WordCountRequest::mutable_word() {
    set_has_word();
    if (word_ == &::google::protobuf::internal::kEmptyString) {
        word_ = new ::std::string;
    }
    return word_;
}
inline ::std::string* WordCountRequest::release_word() {
    clear_has_word();
    if (word_ == &::google::protobuf::internal::kEmptyString) {
        return NULL;
    } else {
        ::std::string* temp = word_;
        word_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
        return temp;
    }
}

// optional int32 counts = 2;
inline bool WordCountRequest::has_counts() const {
    return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WordCountRequest::set_has_counts() {
    _has_bits_[0] |= 0x00000002u;
}
inline void WordCountRequest::clear_has_counts() {
    _has_bits_[0] &= ~0x00000002u;
}
inline void WordCountRequest::clear_counts() {
    counts_ = 0;
    clear_has_counts();
}
inline ::google::protobuf::int32 WordCountRequest::counts() const {
    return counts_;
}
inline void WordCountRequest::set_counts(::google::protobuf::int32 value) {
    set_has_counts();
    counts_ = value;
}

// -------------------------------------------------------------------

// WordCountResponse

// optional string word = 1;
inline bool WordCountResponse::has_word() const {
    return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WordCountResponse::set_has_word() {
    _has_bits_[0] |= 0x00000001u;
}
inline void WordCountResponse::clear_has_word() {
    _has_bits_[0] &= ~0x00000001u;
}
inline void WordCountResponse::clear_word() {
    if (word_ != &::google::protobuf::internal::kEmptyString) {
        word_->clear();
    }
    clear_has_word();
}
inline const ::std::string& WordCountResponse::word() const {
    return *word_;
}
inline void WordCountResponse::set_word(const ::std::string& value) {
    set_has_word();
    if (word_ == &::google::protobuf::internal::kEmptyString) {
        word_ = new ::std::string;
    }
    word_->assign(value);
}
inline void WordCountResponse::set_word(const char* value) {
    set_has_word();
    if (word_ == &::google::protobuf::internal::kEmptyString) {
        word_ = new ::std::string;
    }
    word_->assign(value);
}
inline void WordCountResponse::set_word(const char* value, size_t size) {
    set_has_word();
    if (word_ == &::google::protobuf::internal::kEmptyString) {
        word_ = new ::std::string;
    }
    word_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WordCountResponse::mutable_word() {
    set_has_word();
    if (word_ == &::google::protobuf::internal::kEmptyString) {
        word_ = new ::std::string;
    }
    return word_;
}
inline ::std::string* WordCountResponse::release_word() {
    clear_has_word();
    if (word_ == &::google::protobuf::internal::kEmptyString) {
        return NULL;
    } else {
        ::std::string* temp = word_;
        word_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
        return temp;
    }
}

// optional int32 counts = 2;
inline bool WordCountResponse::has_counts() const {
    return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WordCountResponse::set_has_counts() {
    _has_bits_[0] |= 0x00000002u;
}
inline void WordCountResponse::clear_has_counts() {
    _has_bits_[0] &= ~0x00000002u;
}
inline void WordCountResponse::clear_counts() {
    counts_ = 0;
    clear_has_counts();
}
inline ::google::protobuf::int32 WordCountResponse::counts() const {
    return counts_;
}
inline void WordCountResponse::set_counts(::google::protobuf::int32 value) {
    set_has_counts();
    counts_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dstream

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_wordcount_2eproto__INCLUDED
