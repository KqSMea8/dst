// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: joiner.proto

#ifndef PROTOBUF_joiner_2eproto__INCLUDED
#define PROTOBUF_joiner_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_joiner_2eproto();
void protobuf_AssignDesc_joiner_2eproto();
void protobuf_ShutdownFile_joiner_2eproto();

class Joiner;

// ===================================================================

class Joiner : public ::google::protobuf::Message {
public:
    Joiner();
    virtual ~Joiner();

    Joiner(const Joiner& from);

    inline Joiner& operator=(const Joiner& from) {
        CopyFrom(from);
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
        return _unknown_fields_;
    }

    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
        return &_unknown_fields_;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const Joiner& default_instance();

    void Swap(Joiner* other);

    // implements Message ----------------------------------------------

    Joiner* New() const;
    void CopyFrom(const ::google::protobuf::Message& from);
    void MergeFrom(const ::google::protobuf::Message& from);
    void CopyFrom(const Joiner& from);
    void MergeFrom(const Joiner& from);
    void Clear();
    bool IsInitialized() const;

    int ByteSize() const;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input);
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const;
    ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
    int GetCachedSize() const {
        return _cached_size_;
    }
private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const;
public:

    ::google::protobuf::Metadata GetMetadata() const;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // optional int64 jk = 1;
    inline bool has_jk() const;
    inline void clear_jk();
    static const int kJkFieldNumber = 1;
    inline ::google::protobuf::int64 jk() const;
    inline void set_jk(::google::protobuf::int64 value);

    // optional int64 timestamp = 2;
    inline bool has_timestamp() const;
    inline void clear_timestamp();
    static const int kTimestampFieldNumber = 2;
    inline ::google::protobuf::int64 timestamp() const;
    inline void set_timestamp(::google::protobuf::int64 value);

    // optional string info = 3;
    inline bool has_info() const;
    inline void clear_info();
    static const int kInfoFieldNumber = 3;
    inline const ::std::string& info() const;
    inline void set_info(const ::std::string& value);
    inline void set_info(const char* value);
    inline void set_info(const char* value, size_t size);
    inline ::std::string* mutable_info();
    inline ::std::string* release_info();

    // @@protoc_insertion_point(class_scope:Joiner)
private:
    inline void set_has_jk();
    inline void clear_has_jk();
    inline void set_has_timestamp();
    inline void clear_has_timestamp();
    inline void set_has_info();
    inline void clear_has_info();

    ::google::protobuf::UnknownFieldSet _unknown_fields_;

    ::google::protobuf::int64 jk_;
    ::google::protobuf::int64 timestamp_;
    ::std::string* info_;

    mutable int _cached_size_;
    ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

    friend void  protobuf_AddDesc_joiner_2eproto();
    friend void protobuf_AssignDesc_joiner_2eproto();
    friend void protobuf_ShutdownFile_joiner_2eproto();

    void InitAsDefaultInstance();
    static Joiner* default_instance_;
};
// ===================================================================


// ===================================================================

// Joiner

// optional int64 jk = 1;
inline bool Joiner::has_jk() const {
    return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Joiner::set_has_jk() {
    _has_bits_[0] |= 0x00000001u;
}
inline void Joiner::clear_has_jk() {
    _has_bits_[0] &= ~0x00000001u;
}
inline void Joiner::clear_jk() {
    jk_ = GOOGLE_LONGLONG(0);
    clear_has_jk();
}
inline ::google::protobuf::int64 Joiner::jk() const {
    return jk_;
}
inline void Joiner::set_jk(::google::protobuf::int64 value) {
    set_has_jk();
    jk_ = value;
}

// optional int64 timestamp = 2;
inline bool Joiner::has_timestamp() const {
    return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Joiner::set_has_timestamp() {
    _has_bits_[0] |= 0x00000002u;
}
inline void Joiner::clear_has_timestamp() {
    _has_bits_[0] &= ~0x00000002u;
}
inline void Joiner::clear_timestamp() {
    timestamp_ = GOOGLE_LONGLONG(0);
    clear_has_timestamp();
}
inline ::google::protobuf::int64 Joiner::timestamp() const {
    return timestamp_;
}
inline void Joiner::set_timestamp(::google::protobuf::int64 value) {
    set_has_timestamp();
    timestamp_ = value;
}

// optional string info = 3;
inline bool Joiner::has_info() const {
    return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Joiner::set_has_info() {
    _has_bits_[0] |= 0x00000004u;
}
inline void Joiner::clear_has_info() {
    _has_bits_[0] &= ~0x00000004u;
}
inline void Joiner::clear_info() {
    if (info_ != &::google::protobuf::internal::kEmptyString) {
        info_->clear();
    }
    clear_has_info();
}
inline const ::std::string& Joiner::info() const {
    return *info_;
}
inline void Joiner::set_info(const ::std::string& value) {
    set_has_info();
    if (info_ == &::google::protobuf::internal::kEmptyString) {
        info_ = new ::std::string;
    }
    info_->assign(value);
}
inline void Joiner::set_info(const char* value) {
    set_has_info();
    if (info_ == &::google::protobuf::internal::kEmptyString) {
        info_ = new ::std::string;
    }
    info_->assign(value);
}
inline void Joiner::set_info(const char* value, size_t size) {
    set_has_info();
    if (info_ == &::google::protobuf::internal::kEmptyString) {
        info_ = new ::std::string;
    }
    info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Joiner::mutable_info() {
    set_has_info();
    if (info_ == &::google::protobuf::internal::kEmptyString) {
        info_ = new ::std::string;
    }
    return info_;
}
inline ::std::string* Joiner::release_info() {
    clear_has_info();
    if (info_ == &::google::protobuf::internal::kEmptyString) {
        return NULL;
    } else {
        ::std::string* temp = info_;
        info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
        return temp;
    }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_joiner_2eproto__INCLUDED
