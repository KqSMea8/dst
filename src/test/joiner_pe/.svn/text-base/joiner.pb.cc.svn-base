// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "joiner.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Joiner_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
Joiner_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_joiner_2eproto() {
    protobuf_AddDesc_joiner_2eproto();
    const ::google::protobuf::FileDescriptor* file =
        ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
            "joiner.proto");
    GOOGLE_CHECK(file != NULL);
    Joiner_descriptor_ = file->message_type(0);
    static const int Joiner_offsets_[3] = {
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joiner, jk_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joiner, timestamp_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joiner, info_),
    };
    Joiner_reflection_ =
        new ::google::protobuf::internal::GeneratedMessageReflection(
        Joiner_descriptor_,
        Joiner::default_instance_,
        Joiner_offsets_,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joiner, _has_bits_[0]),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joiner, _unknown_fields_),
        -1,
        ::google::protobuf::DescriptorPool::generated_pool(),
        ::google::protobuf::MessageFactory::generated_factory(),
        sizeof(Joiner));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
    ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                                       &protobuf_AssignDesc_joiner_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Joiner_descriptor_, &Joiner::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_joiner_2eproto() {
    delete Joiner::default_instance_;
    delete Joiner_reflection_;
}

void protobuf_AddDesc_joiner_2eproto() {
    static bool already_here = false;
    if (already_here) {
        return;
    }
    already_here = true;
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
        "\n\014joiner.proto\"5\n\006Joiner\022\n\n\002jk\030\001 \001(\003\022\021\n\t"
        "timestamp\030\002 \001(\003\022\014\n\004info\030\003 \001(\t", 69);
    ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
        "joiner.proto", &protobuf_RegisterTypes);
    Joiner::default_instance_ = new Joiner();
    Joiner::default_instance_->InitAsDefaultInstance();
    ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_joiner_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_joiner_2eproto {
    StaticDescriptorInitializer_joiner_2eproto() {
        protobuf_AddDesc_joiner_2eproto();
    }
} static_descriptor_initializer_joiner_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Joiner::kJkFieldNumber;
const int Joiner::kTimestampFieldNumber;
const int Joiner::kInfoFieldNumber;
#endif  // !_MSC_VER

Joiner::Joiner()
    : ::google::protobuf::Message() {
    SharedCtor();
}

void Joiner::InitAsDefaultInstance() {
}

Joiner::Joiner(const Joiner& from)
    : ::google::protobuf::Message() {
    SharedCtor();
    MergeFrom(from);
}

void Joiner::SharedCtor() {
    _cached_size_ = 0;
    jk_ = GOOGLE_LONGLONG(0);
    timestamp_ = GOOGLE_LONGLONG(0);
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Joiner::~Joiner() {
    SharedDtor();
}

void Joiner::SharedDtor() {
    if (info_ != &::google::protobuf::internal::kEmptyString) {
        delete info_;
    }
    if (this != default_instance_) {
    }
}

void Joiner::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Joiner::descriptor() {
    protobuf_AssignDescriptorsOnce();
    return Joiner_descriptor_;
}

const Joiner& Joiner::default_instance() {
    if (default_instance_ == NULL) {
        protobuf_AddDesc_joiner_2eproto();
    }
    return *default_instance_;
}

Joiner* Joiner::default_instance_ = NULL;

Joiner* Joiner::New() const {
    return new Joiner;
}

void Joiner::Clear() {
    if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        jk_ = GOOGLE_LONGLONG(0);
        timestamp_ = GOOGLE_LONGLONG(0);
        if (has_info()) {
            if (info_ != &::google::protobuf::internal::kEmptyString) {
                info_->clear();
            }
        }
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    mutable_unknown_fields()->Clear();
}

bool Joiner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
    ::google::protobuf::uint32 tag;
    while ((tag = input->ReadTag()) != 0) {
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // optional int64 jk = 1;
        case 1: {
            if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive <
                     ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64 > (
                         input, &jk_)));
                set_has_jk();
            } else {
                goto handle_uninterpreted;
            }
            if (input->ExpectTag(16)) {
                goto parse_timestamp;
            }
            break;
        }

        // optional int64 timestamp = 2;
        case 2: {
            if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
parse_timestamp:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive <
                     ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64 > (
                         input, &timestamp_)));
                set_has_timestamp();
            } else {
                goto handle_uninterpreted;
            }
            if (input->ExpectTag(26)) {
                goto parse_info;
            }
            break;
        }

        // optional string info = 3;
        case 3: {
            if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
parse_info:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_info()));
                ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                    this->info().data(), this->info().length(),
                    ::google::protobuf::internal::WireFormat::PARSE);
            } else {
                goto handle_uninterpreted;
            }
            if (input->ExpectAtEnd()) {
                return true;
            }
            break;
        }

        default: {
handle_uninterpreted:
            if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                return true;
            }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                    input, tag, mutable_unknown_fields()));
            break;
        }
        }
    }
    return true;
#undef DO_
}

void Joiner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
    // optional int64 jk = 1;
    if (has_jk()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->jk(), output);
    }

    // optional int64 timestamp = 2;
    if (has_timestamp()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
    }

    // optional string info = 3;
    if (has_info()) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormat::SERIALIZE);
        ::google::protobuf::internal::WireFormatLite::WriteString(
            3, this->info(), output);
    }

    if (!unknown_fields().empty()) {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
            unknown_fields(), output);
    }
}

::google::protobuf::uint8* Joiner::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
    // optional int64 jk = 1;
    if (has_jk()) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->jk(), target);
    }

    // optional int64 timestamp = 2;
    if (has_timestamp()) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(),
                 target);
    }

    // optional string info = 3;
    if (has_info()) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormat::SERIALIZE);
        target =
            ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                3, this->info(), target);
    }

    if (!unknown_fields().empty()) {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                     unknown_fields(), target);
    }
    return target;
}

int Joiner::ByteSize() const {
    int total_size = 0;

    if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        // optional int64 jk = 1;
        if (has_jk()) {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::Int64Size(
                              this->jk());
        }

        // optional int64 timestamp = 2;
        if (has_timestamp()) {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::Int64Size(
                              this->timestamp());
        }

        // optional string info = 3;
        if (has_info()) {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::StringSize(
                              this->info());
        }

    }
    if (!unknown_fields().empty()) {
        total_size +=
            ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                unknown_fields());
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void Joiner::MergeFrom(const ::google::protobuf::Message& from) {
    GOOGLE_CHECK_NE(&from, this);
    const Joiner* source =
        ::google::protobuf::internal::dynamic_cast_if_available<const Joiner*>(
            &from);
    if (source == NULL) {
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        MergeFrom(*source);
    }
}

void Joiner::MergeFrom(const Joiner& from) {
    GOOGLE_CHECK_NE(&from, this);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_jk()) {
            set_jk(from.jk());
        }
        if (from.has_timestamp()) {
            set_timestamp(from.timestamp());
        }
        if (from.has_info()) {
            set_info(from.info());
        }
    }
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Joiner::CopyFrom(const ::google::protobuf::Message& from) {
    if (&from == this) {
        return;
    }
    Clear();
    MergeFrom(from);
}

void Joiner::CopyFrom(const Joiner& from) {
    if (&from == this) {
        return;
    }
    Clear();
    MergeFrom(from);
}

bool Joiner::IsInitialized() const {

    return true;
}

void Joiner::Swap(Joiner* other) {
    if (other != this) {
        std::swap(jk_, other->jk_);
        std::swap(timestamp_, other->timestamp_);
        std::swap(info_, other->info_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }
}

::google::protobuf::Metadata Joiner::GetMetadata() const {
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::Metadata metadata;
    metadata.descriptor = Joiner_descriptor_;
    metadata.reflection = Joiner_reflection_;
    return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
