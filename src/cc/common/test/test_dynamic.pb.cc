// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "test_dynamic.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* TestDynamicTest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
TestDynamicTest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_test_5fdynamic_2eproto() {
    protobuf_AddDesc_test_5fdynamic_2eproto();
    const ::google::protobuf::FileDescriptor* file =
        ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
            "test_dynamic.proto");
    GOOGLE_CHECK(file != NULL);
    TestDynamicTest_descriptor_ = file->message_type(0);
    static const int TestDynamicTest_offsets_[1] = {
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestDynamicTest, name_),
    };
    TestDynamicTest_reflection_ =
        new ::google::protobuf::internal::GeneratedMessageReflection(
        TestDynamicTest_descriptor_,
        TestDynamicTest::default_instance_,
        TestDynamicTest_offsets_,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestDynamicTest, _has_bits_[0]),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestDynamicTest, _unknown_fields_),
        -1,
        ::google::protobuf::DescriptorPool::generated_pool(),
        ::google::protobuf::MessageFactory::generated_factory(),
        sizeof(TestDynamicTest));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
    ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                                       &protobuf_AssignDesc_test_5fdynamic_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        TestDynamicTest_descriptor_, &TestDynamicTest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_test_5fdynamic_2eproto() {
    delete TestDynamicTest::default_instance_;
    delete TestDynamicTest_reflection_;
}

void protobuf_AddDesc_test_5fdynamic_2eproto() {
    static bool already_here = false;
    if (already_here) {
        return;
    }
    already_here = true;
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
        "\n\022test_dynamic.proto\"\037\n\017TestDynamicTest\022"
        "\014\n\004name\030\001 \001(\t", 53);
    ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
        "test_dynamic.proto", &protobuf_RegisterTypes);
    TestDynamicTest::default_instance_ = new TestDynamicTest();
    TestDynamicTest::default_instance_->InitAsDefaultInstance();
    ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_test_5fdynamic_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_test_5fdynamic_2eproto {
    StaticDescriptorInitializer_test_5fdynamic_2eproto() {
        protobuf_AddDesc_test_5fdynamic_2eproto();
    }
} static_descriptor_initializer_test_5fdynamic_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int TestDynamicTest::kNameFieldNumber;
#endif  // !_MSC_VER

TestDynamicTest::TestDynamicTest()
    : ::google::protobuf::Message() {
    SharedCtor();
}

void TestDynamicTest::InitAsDefaultInstance() {
}

TestDynamicTest::TestDynamicTest(const TestDynamicTest& from)
    : ::google::protobuf::Message() {
    SharedCtor();
    MergeFrom(from);
}

void TestDynamicTest::SharedCtor() {
    _cached_size_ = 0;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestDynamicTest::~TestDynamicTest() {
    SharedDtor();
}

void TestDynamicTest::SharedDtor() {
    if (name_ != &::google::protobuf::internal::kEmptyString) {
        delete name_;
    }
    if (this != default_instance_) {
    }
}

void TestDynamicTest::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestDynamicTest::descriptor() {
    protobuf_AssignDescriptorsOnce();
    return TestDynamicTest_descriptor_;
}

const TestDynamicTest& TestDynamicTest::default_instance() {
    if (default_instance_ == NULL) {
        protobuf_AddDesc_test_5fdynamic_2eproto();
    }
    return *default_instance_;
}

TestDynamicTest* TestDynamicTest::default_instance_ = NULL;

TestDynamicTest* TestDynamicTest::New() const {
    return new TestDynamicTest;
}

void TestDynamicTest::Clear() {
    if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (has_name()) {
            if (name_ != &::google::protobuf::internal::kEmptyString) {
                name_->clear();
            }
        }
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    mutable_unknown_fields()->Clear();
}

bool TestDynamicTest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
    ::google::protobuf::uint32 tag;
    while ((tag = input->ReadTag()) != 0) {
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // optional string name = 1;
        case 1: {
            if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_name()));
                ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                    this->name().data(), this->name().length(),
                    ::google::protobuf::internal::WireFormat::PARSE);
            } else {
                goto handle_uninterpreted;
            }
            if (input->ExpectAtEnd()) {
                return true;
            }
            break;
        }

        default: {
handle_uninterpreted:
            if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                return true;
            }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                    input, tag, mutable_unknown_fields()));
            break;
        }
        }
    }
    return true;
#undef DO_
}

void TestDynamicTest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
    // optional string name = 1;
    if (has_name()) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::SERIALIZE);
        ::google::protobuf::internal::WireFormatLite::WriteString(
            1, this->name(), output);
    }

    if (!unknown_fields().empty()) {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
            unknown_fields(), output);
    }
}

::google::protobuf::uint8* TestDynamicTest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
    // optional string name = 1;
    if (has_name()) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::SERIALIZE);
        target =
            ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                1, this->name(), target);
    }

    if (!unknown_fields().empty()) {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                     unknown_fields(), target);
    }
    return target;
}

int TestDynamicTest::ByteSize() const {
    int total_size = 0;

    if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        // optional string name = 1;
        if (has_name()) {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::StringSize(
                              this->name());
        }

    }
    if (!unknown_fields().empty()) {
        total_size +=
            ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                unknown_fields());
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void TestDynamicTest::MergeFrom(const ::google::protobuf::Message& from) {
    GOOGLE_CHECK_NE(&from, this);
    const TestDynamicTest* source =
        ::google::protobuf::internal::dynamic_cast_if_available<const TestDynamicTest*>(
            &from);
    if (source == NULL) {
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        MergeFrom(*source);
    }
}

void TestDynamicTest::MergeFrom(const TestDynamicTest& from) {
    GOOGLE_CHECK_NE(&from, this);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_name()) {
            set_name(from.name());
        }
    }
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestDynamicTest::CopyFrom(const ::google::protobuf::Message& from) {
    if (&from == this) {
        return;
    }
    Clear();
    MergeFrom(from);
}

void TestDynamicTest::CopyFrom(const TestDynamicTest& from) {
    if (&from == this) {
        return;
    }
    Clear();
    MergeFrom(from);
}

bool TestDynamicTest::IsInitialized() const {

    return true;
}

void TestDynamicTest::Swap(TestDynamicTest* other) {
    if (other != this) {
        std::swap(name_, other->name_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }
}

::google::protobuf::Metadata TestDynamicTest::GetMetadata() const {
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::Metadata metadata;
    metadata.descriptor = TestDynamicTest_descriptor_;
    metadata.reflection = TestDynamicTest_reflection_;
    return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
