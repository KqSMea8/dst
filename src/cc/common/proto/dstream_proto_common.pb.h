// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dstream_proto_common.proto

#ifndef PROTOBUF_dstream_5fproto_5fcommon_2eproto__INCLUDED
#define PROTOBUF_dstream_5fproto_5fcommon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace dstream {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_dstream_5fproto_5fcommon_2eproto();
void protobuf_AssignDesc_dstream_5fproto_5fcommon_2eproto();
void protobuf_ShutdownFile_dstream_5fproto_5fcommon_2eproto();

class ProcessorID;
class PNID;
class PEID;
class Resource;
class PNResourceStatus;
class PEPNBlackList;

// ===================================================================

class ProcessorID : public ::google::protobuf::Message {
 public:
  ProcessorID();
  virtual ~ProcessorID();
  
  ProcessorID(const ProcessorID& from);
  
  inline ProcessorID& operator=(const ProcessorID& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcessorID& default_instance();
  
  void Swap(ProcessorID* other);
  
  // implements Message ----------------------------------------------
  
  ProcessorID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProcessorID& from);
  void MergeFrom(const ProcessorID& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional fixed64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:dstream.ProcessorID)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_dstream_5fproto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dstream_5fproto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dstream_5fproto_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static ProcessorID* default_instance_;
};
// -------------------------------------------------------------------

class PNID : public ::google::protobuf::Message {
 public:
  PNID();
  virtual ~PNID();
  
  PNID(const PNID& from);
  
  inline PNID& operator=(const PNID& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PNID& default_instance();
  
  void Swap(PNID* other);
  
  // implements Message ----------------------------------------------
  
  PNID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PNID& from);
  void MergeFrom(const PNID& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  // @@protoc_insertion_point(class_scope:dstream.PNID)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_dstream_5fproto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dstream_5fproto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dstream_5fproto_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static PNID* default_instance_;
};
// -------------------------------------------------------------------

class PEID : public ::google::protobuf::Message {
 public:
  PEID();
  virtual ~PEID();
  
  PEID(const PEID& from);
  
  inline PEID& operator=(const PEID& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PEID& default_instance();
  
  void Swap(PEID* other);
  
  // implements Message ----------------------------------------------
  
  PEID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PEID& from);
  void MergeFrom(const PEID& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional fixed64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:dstream.PEID)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_dstream_5fproto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dstream_5fproto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dstream_5fproto_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static PEID* default_instance_;
};
// -------------------------------------------------------------------

class Resource : public ::google::protobuf::Message {
 public:
  Resource();
  virtual ~Resource();
  
  Resource(const Resource& from);
  
  inline Resource& operator=(const Resource& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Resource& default_instance();
  
  void Swap(Resource* other);
  
  // implements Message ----------------------------------------------
  
  Resource* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Resource& from);
  void MergeFrom(const Resource& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional float cpu = 1;
  inline bool has_cpu() const;
  inline void clear_cpu();
  static const int kCpuFieldNumber = 1;
  inline float cpu() const;
  inline void set_cpu(float value);
  
  // optional fixed64 memory = 2;
  inline bool has_memory() const;
  inline void clear_memory();
  static const int kMemoryFieldNumber = 2;
  inline ::google::protobuf::uint64 memory() const;
  inline void set_memory(::google::protobuf::uint64 value);
  
  // optional fixed64 network = 3;
  inline bool has_network() const;
  inline void clear_network();
  static const int kNetworkFieldNumber = 3;
  inline ::google::protobuf::uint64 network() const;
  inline void set_network(::google::protobuf::uint64 value);
  
  // optional fixed64 disk = 4;
  inline bool has_disk() const;
  inline void clear_disk();
  static const int kDiskFieldNumber = 4;
  inline ::google::protobuf::uint64 disk() const;
  inline void set_disk(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:dstream.Resource)
 private:
  inline void set_has_cpu();
  inline void clear_has_cpu();
  inline void set_has_memory();
  inline void clear_has_memory();
  inline void set_has_network();
  inline void clear_has_network();
  inline void set_has_disk();
  inline void clear_has_disk();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 memory_;
  ::google::protobuf::uint64 network_;
  ::google::protobuf::uint64 disk_;
  float cpu_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_dstream_5fproto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dstream_5fproto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dstream_5fproto_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static Resource* default_instance_;
};
// -------------------------------------------------------------------

class PNResourceStatus : public ::google::protobuf::Message {
 public:
  PNResourceStatus();
  virtual ~PNResourceStatus();
  
  PNResourceStatus(const PNResourceStatus& from);
  
  inline PNResourceStatus& operator=(const PNResourceStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PNResourceStatus& default_instance();
  
  void Swap(PNResourceStatus* other);
  
  // implements Message ----------------------------------------------
  
  PNResourceStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PNResourceStatus& from);
  void MergeFrom(const PNResourceStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .dstream.Resource total_resource = 1;
  inline bool has_total_resource() const;
  inline void clear_total_resource();
  static const int kTotalResourceFieldNumber = 1;
  inline const ::dstream::Resource& total_resource() const;
  inline ::dstream::Resource* mutable_total_resource();
  inline ::dstream::Resource* release_total_resource();
  
  // optional float cpu_utilize = 2;
  inline bool has_cpu_utilize() const;
  inline void clear_cpu_utilize();
  static const int kCpuUtilizeFieldNumber = 2;
  inline float cpu_utilize() const;
  inline void set_cpu_utilize(float value);
  
  // optional float memory_utilize = 4;
  inline bool has_memory_utilize() const;
  inline void clear_memory_utilize();
  static const int kMemoryUtilizeFieldNumber = 4;
  inline float memory_utilize() const;
  inline void set_memory_utilize(float value);
  
  // optional float network_utilize = 6;
  inline bool has_network_utilize() const;
  inline void clear_network_utilize();
  static const int kNetworkUtilizeFieldNumber = 6;
  inline float network_utilize() const;
  inline void set_network_utilize(float value);
  
  // optional float disk_utilize = 8;
  inline bool has_disk_utilize() const;
  inline void clear_disk_utilize();
  static const int kDiskUtilizeFieldNumber = 8;
  inline float disk_utilize() const;
  inline void set_disk_utilize(float value);
  
  // @@protoc_insertion_point(class_scope:dstream.PNResourceStatus)
 private:
  inline void set_has_total_resource();
  inline void clear_has_total_resource();
  inline void set_has_cpu_utilize();
  inline void clear_has_cpu_utilize();
  inline void set_has_memory_utilize();
  inline void clear_has_memory_utilize();
  inline void set_has_network_utilize();
  inline void clear_has_network_utilize();
  inline void set_has_disk_utilize();
  inline void clear_has_disk_utilize();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::dstream::Resource* total_resource_;
  float cpu_utilize_;
  float memory_utilize_;
  float network_utilize_;
  float disk_utilize_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_dstream_5fproto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dstream_5fproto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dstream_5fproto_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static PNResourceStatus* default_instance_;
};
// -------------------------------------------------------------------

class PEPNBlackList : public ::google::protobuf::Message {
 public:
  PEPNBlackList();
  virtual ~PEPNBlackList();
  
  PEPNBlackList(const PEPNBlackList& from);
  
  inline PEPNBlackList& operator=(const PEPNBlackList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PEPNBlackList& default_instance();
  
  void Swap(PEPNBlackList* other);
  
  // implements Message ----------------------------------------------
  
  PEPNBlackList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PEPNBlackList& from);
  void MergeFrom(const PEPNBlackList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .dstream.PEID pe_id = 1;
  inline bool has_pe_id() const;
  inline void clear_pe_id();
  static const int kPeIdFieldNumber = 1;
  inline const ::dstream::PEID& pe_id() const;
  inline ::dstream::PEID* mutable_pe_id();
  inline ::dstream::PEID* release_pe_id();
  
  // repeated .dstream.PNID pn_id = 2;
  inline int pn_id_size() const;
  inline void clear_pn_id();
  static const int kPnIdFieldNumber = 2;
  inline const ::dstream::PNID& pn_id(int index) const;
  inline ::dstream::PNID* mutable_pn_id(int index);
  inline ::dstream::PNID* add_pn_id();
  inline const ::google::protobuf::RepeatedPtrField< ::dstream::PNID >&
      pn_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::dstream::PNID >*
      mutable_pn_id();
  
  // @@protoc_insertion_point(class_scope:dstream.PEPNBlackList)
 private:
  inline void set_has_pe_id();
  inline void clear_has_pe_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::dstream::PEID* pe_id_;
  ::google::protobuf::RepeatedPtrField< ::dstream::PNID > pn_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dstream_5fproto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dstream_5fproto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dstream_5fproto_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static PEPNBlackList* default_instance_;
};
// ===================================================================


// ===================================================================

// ProcessorID

// optional fixed64 id = 1;
inline bool ProcessorID::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProcessorID::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProcessorID::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProcessorID::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 ProcessorID::id() const {
  return id_;
}
inline void ProcessorID::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// PNID

// optional string id = 1;
inline bool PNID::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PNID::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PNID::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PNID::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& PNID::id() const {
  return *id_;
}
inline void PNID::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void PNID::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void PNID::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PNID::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* PNID::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PEID

// optional fixed64 id = 1;
inline bool PEID::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PEID::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PEID::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PEID::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 PEID::id() const {
  return id_;
}
inline void PEID::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// Resource

// optional float cpu = 1;
inline bool Resource::has_cpu() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Resource::set_has_cpu() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Resource::clear_has_cpu() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Resource::clear_cpu() {
  cpu_ = 0;
  clear_has_cpu();
}
inline float Resource::cpu() const {
  return cpu_;
}
inline void Resource::set_cpu(float value) {
  set_has_cpu();
  cpu_ = value;
}

// optional fixed64 memory = 2;
inline bool Resource::has_memory() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Resource::set_has_memory() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Resource::clear_has_memory() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Resource::clear_memory() {
  memory_ = GOOGLE_ULONGLONG(0);
  clear_has_memory();
}
inline ::google::protobuf::uint64 Resource::memory() const {
  return memory_;
}
inline void Resource::set_memory(::google::protobuf::uint64 value) {
  set_has_memory();
  memory_ = value;
}

// optional fixed64 network = 3;
inline bool Resource::has_network() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Resource::set_has_network() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Resource::clear_has_network() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Resource::clear_network() {
  network_ = GOOGLE_ULONGLONG(0);
  clear_has_network();
}
inline ::google::protobuf::uint64 Resource::network() const {
  return network_;
}
inline void Resource::set_network(::google::protobuf::uint64 value) {
  set_has_network();
  network_ = value;
}

// optional fixed64 disk = 4;
inline bool Resource::has_disk() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Resource::set_has_disk() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Resource::clear_has_disk() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Resource::clear_disk() {
  disk_ = GOOGLE_ULONGLONG(0);
  clear_has_disk();
}
inline ::google::protobuf::uint64 Resource::disk() const {
  return disk_;
}
inline void Resource::set_disk(::google::protobuf::uint64 value) {
  set_has_disk();
  disk_ = value;
}

// -------------------------------------------------------------------

// PNResourceStatus

// optional .dstream.Resource total_resource = 1;
inline bool PNResourceStatus::has_total_resource() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PNResourceStatus::set_has_total_resource() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PNResourceStatus::clear_has_total_resource() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PNResourceStatus::clear_total_resource() {
  if (total_resource_ != NULL) total_resource_->::dstream::Resource::Clear();
  clear_has_total_resource();
}
inline const ::dstream::Resource& PNResourceStatus::total_resource() const {
  return total_resource_ != NULL ? *total_resource_ : *default_instance_->total_resource_;
}
inline ::dstream::Resource* PNResourceStatus::mutable_total_resource() {
  set_has_total_resource();
  if (total_resource_ == NULL) total_resource_ = new ::dstream::Resource;
  return total_resource_;
}
inline ::dstream::Resource* PNResourceStatus::release_total_resource() {
  clear_has_total_resource();
  ::dstream::Resource* temp = total_resource_;
  total_resource_ = NULL;
  return temp;
}

// optional float cpu_utilize = 2;
inline bool PNResourceStatus::has_cpu_utilize() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PNResourceStatus::set_has_cpu_utilize() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PNResourceStatus::clear_has_cpu_utilize() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PNResourceStatus::clear_cpu_utilize() {
  cpu_utilize_ = 0;
  clear_has_cpu_utilize();
}
inline float PNResourceStatus::cpu_utilize() const {
  return cpu_utilize_;
}
inline void PNResourceStatus::set_cpu_utilize(float value) {
  set_has_cpu_utilize();
  cpu_utilize_ = value;
}

// optional float memory_utilize = 4;
inline bool PNResourceStatus::has_memory_utilize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PNResourceStatus::set_has_memory_utilize() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PNResourceStatus::clear_has_memory_utilize() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PNResourceStatus::clear_memory_utilize() {
  memory_utilize_ = 0;
  clear_has_memory_utilize();
}
inline float PNResourceStatus::memory_utilize() const {
  return memory_utilize_;
}
inline void PNResourceStatus::set_memory_utilize(float value) {
  set_has_memory_utilize();
  memory_utilize_ = value;
}

// optional float network_utilize = 6;
inline bool PNResourceStatus::has_network_utilize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PNResourceStatus::set_has_network_utilize() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PNResourceStatus::clear_has_network_utilize() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PNResourceStatus::clear_network_utilize() {
  network_utilize_ = 0;
  clear_has_network_utilize();
}
inline float PNResourceStatus::network_utilize() const {
  return network_utilize_;
}
inline void PNResourceStatus::set_network_utilize(float value) {
  set_has_network_utilize();
  network_utilize_ = value;
}

// optional float disk_utilize = 8;
inline bool PNResourceStatus::has_disk_utilize() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PNResourceStatus::set_has_disk_utilize() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PNResourceStatus::clear_has_disk_utilize() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PNResourceStatus::clear_disk_utilize() {
  disk_utilize_ = 0;
  clear_has_disk_utilize();
}
inline float PNResourceStatus::disk_utilize() const {
  return disk_utilize_;
}
inline void PNResourceStatus::set_disk_utilize(float value) {
  set_has_disk_utilize();
  disk_utilize_ = value;
}

// -------------------------------------------------------------------

// PEPNBlackList

// optional .dstream.PEID pe_id = 1;
inline bool PEPNBlackList::has_pe_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PEPNBlackList::set_has_pe_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PEPNBlackList::clear_has_pe_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PEPNBlackList::clear_pe_id() {
  if (pe_id_ != NULL) pe_id_->::dstream::PEID::Clear();
  clear_has_pe_id();
}
inline const ::dstream::PEID& PEPNBlackList::pe_id() const {
  return pe_id_ != NULL ? *pe_id_ : *default_instance_->pe_id_;
}
inline ::dstream::PEID* PEPNBlackList::mutable_pe_id() {
  set_has_pe_id();
  if (pe_id_ == NULL) pe_id_ = new ::dstream::PEID;
  return pe_id_;
}
inline ::dstream::PEID* PEPNBlackList::release_pe_id() {
  clear_has_pe_id();
  ::dstream::PEID* temp = pe_id_;
  pe_id_ = NULL;
  return temp;
}

// repeated .dstream.PNID pn_id = 2;
inline int PEPNBlackList::pn_id_size() const {
  return pn_id_.size();
}
inline void PEPNBlackList::clear_pn_id() {
  pn_id_.Clear();
}
inline const ::dstream::PNID& PEPNBlackList::pn_id(int index) const {
  return pn_id_.Get(index);
}
inline ::dstream::PNID* PEPNBlackList::mutable_pn_id(int index) {
  return pn_id_.Mutable(index);
}
inline ::dstream::PNID* PEPNBlackList::add_pn_id() {
  return pn_id_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dstream::PNID >&
PEPNBlackList::pn_id() const {
  return pn_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::dstream::PNID >*
PEPNBlackList::mutable_pn_id() {
  return &pn_id_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dstream

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dstream_5fproto_5fcommon_2eproto__INCLUDED
