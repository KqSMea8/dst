// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cluster_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dstream {

namespace {

const ::google::protobuf::Descriptor* ClusterConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClusterConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* PMMachines_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PMMachines_reflection_ = NULL;
const ::google::protobuf::Descriptor* PNMachines_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PNMachines_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PNGroups_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PNGroups_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GroupType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_cluster_5fconfig_2eproto() {
  protobuf_AddDesc_cluster_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cluster_config.proto");
  GOOGLE_CHECK(file != NULL);
  ClusterConfig_descriptor_ = file->message_type(0);
  static const int ClusterConfig_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterConfig, users_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterConfig, hdfs_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterConfig, min_host_percentage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterConfig, hdfs_pn_log_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterConfig, wait_pn_time_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterConfig, pe_failpn_max_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterConfig, pefail_reserve_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterConfig, max_pe_num_per_pn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterConfig, check_pn_size_),
  };
  ClusterConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClusterConfig_descriptor_,
      ClusterConfig::default_instance_,
      ClusterConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClusterConfig));
  PMMachines_descriptor_ = file->message_type(1);
  static const int PMMachines_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMMachines, pm_list_),
  };
  PMMachines_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PMMachines_descriptor_,
      PMMachines::default_instance_,
      PMMachines_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMMachines, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMMachines, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PMMachines));
  PNMachines_descriptor_ = file->message_type(2);
  static const int PNMachines_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNMachines, pn_list_),
  };
  PNMachines_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PNMachines_descriptor_,
      PNMachines::default_instance_,
      PNMachines_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNMachines, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNMachines, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PNMachines));
  GroupInfo_descriptor_ = file->message_type(3);
  static const int GroupInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInfo, group_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInfo, pn_list_),
  };
  GroupInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupInfo_descriptor_,
      GroupInfo::default_instance_,
      GroupInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupInfo));
  PNGroups_descriptor_ = file->message_type(4);
  static const int PNGroups_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNGroups, group_list_),
  };
  PNGroups_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PNGroups_descriptor_,
      PNGroups::default_instance_,
      PNGroups_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNGroups, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNGroups, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PNGroups));
  GroupType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cluster_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClusterConfig_descriptor_, &ClusterConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PMMachines_descriptor_, &PMMachines::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PNMachines_descriptor_, &PNMachines::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupInfo_descriptor_, &GroupInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PNGroups_descriptor_, &PNGroups::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cluster_5fconfig_2eproto() {
  delete ClusterConfig::default_instance_;
  delete ClusterConfig_reflection_;
  delete PMMachines::default_instance_;
  delete PMMachines_reflection_;
  delete PNMachines::default_instance_;
  delete PNMachines_reflection_;
  delete GroupInfo::default_instance_;
  delete GroupInfo_reflection_;
  delete PNGroups::default_instance_;
  delete PNGroups_reflection_;
}

void protobuf_AddDesc_cluster_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::dstream::protobuf_AddDesc_application_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024cluster_config.proto\022\007dstream\032\021applica"
    "tion.proto\"\373\001\n\rClusterConfig\022\034\n\005users\030\001 "
    "\003(\0132\r.dstream.User\022\021\n\thdfs_path\030\002 \001(\t\022\033\n"
    "\023min_host_percentage\030\003 \001(\002\022\030\n\020hdfs_pn_lo"
    "g_path\030\004 \001(\t\022\030\n\020wait_pn_time_sec\030\005 \001(\007\022\031"
    "\n\021pe_failpn_max_num\030\006 \001(\007\022\033\n\023pefail_rese"
    "rve_time\030\007 \001(\007\022\031\n\021max_pe_num_per_pn\030\010 \001("
    "\007\022\025\n\rcheck_pn_size\030\t \001(\007\"\035\n\nPMMachines\022\017"
    "\n\007pm_list\030\001 \003(\t\"\035\n\nPNMachines\022\017\n\007pn_list"
    "\030\001 \003(\t\"0\n\tGroupInfo\022\022\n\ngroup_name\030\001 \001(\t\022"
    "\017\n\007pn_list\030\002 \003(\t\"2\n\010PNGroups\022&\n\ngroup_li"
    "st\030\001 \003(\0132\022.dstream.GroupInfo*$\n\tGroupTyp"
    "e\022\t\n\005SHARE\020\000\022\014\n\010MONOPOLY\020\001", 506);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cluster_config.proto", &protobuf_RegisterTypes);
  ClusterConfig::default_instance_ = new ClusterConfig();
  PMMachines::default_instance_ = new PMMachines();
  PNMachines::default_instance_ = new PNMachines();
  GroupInfo::default_instance_ = new GroupInfo();
  PNGroups::default_instance_ = new PNGroups();
  ClusterConfig::default_instance_->InitAsDefaultInstance();
  PMMachines::default_instance_->InitAsDefaultInstance();
  PNMachines::default_instance_->InitAsDefaultInstance();
  GroupInfo::default_instance_->InitAsDefaultInstance();
  PNGroups::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cluster_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cluster_5fconfig_2eproto {
  StaticDescriptorInitializer_cluster_5fconfig_2eproto() {
    protobuf_AddDesc_cluster_5fconfig_2eproto();
  }
} static_descriptor_initializer_cluster_5fconfig_2eproto_;

const ::google::protobuf::EnumDescriptor* GroupType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupType_descriptor_;
}
bool GroupType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ClusterConfig::kUsersFieldNumber;
const int ClusterConfig::kHdfsPathFieldNumber;
const int ClusterConfig::kMinHostPercentageFieldNumber;
const int ClusterConfig::kHdfsPnLogPathFieldNumber;
const int ClusterConfig::kWaitPnTimeSecFieldNumber;
const int ClusterConfig::kPeFailpnMaxNumFieldNumber;
const int ClusterConfig::kPefailReserveTimeFieldNumber;
const int ClusterConfig::kMaxPeNumPerPnFieldNumber;
const int ClusterConfig::kCheckPnSizeFieldNumber;
#endif  // !_MSC_VER

ClusterConfig::ClusterConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClusterConfig::InitAsDefaultInstance() {
}

ClusterConfig::ClusterConfig(const ClusterConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClusterConfig::SharedCtor() {
  _cached_size_ = 0;
  hdfs_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  min_host_percentage_ = 0;
  hdfs_pn_log_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wait_pn_time_sec_ = 0u;
  pe_failpn_max_num_ = 0u;
  pefail_reserve_time_ = 0u;
  max_pe_num_per_pn_ = 0u;
  check_pn_size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClusterConfig::~ClusterConfig() {
  SharedDtor();
}

void ClusterConfig::SharedDtor() {
  if (hdfs_path_ != &::google::protobuf::internal::kEmptyString) {
    delete hdfs_path_;
  }
  if (hdfs_pn_log_path_ != &::google::protobuf::internal::kEmptyString) {
    delete hdfs_pn_log_path_;
  }
  if (this != default_instance_) {
  }
}

void ClusterConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClusterConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClusterConfig_descriptor_;
}

const ClusterConfig& ClusterConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cluster_5fconfig_2eproto();  return *default_instance_;
}

ClusterConfig* ClusterConfig::default_instance_ = NULL;

ClusterConfig* ClusterConfig::New() const {
  return new ClusterConfig;
}

void ClusterConfig::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_hdfs_path()) {
      if (hdfs_path_ != &::google::protobuf::internal::kEmptyString) {
        hdfs_path_->clear();
      }
    }
    min_host_percentage_ = 0;
    if (has_hdfs_pn_log_path()) {
      if (hdfs_pn_log_path_ != &::google::protobuf::internal::kEmptyString) {
        hdfs_pn_log_path_->clear();
      }
    }
    wait_pn_time_sec_ = 0u;
    pe_failpn_max_num_ = 0u;
    pefail_reserve_time_ = 0u;
    max_pe_num_per_pn_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    check_pn_size_ = 0u;
  }
  users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClusterConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dstream.User users = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_users;
        if (input->ExpectTag(18)) goto parse_hdfs_path;
        break;
      }
      
      // optional string hdfs_path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hdfs_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hdfs_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hdfs_path().data(), this->hdfs_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_min_host_percentage;
        break;
      }
      
      // optional float min_host_percentage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_min_host_percentage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_host_percentage_)));
          set_has_min_host_percentage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_hdfs_pn_log_path;
        break;
      }
      
      // optional string hdfs_pn_log_path = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hdfs_pn_log_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hdfs_pn_log_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hdfs_pn_log_path().data(), this->hdfs_pn_log_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_wait_pn_time_sec;
        break;
      }
      
      // optional fixed32 wait_pn_time_sec = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_wait_pn_time_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &wait_pn_time_sec_)));
          set_has_wait_pn_time_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_pe_failpn_max_num;
        break;
      }
      
      // optional fixed32 pe_failpn_max_num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pe_failpn_max_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &pe_failpn_max_num_)));
          set_has_pe_failpn_max_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_pefail_reserve_time;
        break;
      }
      
      // optional fixed32 pefail_reserve_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pefail_reserve_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &pefail_reserve_time_)));
          set_has_pefail_reserve_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_max_pe_num_per_pn;
        break;
      }
      
      // optional fixed32 max_pe_num_per_pn = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_max_pe_num_per_pn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &max_pe_num_per_pn_)));
          set_has_max_pe_num_per_pn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_check_pn_size;
        break;
      }
      
      // optional fixed32 check_pn_size = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_check_pn_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &check_pn_size_)));
          set_has_check_pn_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClusterConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .dstream.User users = 1;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->users(i), output);
  }
  
  // optional string hdfs_path = 2;
  if (has_hdfs_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hdfs_path().data(), this->hdfs_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->hdfs_path(), output);
  }
  
  // optional float min_host_percentage = 3;
  if (has_min_host_percentage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->min_host_percentage(), output);
  }
  
  // optional string hdfs_pn_log_path = 4;
  if (has_hdfs_pn_log_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hdfs_pn_log_path().data(), this->hdfs_pn_log_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->hdfs_pn_log_path(), output);
  }
  
  // optional fixed32 wait_pn_time_sec = 5;
  if (has_wait_pn_time_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->wait_pn_time_sec(), output);
  }
  
  // optional fixed32 pe_failpn_max_num = 6;
  if (has_pe_failpn_max_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->pe_failpn_max_num(), output);
  }
  
  // optional fixed32 pefail_reserve_time = 7;
  if (has_pefail_reserve_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->pefail_reserve_time(), output);
  }
  
  // optional fixed32 max_pe_num_per_pn = 8;
  if (has_max_pe_num_per_pn()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->max_pe_num_per_pn(), output);
  }
  
  // optional fixed32 check_pn_size = 9;
  if (has_check_pn_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(9, this->check_pn_size(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClusterConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .dstream.User users = 1;
  for (int i = 0; i < this->users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->users(i), target);
  }
  
  // optional string hdfs_path = 2;
  if (has_hdfs_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hdfs_path().data(), this->hdfs_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hdfs_path(), target);
  }
  
  // optional float min_host_percentage = 3;
  if (has_min_host_percentage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->min_host_percentage(), target);
  }
  
  // optional string hdfs_pn_log_path = 4;
  if (has_hdfs_pn_log_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hdfs_pn_log_path().data(), this->hdfs_pn_log_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->hdfs_pn_log_path(), target);
  }
  
  // optional fixed32 wait_pn_time_sec = 5;
  if (has_wait_pn_time_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->wait_pn_time_sec(), target);
  }
  
  // optional fixed32 pe_failpn_max_num = 6;
  if (has_pe_failpn_max_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(6, this->pe_failpn_max_num(), target);
  }
  
  // optional fixed32 pefail_reserve_time = 7;
  if (has_pefail_reserve_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->pefail_reserve_time(), target);
  }
  
  // optional fixed32 max_pe_num_per_pn = 8;
  if (has_max_pe_num_per_pn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->max_pe_num_per_pn(), target);
  }
  
  // optional fixed32 check_pn_size = 9;
  if (has_check_pn_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(9, this->check_pn_size(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClusterConfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string hdfs_path = 2;
    if (has_hdfs_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hdfs_path());
    }
    
    // optional float min_host_percentage = 3;
    if (has_min_host_percentage()) {
      total_size += 1 + 4;
    }
    
    // optional string hdfs_pn_log_path = 4;
    if (has_hdfs_pn_log_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hdfs_pn_log_path());
    }
    
    // optional fixed32 wait_pn_time_sec = 5;
    if (has_wait_pn_time_sec()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 pe_failpn_max_num = 6;
    if (has_pe_failpn_max_num()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 pefail_reserve_time = 7;
    if (has_pefail_reserve_time()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 max_pe_num_per_pn = 8;
    if (has_max_pe_num_per_pn()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional fixed32 check_pn_size = 9;
    if (has_check_pn_size()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated .dstream.User users = 1;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClusterConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClusterConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClusterConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClusterConfig::MergeFrom(const ClusterConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  users_.MergeFrom(from.users_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_hdfs_path()) {
      set_hdfs_path(from.hdfs_path());
    }
    if (from.has_min_host_percentage()) {
      set_min_host_percentage(from.min_host_percentage());
    }
    if (from.has_hdfs_pn_log_path()) {
      set_hdfs_pn_log_path(from.hdfs_pn_log_path());
    }
    if (from.has_wait_pn_time_sec()) {
      set_wait_pn_time_sec(from.wait_pn_time_sec());
    }
    if (from.has_pe_failpn_max_num()) {
      set_pe_failpn_max_num(from.pe_failpn_max_num());
    }
    if (from.has_pefail_reserve_time()) {
      set_pefail_reserve_time(from.pefail_reserve_time());
    }
    if (from.has_max_pe_num_per_pn()) {
      set_max_pe_num_per_pn(from.max_pe_num_per_pn());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_check_pn_size()) {
      set_check_pn_size(from.check_pn_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClusterConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterConfig::CopyFrom(const ClusterConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClusterConfig::IsInitialized() const {
  
  return true;
}

void ClusterConfig::Swap(ClusterConfig* other) {
  if (other != this) {
    users_.Swap(&other->users_);
    std::swap(hdfs_path_, other->hdfs_path_);
    std::swap(min_host_percentage_, other->min_host_percentage_);
    std::swap(hdfs_pn_log_path_, other->hdfs_pn_log_path_);
    std::swap(wait_pn_time_sec_, other->wait_pn_time_sec_);
    std::swap(pe_failpn_max_num_, other->pe_failpn_max_num_);
    std::swap(pefail_reserve_time_, other->pefail_reserve_time_);
    std::swap(max_pe_num_per_pn_, other->max_pe_num_per_pn_);
    std::swap(check_pn_size_, other->check_pn_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClusterConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClusterConfig_descriptor_;
  metadata.reflection = ClusterConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PMMachines::kPmListFieldNumber;
#endif  // !_MSC_VER

PMMachines::PMMachines()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PMMachines::InitAsDefaultInstance() {
}

PMMachines::PMMachines(const PMMachines& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PMMachines::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PMMachines::~PMMachines() {
  SharedDtor();
}

void PMMachines::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PMMachines::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PMMachines::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PMMachines_descriptor_;
}

const PMMachines& PMMachines::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cluster_5fconfig_2eproto();  return *default_instance_;
}

PMMachines* PMMachines::default_instance_ = NULL;

PMMachines* PMMachines::New() const {
  return new PMMachines;
}

void PMMachines::Clear() {
  pm_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PMMachines::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string pm_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pm_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_pm_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pm_list(0).data(), this->pm_list(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pm_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PMMachines::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string pm_list = 1;
  for (int i = 0; i < this->pm_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->pm_list(i).data(), this->pm_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->pm_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PMMachines::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string pm_list = 1;
  for (int i = 0; i < this->pm_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pm_list(i).data(), this->pm_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->pm_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PMMachines::ByteSize() const {
  int total_size = 0;
  
  // repeated string pm_list = 1;
  total_size += 1 * this->pm_list_size();
  for (int i = 0; i < this->pm_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->pm_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PMMachines::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PMMachines* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PMMachines*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PMMachines::MergeFrom(const PMMachines& from) {
  GOOGLE_CHECK_NE(&from, this);
  pm_list_.MergeFrom(from.pm_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PMMachines::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PMMachines::CopyFrom(const PMMachines& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PMMachines::IsInitialized() const {
  
  return true;
}

void PMMachines::Swap(PMMachines* other) {
  if (other != this) {
    pm_list_.Swap(&other->pm_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PMMachines::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PMMachines_descriptor_;
  metadata.reflection = PMMachines_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PNMachines::kPnListFieldNumber;
#endif  // !_MSC_VER

PNMachines::PNMachines()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PNMachines::InitAsDefaultInstance() {
}

PNMachines::PNMachines(const PNMachines& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PNMachines::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PNMachines::~PNMachines() {
  SharedDtor();
}

void PNMachines::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PNMachines::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PNMachines::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PNMachines_descriptor_;
}

const PNMachines& PNMachines::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cluster_5fconfig_2eproto();  return *default_instance_;
}

PNMachines* PNMachines::default_instance_ = NULL;

PNMachines* PNMachines::New() const {
  return new PNMachines;
}

void PNMachines::Clear() {
  pn_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PNMachines::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string pn_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pn_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_pn_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pn_list(0).data(), this->pn_list(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pn_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PNMachines::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string pn_list = 1;
  for (int i = 0; i < this->pn_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->pn_list(i).data(), this->pn_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->pn_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PNMachines::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string pn_list = 1;
  for (int i = 0; i < this->pn_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pn_list(i).data(), this->pn_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->pn_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PNMachines::ByteSize() const {
  int total_size = 0;
  
  // repeated string pn_list = 1;
  total_size += 1 * this->pn_list_size();
  for (int i = 0; i < this->pn_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->pn_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PNMachines::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PNMachines* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PNMachines*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PNMachines::MergeFrom(const PNMachines& from) {
  GOOGLE_CHECK_NE(&from, this);
  pn_list_.MergeFrom(from.pn_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PNMachines::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PNMachines::CopyFrom(const PNMachines& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PNMachines::IsInitialized() const {
  
  return true;
}

void PNMachines::Swap(PNMachines* other) {
  if (other != this) {
    pn_list_.Swap(&other->pn_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PNMachines::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PNMachines_descriptor_;
  metadata.reflection = PNMachines_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupInfo::kGroupNameFieldNumber;
const int GroupInfo::kPnListFieldNumber;
#endif  // !_MSC_VER

GroupInfo::GroupInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupInfo::InitAsDefaultInstance() {
}

GroupInfo::GroupInfo(const GroupInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupInfo::SharedCtor() {
  _cached_size_ = 0;
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupInfo::~GroupInfo() {
  SharedDtor();
}

void GroupInfo::SharedDtor() {
  if (group_name_ != &::google::protobuf::internal::kEmptyString) {
    delete group_name_;
  }
  if (this != default_instance_) {
  }
}

void GroupInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupInfo_descriptor_;
}

const GroupInfo& GroupInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cluster_5fconfig_2eproto();  return *default_instance_;
}

GroupInfo* GroupInfo::default_instance_ = NULL;

GroupInfo* GroupInfo::New() const {
  return new GroupInfo;
}

void GroupInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::kEmptyString) {
        group_name_->clear();
      }
    }
  }
  pn_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string group_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->group_name().data(), this->group_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pn_list;
        break;
      }
      
      // repeated string pn_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pn_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_pn_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pn_list(0).data(), this->pn_list(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pn_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string group_name = 1;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->group_name(), output);
  }
  
  // repeated string pn_list = 2;
  for (int i = 0; i < this->pn_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->pn_list(i).data(), this->pn_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pn_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string group_name = 1;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_name(), target);
  }
  
  // repeated string pn_list = 2;
  for (int i = 0; i < this->pn_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pn_list(i).data(), this->pn_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->pn_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string group_name = 1;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }
    
  }
  // repeated string pn_list = 2;
  total_size += 1 * this->pn_list_size();
  for (int i = 0; i < this->pn_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->pn_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupInfo::MergeFrom(const GroupInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  pn_list_.MergeFrom(from.pn_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupInfo::CopyFrom(const GroupInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupInfo::IsInitialized() const {
  
  return true;
}

void GroupInfo::Swap(GroupInfo* other) {
  if (other != this) {
    std::swap(group_name_, other->group_name_);
    pn_list_.Swap(&other->pn_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupInfo_descriptor_;
  metadata.reflection = GroupInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PNGroups::kGroupListFieldNumber;
#endif  // !_MSC_VER

PNGroups::PNGroups()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PNGroups::InitAsDefaultInstance() {
}

PNGroups::PNGroups(const PNGroups& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PNGroups::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PNGroups::~PNGroups() {
  SharedDtor();
}

void PNGroups::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PNGroups::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PNGroups::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PNGroups_descriptor_;
}

const PNGroups& PNGroups::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cluster_5fconfig_2eproto();  return *default_instance_;
}

PNGroups* PNGroups::default_instance_ = NULL;

PNGroups* PNGroups::New() const {
  return new PNGroups;
}

void PNGroups::Clear() {
  group_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PNGroups::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dstream.GroupInfo group_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_group_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PNGroups::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .dstream.GroupInfo group_list = 1;
  for (int i = 0; i < this->group_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->group_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PNGroups::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .dstream.GroupInfo group_list = 1;
  for (int i = 0; i < this->group_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->group_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PNGroups::ByteSize() const {
  int total_size = 0;
  
  // repeated .dstream.GroupInfo group_list = 1;
  total_size += 1 * this->group_list_size();
  for (int i = 0; i < this->group_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PNGroups::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PNGroups* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PNGroups*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PNGroups::MergeFrom(const PNGroups& from) {
  GOOGLE_CHECK_NE(&from, this);
  group_list_.MergeFrom(from.group_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PNGroups::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PNGroups::CopyFrom(const PNGroups& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PNGroups::IsInitialized() const {
  
  return true;
}

void PNGroups::Swap(PNGroups* other) {
  if (other != this) {
    group_list_.Swap(&other->group_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PNGroups::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PNGroups_descriptor_;
  metadata.reflection = PNGroups_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dstream

// @@protoc_insertion_point(global_scope)
