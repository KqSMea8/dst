// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pm.proto

#ifndef PROTOBUF_pm_2eproto__INCLUDED
#define PROTOBUF_pm_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "dstream_proto_common.pb.h"
#include "pm_pn_rpc.pb.h"
// @@protoc_insertion_point(includes)

namespace dstream {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_pm_2eproto();
void protobuf_AssignDesc_pm_2eproto();
void protobuf_ShutdownFile_pm_2eproto();

class PM;
class EventSetValue;
class EventKV;
class EventMapPB;
class DelayEventKV;
class DelayEventPB;
class PNResStaticsPB;
class PnidStaticsKV;
class PnidStaticsPB;
class PnidReportKV;
class PnidReportMapPB;

// ===================================================================

class PM : public ::google::protobuf::Message {
 public:
  PM();
  virtual ~PM();
  
  PM(const PM& from);
  
  inline PM& operator=(const PM& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PM& default_instance();
  
  void Swap(PM* other);
  
  // implements Message ----------------------------------------------
  
  PM* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PM& from);
  void MergeFrom(const PM& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string host = 1;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 1;
  inline const ::std::string& host() const;
  inline void set_host(const ::std::string& value);
  inline void set_host(const char* value);
  inline void set_host(const char* value, size_t size);
  inline ::std::string* mutable_host();
  inline ::std::string* release_host();
  
  // optional fixed32 submit_port = 2;
  inline bool has_submit_port() const;
  inline void clear_submit_port();
  static const int kSubmitPortFieldNumber = 2;
  inline ::google::protobuf::uint32 submit_port() const;
  inline void set_submit_port(::google::protobuf::uint32 value);
  
  // optional fixed32 report_port = 3;
  inline bool has_report_port() const;
  inline void clear_report_port();
  static const int kReportPortFieldNumber = 3;
  inline ::google::protobuf::uint32 report_port() const;
  inline void set_report_port(::google::protobuf::uint32 value);
  
  // optional string id = 4;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 4;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  // optional string bk_host = 5;
  inline bool has_bk_host() const;
  inline void clear_bk_host();
  static const int kBkHostFieldNumber = 5;
  inline const ::std::string& bk_host() const;
  inline void set_bk_host(const ::std::string& value);
  inline void set_bk_host(const char* value);
  inline void set_bk_host(const char* value, size_t size);
  inline ::std::string* mutable_bk_host();
  inline ::std::string* release_bk_host();
  
  // optional string version = 6;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 6;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  
  // optional fixed32 httpd_port = 7;
  inline bool has_httpd_port() const;
  inline void clear_httpd_port();
  static const int kHttpdPortFieldNumber = 7;
  inline ::google::protobuf::uint32 httpd_port() const;
  inline void set_httpd_port(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:dstream.PM)
 private:
  inline void set_has_host();
  inline void clear_has_host();
  inline void set_has_submit_port();
  inline void clear_has_submit_port();
  inline void set_has_report_port();
  inline void clear_has_report_port();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_bk_host();
  inline void clear_has_bk_host();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_httpd_port();
  inline void clear_has_httpd_port();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* host_;
  ::google::protobuf::uint32 submit_port_;
  ::google::protobuf::uint32 report_port_;
  ::std::string* id_;
  ::std::string* bk_host_;
  ::std::string* version_;
  ::google::protobuf::uint32 httpd_port_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_pm_2eproto();
  friend void protobuf_AssignDesc_pm_2eproto();
  friend void protobuf_ShutdownFile_pm_2eproto();
  
  void InitAsDefaultInstance();
  static PM* default_instance_;
};
// -------------------------------------------------------------------

class EventSetValue : public ::google::protobuf::Message {
 public:
  EventSetValue();
  virtual ~EventSetValue();
  
  EventSetValue(const EventSetValue& from);
  
  inline EventSetValue& operator=(const EventSetValue& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventSetValue& default_instance();
  
  void Swap(EventSetValue* other);
  
  // implements Message ----------------------------------------------
  
  EventSetValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventSetValue& from);
  void MergeFrom(const EventSetValue& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string event_description = 1;
  inline int event_description_size() const;
  inline void clear_event_description();
  static const int kEventDescriptionFieldNumber = 1;
  inline const ::std::string& event_description(int index) const;
  inline ::std::string* mutable_event_description(int index);
  inline void set_event_description(int index, const ::std::string& value);
  inline void set_event_description(int index, const char* value);
  inline void set_event_description(int index, const char* value, size_t size);
  inline ::std::string* add_event_description();
  inline void add_event_description(const ::std::string& value);
  inline void add_event_description(const char* value);
  inline void add_event_description(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& event_description() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_event_description();
  
  // @@protoc_insertion_point(class_scope:dstream.EventSetValue)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> event_description_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_pm_2eproto();
  friend void protobuf_AssignDesc_pm_2eproto();
  friend void protobuf_ShutdownFile_pm_2eproto();
  
  void InitAsDefaultInstance();
  static EventSetValue* default_instance_;
};
// -------------------------------------------------------------------

class EventKV : public ::google::protobuf::Message {
 public:
  EventKV();
  virtual ~EventKV();
  
  EventKV(const EventKV& from);
  
  inline EventKV& operator=(const EventKV& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventKV& default_instance();
  
  void Swap(EventKV* other);
  
  // implements Message ----------------------------------------------
  
  EventKV* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventKV& from);
  void MergeFrom(const EventKV& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string event_type = 1;
  inline bool has_event_type() const;
  inline void clear_event_type();
  static const int kEventTypeFieldNumber = 1;
  inline const ::std::string& event_type() const;
  inline void set_event_type(const ::std::string& value);
  inline void set_event_type(const char* value);
  inline void set_event_type(const char* value, size_t size);
  inline ::std::string* mutable_event_type();
  inline ::std::string* release_event_type();
  
  // optional .dstream.EventSetValue event_set = 2;
  inline bool has_event_set() const;
  inline void clear_event_set();
  static const int kEventSetFieldNumber = 2;
  inline const ::dstream::EventSetValue& event_set() const;
  inline ::dstream::EventSetValue* mutable_event_set();
  inline ::dstream::EventSetValue* release_event_set();
  
  // @@protoc_insertion_point(class_scope:dstream.EventKV)
 private:
  inline void set_has_event_type();
  inline void clear_has_event_type();
  inline void set_has_event_set();
  inline void clear_has_event_set();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* event_type_;
  ::dstream::EventSetValue* event_set_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_pm_2eproto();
  friend void protobuf_AssignDesc_pm_2eproto();
  friend void protobuf_ShutdownFile_pm_2eproto();
  
  void InitAsDefaultInstance();
  static EventKV* default_instance_;
};
// -------------------------------------------------------------------

class EventMapPB : public ::google::protobuf::Message {
 public:
  EventMapPB();
  virtual ~EventMapPB();
  
  EventMapPB(const EventMapPB& from);
  
  inline EventMapPB& operator=(const EventMapPB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventMapPB& default_instance();
  
  void Swap(EventMapPB* other);
  
  // implements Message ----------------------------------------------
  
  EventMapPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventMapPB& from);
  void MergeFrom(const EventMapPB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .dstream.EventKV event_kv = 1;
  inline int event_kv_size() const;
  inline void clear_event_kv();
  static const int kEventKvFieldNumber = 1;
  inline const ::dstream::EventKV& event_kv(int index) const;
  inline ::dstream::EventKV* mutable_event_kv(int index);
  inline ::dstream::EventKV* add_event_kv();
  inline const ::google::protobuf::RepeatedPtrField< ::dstream::EventKV >&
      event_kv() const;
  inline ::google::protobuf::RepeatedPtrField< ::dstream::EventKV >*
      mutable_event_kv();
  
  // @@protoc_insertion_point(class_scope:dstream.EventMapPB)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::dstream::EventKV > event_kv_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_pm_2eproto();
  friend void protobuf_AssignDesc_pm_2eproto();
  friend void protobuf_ShutdownFile_pm_2eproto();
  
  void InitAsDefaultInstance();
  static EventMapPB* default_instance_;
};
// -------------------------------------------------------------------

class DelayEventKV : public ::google::protobuf::Message {
 public:
  DelayEventKV();
  virtual ~DelayEventKV();
  
  DelayEventKV(const DelayEventKV& from);
  
  inline DelayEventKV& operator=(const DelayEventKV& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DelayEventKV& default_instance();
  
  void Swap(DelayEventKV* other);
  
  // implements Message ----------------------------------------------
  
  DelayEventKV* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DelayEventKV& from);
  void MergeFrom(const DelayEventKV& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional fixed64 timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);
  
  // optional .dstream.EventMapPB event_map = 2;
  inline bool has_event_map() const;
  inline void clear_event_map();
  static const int kEventMapFieldNumber = 2;
  inline const ::dstream::EventMapPB& event_map() const;
  inline ::dstream::EventMapPB* mutable_event_map();
  inline ::dstream::EventMapPB* release_event_map();
  
  // @@protoc_insertion_point(class_scope:dstream.DelayEventKV)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_event_map();
  inline void clear_has_event_map();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 timestamp_;
  ::dstream::EventMapPB* event_map_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_pm_2eproto();
  friend void protobuf_AssignDesc_pm_2eproto();
  friend void protobuf_ShutdownFile_pm_2eproto();
  
  void InitAsDefaultInstance();
  static DelayEventKV* default_instance_;
};
// -------------------------------------------------------------------

class DelayEventPB : public ::google::protobuf::Message {
 public:
  DelayEventPB();
  virtual ~DelayEventPB();
  
  DelayEventPB(const DelayEventPB& from);
  
  inline DelayEventPB& operator=(const DelayEventPB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DelayEventPB& default_instance();
  
  void Swap(DelayEventPB* other);
  
  // implements Message ----------------------------------------------
  
  DelayEventPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DelayEventPB& from);
  void MergeFrom(const DelayEventPB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .dstream.DelayEventKV delay_event_kv = 1;
  inline int delay_event_kv_size() const;
  inline void clear_delay_event_kv();
  static const int kDelayEventKvFieldNumber = 1;
  inline const ::dstream::DelayEventKV& delay_event_kv(int index) const;
  inline ::dstream::DelayEventKV* mutable_delay_event_kv(int index);
  inline ::dstream::DelayEventKV* add_delay_event_kv();
  inline const ::google::protobuf::RepeatedPtrField< ::dstream::DelayEventKV >&
      delay_event_kv() const;
  inline ::google::protobuf::RepeatedPtrField< ::dstream::DelayEventKV >*
      mutable_delay_event_kv();
  
  // @@protoc_insertion_point(class_scope:dstream.DelayEventPB)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::dstream::DelayEventKV > delay_event_kv_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_pm_2eproto();
  friend void protobuf_AssignDesc_pm_2eproto();
  friend void protobuf_ShutdownFile_pm_2eproto();
  
  void InitAsDefaultInstance();
  static DelayEventPB* default_instance_;
};
// -------------------------------------------------------------------

class PNResStaticsPB : public ::google::protobuf::Message {
 public:
  PNResStaticsPB();
  virtual ~PNResStaticsPB();
  
  PNResStaticsPB(const PNResStaticsPB& from);
  
  inline PNResStaticsPB& operator=(const PNResStaticsPB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PNResStaticsPB& default_instance();
  
  void Swap(PNResStaticsPB* other);
  
  // implements Message ----------------------------------------------
  
  PNResStaticsPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PNResStaticsPB& from);
  void MergeFrom(const PNResStaticsPB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .dstream.Resource total = 1;
  inline bool has_total() const;
  inline void clear_total();
  static const int kTotalFieldNumber = 1;
  inline const ::dstream::Resource& total() const;
  inline ::dstream::Resource* mutable_total();
  inline ::dstream::Resource* release_total();
  
  // optional .dstream.Resource used = 2;
  inline bool has_used() const;
  inline void clear_used();
  static const int kUsedFieldNumber = 2;
  inline const ::dstream::Resource& used() const;
  inline ::dstream::Resource* mutable_used();
  inline ::dstream::Resource* release_used();
  
  // optional .dstream.Resource reserved = 3;
  inline bool has_reserved() const;
  inline void clear_reserved();
  static const int kReservedFieldNumber = 3;
  inline const ::dstream::Resource& reserved() const;
  inline ::dstream::Resource* mutable_reserved();
  inline ::dstream::Resource* release_reserved();
  
  // optional fixed32 pe_num = 4;
  inline bool has_pe_num() const;
  inline void clear_pe_num();
  static const int kPeNumFieldNumber = 4;
  inline ::google::protobuf::uint32 pe_num() const;
  inline void set_pe_num(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:dstream.PNResStaticsPB)
 private:
  inline void set_has_total();
  inline void clear_has_total();
  inline void set_has_used();
  inline void clear_has_used();
  inline void set_has_reserved();
  inline void clear_has_reserved();
  inline void set_has_pe_num();
  inline void clear_has_pe_num();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::dstream::Resource* total_;
  ::dstream::Resource* used_;
  ::dstream::Resource* reserved_;
  ::google::protobuf::uint32 pe_num_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_pm_2eproto();
  friend void protobuf_AssignDesc_pm_2eproto();
  friend void protobuf_ShutdownFile_pm_2eproto();
  
  void InitAsDefaultInstance();
  static PNResStaticsPB* default_instance_;
};
// -------------------------------------------------------------------

class PnidStaticsKV : public ::google::protobuf::Message {
 public:
  PnidStaticsKV();
  virtual ~PnidStaticsKV();
  
  PnidStaticsKV(const PnidStaticsKV& from);
  
  inline PnidStaticsKV& operator=(const PnidStaticsKV& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PnidStaticsKV& default_instance();
  
  void Swap(PnidStaticsKV* other);
  
  // implements Message ----------------------------------------------
  
  PnidStaticsKV* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PnidStaticsKV& from);
  void MergeFrom(const PnidStaticsKV& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .dstream.PNID pn_id = 1;
  inline bool has_pn_id() const;
  inline void clear_pn_id();
  static const int kPnIdFieldNumber = 1;
  inline const ::dstream::PNID& pn_id() const;
  inline ::dstream::PNID* mutable_pn_id();
  inline ::dstream::PNID* release_pn_id();
  
  // optional .dstream.PNResStaticsPB pn_res_statics = 2;
  inline bool has_pn_res_statics() const;
  inline void clear_pn_res_statics();
  static const int kPnResStaticsFieldNumber = 2;
  inline const ::dstream::PNResStaticsPB& pn_res_statics() const;
  inline ::dstream::PNResStaticsPB* mutable_pn_res_statics();
  inline ::dstream::PNResStaticsPB* release_pn_res_statics();
  
  // @@protoc_insertion_point(class_scope:dstream.PnidStaticsKV)
 private:
  inline void set_has_pn_id();
  inline void clear_has_pn_id();
  inline void set_has_pn_res_statics();
  inline void clear_has_pn_res_statics();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::dstream::PNID* pn_id_;
  ::dstream::PNResStaticsPB* pn_res_statics_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_pm_2eproto();
  friend void protobuf_AssignDesc_pm_2eproto();
  friend void protobuf_ShutdownFile_pm_2eproto();
  
  void InitAsDefaultInstance();
  static PnidStaticsKV* default_instance_;
};
// -------------------------------------------------------------------

class PnidStaticsPB : public ::google::protobuf::Message {
 public:
  PnidStaticsPB();
  virtual ~PnidStaticsPB();
  
  PnidStaticsPB(const PnidStaticsPB& from);
  
  inline PnidStaticsPB& operator=(const PnidStaticsPB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PnidStaticsPB& default_instance();
  
  void Swap(PnidStaticsPB* other);
  
  // implements Message ----------------------------------------------
  
  PnidStaticsPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PnidStaticsPB& from);
  void MergeFrom(const PnidStaticsPB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .dstream.PnidStaticsKV pn_statics_kv = 1;
  inline int pn_statics_kv_size() const;
  inline void clear_pn_statics_kv();
  static const int kPnStaticsKvFieldNumber = 1;
  inline const ::dstream::PnidStaticsKV& pn_statics_kv(int index) const;
  inline ::dstream::PnidStaticsKV* mutable_pn_statics_kv(int index);
  inline ::dstream::PnidStaticsKV* add_pn_statics_kv();
  inline const ::google::protobuf::RepeatedPtrField< ::dstream::PnidStaticsKV >&
      pn_statics_kv() const;
  inline ::google::protobuf::RepeatedPtrField< ::dstream::PnidStaticsKV >*
      mutable_pn_statics_kv();
  
  // @@protoc_insertion_point(class_scope:dstream.PnidStaticsPB)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::dstream::PnidStaticsKV > pn_statics_kv_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_pm_2eproto();
  friend void protobuf_AssignDesc_pm_2eproto();
  friend void protobuf_ShutdownFile_pm_2eproto();
  
  void InitAsDefaultInstance();
  static PnidStaticsPB* default_instance_;
};
// -------------------------------------------------------------------

class PnidReportKV : public ::google::protobuf::Message {
 public:
  PnidReportKV();
  virtual ~PnidReportKV();
  
  PnidReportKV(const PnidReportKV& from);
  
  inline PnidReportKV& operator=(const PnidReportKV& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PnidReportKV& default_instance();
  
  void Swap(PnidReportKV* other);
  
  // implements Message ----------------------------------------------
  
  PnidReportKV* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PnidReportKV& from);
  void MergeFrom(const PnidReportKV& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .dstream.PNID pn_id = 1;
  inline bool has_pn_id() const;
  inline void clear_pn_id();
  static const int kPnIdFieldNumber = 1;
  inline const ::dstream::PNID& pn_id() const;
  inline ::dstream::PNID* mutable_pn_id();
  inline ::dstream::PNID* release_pn_id();
  
  // optional .dstream.PNReport pn_report = 2;
  inline bool has_pn_report() const;
  inline void clear_pn_report();
  static const int kPnReportFieldNumber = 2;
  inline const ::dstream::PNReport& pn_report() const;
  inline ::dstream::PNReport* mutable_pn_report();
  inline ::dstream::PNReport* release_pn_report();
  
  // @@protoc_insertion_point(class_scope:dstream.PnidReportKV)
 private:
  inline void set_has_pn_id();
  inline void clear_has_pn_id();
  inline void set_has_pn_report();
  inline void clear_has_pn_report();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::dstream::PNID* pn_id_;
  ::dstream::PNReport* pn_report_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_pm_2eproto();
  friend void protobuf_AssignDesc_pm_2eproto();
  friend void protobuf_ShutdownFile_pm_2eproto();
  
  void InitAsDefaultInstance();
  static PnidReportKV* default_instance_;
};
// -------------------------------------------------------------------

class PnidReportMapPB : public ::google::protobuf::Message {
 public:
  PnidReportMapPB();
  virtual ~PnidReportMapPB();
  
  PnidReportMapPB(const PnidReportMapPB& from);
  
  inline PnidReportMapPB& operator=(const PnidReportMapPB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PnidReportMapPB& default_instance();
  
  void Swap(PnidReportMapPB* other);
  
  // implements Message ----------------------------------------------
  
  PnidReportMapPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PnidReportMapPB& from);
  void MergeFrom(const PnidReportMapPB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .dstream.PnidReportKV pnid_report_kv = 1;
  inline int pnid_report_kv_size() const;
  inline void clear_pnid_report_kv();
  static const int kPnidReportKvFieldNumber = 1;
  inline const ::dstream::PnidReportKV& pnid_report_kv(int index) const;
  inline ::dstream::PnidReportKV* mutable_pnid_report_kv(int index);
  inline ::dstream::PnidReportKV* add_pnid_report_kv();
  inline const ::google::protobuf::RepeatedPtrField< ::dstream::PnidReportKV >&
      pnid_report_kv() const;
  inline ::google::protobuf::RepeatedPtrField< ::dstream::PnidReportKV >*
      mutable_pnid_report_kv();
  
  // @@protoc_insertion_point(class_scope:dstream.PnidReportMapPB)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::dstream::PnidReportKV > pnid_report_kv_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_pm_2eproto();
  friend void protobuf_AssignDesc_pm_2eproto();
  friend void protobuf_ShutdownFile_pm_2eproto();
  
  void InitAsDefaultInstance();
  static PnidReportMapPB* default_instance_;
};
// ===================================================================


// ===================================================================

// PM

// optional string host = 1;
inline bool PM::has_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PM::set_has_host() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PM::clear_has_host() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PM::clear_host() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    host_->clear();
  }
  clear_has_host();
}
inline const ::std::string& PM::host() const {
  return *host_;
}
inline void PM::set_host(const ::std::string& value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void PM::set_host(const char* value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void PM::set_host(const char* value, size_t size) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PM::mutable_host() {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  return host_;
}
inline ::std::string* PM::release_host() {
  clear_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = host_;
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional fixed32 submit_port = 2;
inline bool PM::has_submit_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PM::set_has_submit_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PM::clear_has_submit_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PM::clear_submit_port() {
  submit_port_ = 0u;
  clear_has_submit_port();
}
inline ::google::protobuf::uint32 PM::submit_port() const {
  return submit_port_;
}
inline void PM::set_submit_port(::google::protobuf::uint32 value) {
  set_has_submit_port();
  submit_port_ = value;
}

// optional fixed32 report_port = 3;
inline bool PM::has_report_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PM::set_has_report_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PM::clear_has_report_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PM::clear_report_port() {
  report_port_ = 0u;
  clear_has_report_port();
}
inline ::google::protobuf::uint32 PM::report_port() const {
  return report_port_;
}
inline void PM::set_report_port(::google::protobuf::uint32 value) {
  set_has_report_port();
  report_port_ = value;
}

// optional string id = 4;
inline bool PM::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PM::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PM::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PM::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& PM::id() const {
  return *id_;
}
inline void PM::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void PM::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void PM::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PM::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* PM::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string bk_host = 5;
inline bool PM::has_bk_host() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PM::set_has_bk_host() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PM::clear_has_bk_host() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PM::clear_bk_host() {
  if (bk_host_ != &::google::protobuf::internal::kEmptyString) {
    bk_host_->clear();
  }
  clear_has_bk_host();
}
inline const ::std::string& PM::bk_host() const {
  return *bk_host_;
}
inline void PM::set_bk_host(const ::std::string& value) {
  set_has_bk_host();
  if (bk_host_ == &::google::protobuf::internal::kEmptyString) {
    bk_host_ = new ::std::string;
  }
  bk_host_->assign(value);
}
inline void PM::set_bk_host(const char* value) {
  set_has_bk_host();
  if (bk_host_ == &::google::protobuf::internal::kEmptyString) {
    bk_host_ = new ::std::string;
  }
  bk_host_->assign(value);
}
inline void PM::set_bk_host(const char* value, size_t size) {
  set_has_bk_host();
  if (bk_host_ == &::google::protobuf::internal::kEmptyString) {
    bk_host_ = new ::std::string;
  }
  bk_host_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PM::mutable_bk_host() {
  set_has_bk_host();
  if (bk_host_ == &::google::protobuf::internal::kEmptyString) {
    bk_host_ = new ::std::string;
  }
  return bk_host_;
}
inline ::std::string* PM::release_bk_host() {
  clear_has_bk_host();
  if (bk_host_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bk_host_;
    bk_host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string version = 6;
inline bool PM::has_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PM::set_has_version() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PM::clear_has_version() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PM::clear_version() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& PM::version() const {
  return *version_;
}
inline void PM::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void PM::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void PM::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PM::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  return version_;
}
inline ::std::string* PM::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional fixed32 httpd_port = 7;
inline bool PM::has_httpd_port() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PM::set_has_httpd_port() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PM::clear_has_httpd_port() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PM::clear_httpd_port() {
  httpd_port_ = 0u;
  clear_has_httpd_port();
}
inline ::google::protobuf::uint32 PM::httpd_port() const {
  return httpd_port_;
}
inline void PM::set_httpd_port(::google::protobuf::uint32 value) {
  set_has_httpd_port();
  httpd_port_ = value;
}

// -------------------------------------------------------------------

// EventSetValue

// repeated string event_description = 1;
inline int EventSetValue::event_description_size() const {
  return event_description_.size();
}
inline void EventSetValue::clear_event_description() {
  event_description_.Clear();
}
inline const ::std::string& EventSetValue::event_description(int index) const {
  return event_description_.Get(index);
}
inline ::std::string* EventSetValue::mutable_event_description(int index) {
  return event_description_.Mutable(index);
}
inline void EventSetValue::set_event_description(int index, const ::std::string& value) {
  event_description_.Mutable(index)->assign(value);
}
inline void EventSetValue::set_event_description(int index, const char* value) {
  event_description_.Mutable(index)->assign(value);
}
inline void EventSetValue::set_event_description(int index, const char* value, size_t size) {
  event_description_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EventSetValue::add_event_description() {
  return event_description_.Add();
}
inline void EventSetValue::add_event_description(const ::std::string& value) {
  event_description_.Add()->assign(value);
}
inline void EventSetValue::add_event_description(const char* value) {
  event_description_.Add()->assign(value);
}
inline void EventSetValue::add_event_description(const char* value, size_t size) {
  event_description_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
EventSetValue::event_description() const {
  return event_description_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
EventSetValue::mutable_event_description() {
  return &event_description_;
}

// -------------------------------------------------------------------

// EventKV

// optional string event_type = 1;
inline bool EventKV::has_event_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventKV::set_has_event_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EventKV::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EventKV::clear_event_type() {
  if (event_type_ != &::google::protobuf::internal::kEmptyString) {
    event_type_->clear();
  }
  clear_has_event_type();
}
inline const ::std::string& EventKV::event_type() const {
  return *event_type_;
}
inline void EventKV::set_event_type(const ::std::string& value) {
  set_has_event_type();
  if (event_type_ == &::google::protobuf::internal::kEmptyString) {
    event_type_ = new ::std::string;
  }
  event_type_->assign(value);
}
inline void EventKV::set_event_type(const char* value) {
  set_has_event_type();
  if (event_type_ == &::google::protobuf::internal::kEmptyString) {
    event_type_ = new ::std::string;
  }
  event_type_->assign(value);
}
inline void EventKV::set_event_type(const char* value, size_t size) {
  set_has_event_type();
  if (event_type_ == &::google::protobuf::internal::kEmptyString) {
    event_type_ = new ::std::string;
  }
  event_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EventKV::mutable_event_type() {
  set_has_event_type();
  if (event_type_ == &::google::protobuf::internal::kEmptyString) {
    event_type_ = new ::std::string;
  }
  return event_type_;
}
inline ::std::string* EventKV::release_event_type() {
  clear_has_event_type();
  if (event_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = event_type_;
    event_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .dstream.EventSetValue event_set = 2;
inline bool EventKV::has_event_set() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EventKV::set_has_event_set() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EventKV::clear_has_event_set() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EventKV::clear_event_set() {
  if (event_set_ != NULL) event_set_->::dstream::EventSetValue::Clear();
  clear_has_event_set();
}
inline const ::dstream::EventSetValue& EventKV::event_set() const {
  return event_set_ != NULL ? *event_set_ : *default_instance_->event_set_;
}
inline ::dstream::EventSetValue* EventKV::mutable_event_set() {
  set_has_event_set();
  if (event_set_ == NULL) event_set_ = new ::dstream::EventSetValue;
  return event_set_;
}
inline ::dstream::EventSetValue* EventKV::release_event_set() {
  clear_has_event_set();
  ::dstream::EventSetValue* temp = event_set_;
  event_set_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// EventMapPB

// repeated .dstream.EventKV event_kv = 1;
inline int EventMapPB::event_kv_size() const {
  return event_kv_.size();
}
inline void EventMapPB::clear_event_kv() {
  event_kv_.Clear();
}
inline const ::dstream::EventKV& EventMapPB::event_kv(int index) const {
  return event_kv_.Get(index);
}
inline ::dstream::EventKV* EventMapPB::mutable_event_kv(int index) {
  return event_kv_.Mutable(index);
}
inline ::dstream::EventKV* EventMapPB::add_event_kv() {
  return event_kv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dstream::EventKV >&
EventMapPB::event_kv() const {
  return event_kv_;
}
inline ::google::protobuf::RepeatedPtrField< ::dstream::EventKV >*
EventMapPB::mutable_event_kv() {
  return &event_kv_;
}

// -------------------------------------------------------------------

// DelayEventKV

// optional fixed64 timestamp = 1;
inline bool DelayEventKV::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DelayEventKV::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DelayEventKV::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DelayEventKV::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 DelayEventKV::timestamp() const {
  return timestamp_;
}
inline void DelayEventKV::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// optional .dstream.EventMapPB event_map = 2;
inline bool DelayEventKV::has_event_map() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DelayEventKV::set_has_event_map() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DelayEventKV::clear_has_event_map() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DelayEventKV::clear_event_map() {
  if (event_map_ != NULL) event_map_->::dstream::EventMapPB::Clear();
  clear_has_event_map();
}
inline const ::dstream::EventMapPB& DelayEventKV::event_map() const {
  return event_map_ != NULL ? *event_map_ : *default_instance_->event_map_;
}
inline ::dstream::EventMapPB* DelayEventKV::mutable_event_map() {
  set_has_event_map();
  if (event_map_ == NULL) event_map_ = new ::dstream::EventMapPB;
  return event_map_;
}
inline ::dstream::EventMapPB* DelayEventKV::release_event_map() {
  clear_has_event_map();
  ::dstream::EventMapPB* temp = event_map_;
  event_map_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// DelayEventPB

// repeated .dstream.DelayEventKV delay_event_kv = 1;
inline int DelayEventPB::delay_event_kv_size() const {
  return delay_event_kv_.size();
}
inline void DelayEventPB::clear_delay_event_kv() {
  delay_event_kv_.Clear();
}
inline const ::dstream::DelayEventKV& DelayEventPB::delay_event_kv(int index) const {
  return delay_event_kv_.Get(index);
}
inline ::dstream::DelayEventKV* DelayEventPB::mutable_delay_event_kv(int index) {
  return delay_event_kv_.Mutable(index);
}
inline ::dstream::DelayEventKV* DelayEventPB::add_delay_event_kv() {
  return delay_event_kv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dstream::DelayEventKV >&
DelayEventPB::delay_event_kv() const {
  return delay_event_kv_;
}
inline ::google::protobuf::RepeatedPtrField< ::dstream::DelayEventKV >*
DelayEventPB::mutable_delay_event_kv() {
  return &delay_event_kv_;
}

// -------------------------------------------------------------------

// PNResStaticsPB

// optional .dstream.Resource total = 1;
inline bool PNResStaticsPB::has_total() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PNResStaticsPB::set_has_total() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PNResStaticsPB::clear_has_total() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PNResStaticsPB::clear_total() {
  if (total_ != NULL) total_->::dstream::Resource::Clear();
  clear_has_total();
}
inline const ::dstream::Resource& PNResStaticsPB::total() const {
  return total_ != NULL ? *total_ : *default_instance_->total_;
}
inline ::dstream::Resource* PNResStaticsPB::mutable_total() {
  set_has_total();
  if (total_ == NULL) total_ = new ::dstream::Resource;
  return total_;
}
inline ::dstream::Resource* PNResStaticsPB::release_total() {
  clear_has_total();
  ::dstream::Resource* temp = total_;
  total_ = NULL;
  return temp;
}

// optional .dstream.Resource used = 2;
inline bool PNResStaticsPB::has_used() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PNResStaticsPB::set_has_used() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PNResStaticsPB::clear_has_used() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PNResStaticsPB::clear_used() {
  if (used_ != NULL) used_->::dstream::Resource::Clear();
  clear_has_used();
}
inline const ::dstream::Resource& PNResStaticsPB::used() const {
  return used_ != NULL ? *used_ : *default_instance_->used_;
}
inline ::dstream::Resource* PNResStaticsPB::mutable_used() {
  set_has_used();
  if (used_ == NULL) used_ = new ::dstream::Resource;
  return used_;
}
inline ::dstream::Resource* PNResStaticsPB::release_used() {
  clear_has_used();
  ::dstream::Resource* temp = used_;
  used_ = NULL;
  return temp;
}

// optional .dstream.Resource reserved = 3;
inline bool PNResStaticsPB::has_reserved() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PNResStaticsPB::set_has_reserved() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PNResStaticsPB::clear_has_reserved() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PNResStaticsPB::clear_reserved() {
  if (reserved_ != NULL) reserved_->::dstream::Resource::Clear();
  clear_has_reserved();
}
inline const ::dstream::Resource& PNResStaticsPB::reserved() const {
  return reserved_ != NULL ? *reserved_ : *default_instance_->reserved_;
}
inline ::dstream::Resource* PNResStaticsPB::mutable_reserved() {
  set_has_reserved();
  if (reserved_ == NULL) reserved_ = new ::dstream::Resource;
  return reserved_;
}
inline ::dstream::Resource* PNResStaticsPB::release_reserved() {
  clear_has_reserved();
  ::dstream::Resource* temp = reserved_;
  reserved_ = NULL;
  return temp;
}

// optional fixed32 pe_num = 4;
inline bool PNResStaticsPB::has_pe_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PNResStaticsPB::set_has_pe_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PNResStaticsPB::clear_has_pe_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PNResStaticsPB::clear_pe_num() {
  pe_num_ = 0u;
  clear_has_pe_num();
}
inline ::google::protobuf::uint32 PNResStaticsPB::pe_num() const {
  return pe_num_;
}
inline void PNResStaticsPB::set_pe_num(::google::protobuf::uint32 value) {
  set_has_pe_num();
  pe_num_ = value;
}

// -------------------------------------------------------------------

// PnidStaticsKV

// optional .dstream.PNID pn_id = 1;
inline bool PnidStaticsKV::has_pn_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PnidStaticsKV::set_has_pn_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PnidStaticsKV::clear_has_pn_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PnidStaticsKV::clear_pn_id() {
  if (pn_id_ != NULL) pn_id_->::dstream::PNID::Clear();
  clear_has_pn_id();
}
inline const ::dstream::PNID& PnidStaticsKV::pn_id() const {
  return pn_id_ != NULL ? *pn_id_ : *default_instance_->pn_id_;
}
inline ::dstream::PNID* PnidStaticsKV::mutable_pn_id() {
  set_has_pn_id();
  if (pn_id_ == NULL) pn_id_ = new ::dstream::PNID;
  return pn_id_;
}
inline ::dstream::PNID* PnidStaticsKV::release_pn_id() {
  clear_has_pn_id();
  ::dstream::PNID* temp = pn_id_;
  pn_id_ = NULL;
  return temp;
}

// optional .dstream.PNResStaticsPB pn_res_statics = 2;
inline bool PnidStaticsKV::has_pn_res_statics() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PnidStaticsKV::set_has_pn_res_statics() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PnidStaticsKV::clear_has_pn_res_statics() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PnidStaticsKV::clear_pn_res_statics() {
  if (pn_res_statics_ != NULL) pn_res_statics_->::dstream::PNResStaticsPB::Clear();
  clear_has_pn_res_statics();
}
inline const ::dstream::PNResStaticsPB& PnidStaticsKV::pn_res_statics() const {
  return pn_res_statics_ != NULL ? *pn_res_statics_ : *default_instance_->pn_res_statics_;
}
inline ::dstream::PNResStaticsPB* PnidStaticsKV::mutable_pn_res_statics() {
  set_has_pn_res_statics();
  if (pn_res_statics_ == NULL) pn_res_statics_ = new ::dstream::PNResStaticsPB;
  return pn_res_statics_;
}
inline ::dstream::PNResStaticsPB* PnidStaticsKV::release_pn_res_statics() {
  clear_has_pn_res_statics();
  ::dstream::PNResStaticsPB* temp = pn_res_statics_;
  pn_res_statics_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PnidStaticsPB

// repeated .dstream.PnidStaticsKV pn_statics_kv = 1;
inline int PnidStaticsPB::pn_statics_kv_size() const {
  return pn_statics_kv_.size();
}
inline void PnidStaticsPB::clear_pn_statics_kv() {
  pn_statics_kv_.Clear();
}
inline const ::dstream::PnidStaticsKV& PnidStaticsPB::pn_statics_kv(int index) const {
  return pn_statics_kv_.Get(index);
}
inline ::dstream::PnidStaticsKV* PnidStaticsPB::mutable_pn_statics_kv(int index) {
  return pn_statics_kv_.Mutable(index);
}
inline ::dstream::PnidStaticsKV* PnidStaticsPB::add_pn_statics_kv() {
  return pn_statics_kv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dstream::PnidStaticsKV >&
PnidStaticsPB::pn_statics_kv() const {
  return pn_statics_kv_;
}
inline ::google::protobuf::RepeatedPtrField< ::dstream::PnidStaticsKV >*
PnidStaticsPB::mutable_pn_statics_kv() {
  return &pn_statics_kv_;
}

// -------------------------------------------------------------------

// PnidReportKV

// optional .dstream.PNID pn_id = 1;
inline bool PnidReportKV::has_pn_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PnidReportKV::set_has_pn_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PnidReportKV::clear_has_pn_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PnidReportKV::clear_pn_id() {
  if (pn_id_ != NULL) pn_id_->::dstream::PNID::Clear();
  clear_has_pn_id();
}
inline const ::dstream::PNID& PnidReportKV::pn_id() const {
  return pn_id_ != NULL ? *pn_id_ : *default_instance_->pn_id_;
}
inline ::dstream::PNID* PnidReportKV::mutable_pn_id() {
  set_has_pn_id();
  if (pn_id_ == NULL) pn_id_ = new ::dstream::PNID;
  return pn_id_;
}
inline ::dstream::PNID* PnidReportKV::release_pn_id() {
  clear_has_pn_id();
  ::dstream::PNID* temp = pn_id_;
  pn_id_ = NULL;
  return temp;
}

// optional .dstream.PNReport pn_report = 2;
inline bool PnidReportKV::has_pn_report() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PnidReportKV::set_has_pn_report() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PnidReportKV::clear_has_pn_report() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PnidReportKV::clear_pn_report() {
  if (pn_report_ != NULL) pn_report_->::dstream::PNReport::Clear();
  clear_has_pn_report();
}
inline const ::dstream::PNReport& PnidReportKV::pn_report() const {
  return pn_report_ != NULL ? *pn_report_ : *default_instance_->pn_report_;
}
inline ::dstream::PNReport* PnidReportKV::mutable_pn_report() {
  set_has_pn_report();
  if (pn_report_ == NULL) pn_report_ = new ::dstream::PNReport;
  return pn_report_;
}
inline ::dstream::PNReport* PnidReportKV::release_pn_report() {
  clear_has_pn_report();
  ::dstream::PNReport* temp = pn_report_;
  pn_report_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PnidReportMapPB

// repeated .dstream.PnidReportKV pnid_report_kv = 1;
inline int PnidReportMapPB::pnid_report_kv_size() const {
  return pnid_report_kv_.size();
}
inline void PnidReportMapPB::clear_pnid_report_kv() {
  pnid_report_kv_.Clear();
}
inline const ::dstream::PnidReportKV& PnidReportMapPB::pnid_report_kv(int index) const {
  return pnid_report_kv_.Get(index);
}
inline ::dstream::PnidReportKV* PnidReportMapPB::mutable_pnid_report_kv(int index) {
  return pnid_report_kv_.Mutable(index);
}
inline ::dstream::PnidReportKV* PnidReportMapPB::add_pnid_report_kv() {
  return pnid_report_kv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dstream::PnidReportKV >&
PnidReportMapPB::pnid_report_kv() const {
  return pnid_report_kv_;
}
inline ::google::protobuf::RepeatedPtrField< ::dstream::PnidReportKV >*
PnidReportMapPB::mutable_pnid_report_kv() {
  return &pnid_report_kv_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dstream

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pm_2eproto__INCLUDED
