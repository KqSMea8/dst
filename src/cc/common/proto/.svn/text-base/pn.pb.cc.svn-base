// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pn.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dstream {

namespace {

const ::google::protobuf::Descriptor* PN_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PN_reflection_ = NULL;
const ::google::protobuf::Descriptor* PEWrapperKV_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PEWrapperKV_reflection_ = NULL;
const ::google::protobuf::Descriptor* PEWrapperMapPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PEWrapperMapPB_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PNStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_pn_2eproto() {
  protobuf_AddDesc_pn_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pn.proto");
  GOOGLE_CHECK(file != NULL);
  PN_descriptor_ = file->message_type(0);
  static const int PN_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PN, pn_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PN, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PN, rpc_server_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PN, pub_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PN, sub_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PN, importer_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PN, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PN, debug_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PN, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PN, httpd_port_),
  };
  PN_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PN_descriptor_,
      PN::default_instance_,
      PN_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PN, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PN, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PN));
  PEWrapperKV_descriptor_ = file->message_type(1);
  static const int PEWrapperKV_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEWrapperKV, pe_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEWrapperKV, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEWrapperKV, assign_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEWrapperKV, app_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEWrapperKV, revision_),
  };
  PEWrapperKV_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PEWrapperKV_descriptor_,
      PEWrapperKV::default_instance_,
      PEWrapperKV_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEWrapperKV, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEWrapperKV, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PEWrapperKV));
  PEWrapperMapPB_descriptor_ = file->message_type(2);
  static const int PEWrapperMapPB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEWrapperMapPB, normal_pe_kv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEWrapperMapPB, fail_pe_kv_),
  };
  PEWrapperMapPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PEWrapperMapPB_descriptor_,
      PEWrapperMapPB::default_instance_,
      PEWrapperMapPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEWrapperMapPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEWrapperMapPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PEWrapperMapPB));
  PNStatus_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pn_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PN_descriptor_, &PN::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PEWrapperKV_descriptor_, &PEWrapperKV::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PEWrapperMapPB_descriptor_, &PEWrapperMapPB::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pn_2eproto() {
  delete PN::default_instance_;
  delete PN_reflection_;
  delete PEWrapperKV::default_instance_;
  delete PEWrapperKV_reflection_;
  delete PEWrapperMapPB::default_instance_;
  delete PEWrapperMapPB_reflection_;
}

void protobuf_AddDesc_pn_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::dstream::protobuf_AddDesc_dstream_5fproto_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010pn.proto\022\007dstream\032\032dstream_proto_commo"
    "n.proto\"\340\001\n\002PN\022\034\n\005pn_id\030\001 \001(\0132\r.dstream."
    "PNID\022\014\n\004host\030\002 \001(\t\022\027\n\017rpc_server_port\030\003 "
    "\001(\007\022\020\n\010pub_port\030\004 \001(\007\022\020\n\010sub_port\030\005 \001(\007\022"
    "\025\n\rimporter_port\030\006 \001(\007\022!\n\006status\030\007 \001(\0162\021"
    ".dstream.PNStatus\022\022\n\ndebug_port\030\010 \001(\007\022\017\n"
    "\007version\030\t \001(\t\022\022\n\nhttpd_port\030\n \001(\007\"c\n\013PE"
    "WrapperKV\022\r\n\005pe_id\030\001 \001(\006\022\014\n\004type\030\002 \001(\007\022\023"
    "\n\013assign_time\030\003 \001(\004\022\020\n\010app_name\030\004 \001(\t\022\020\n"
    "\010revision\030\005 \001(\007\"f\n\016PEWrapperMapPB\022*\n\014nor"
    "mal_pe_kv\030\001 \003(\0132\024.dstream.PEWrapperKV\022(\n"
    "\nfail_pe_kv\030\002 \003(\0132\024.dstream.PEWrapperKV*"
    "\'\n\010PNStatus\022\n\n\006NORMAL\020\000\022\017\n\013DECOSSIMION\020\002", 520);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pn.proto", &protobuf_RegisterTypes);
  PN::default_instance_ = new PN();
  PEWrapperKV::default_instance_ = new PEWrapperKV();
  PEWrapperMapPB::default_instance_ = new PEWrapperMapPB();
  PN::default_instance_->InitAsDefaultInstance();
  PEWrapperKV::default_instance_->InitAsDefaultInstance();
  PEWrapperMapPB::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pn_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pn_2eproto {
  StaticDescriptorInitializer_pn_2eproto() {
    protobuf_AddDesc_pn_2eproto();
  }
} static_descriptor_initializer_pn_2eproto_;

const ::google::protobuf::EnumDescriptor* PNStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PNStatus_descriptor_;
}
bool PNStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PN::kPnIdFieldNumber;
const int PN::kHostFieldNumber;
const int PN::kRpcServerPortFieldNumber;
const int PN::kPubPortFieldNumber;
const int PN::kSubPortFieldNumber;
const int PN::kImporterPortFieldNumber;
const int PN::kStatusFieldNumber;
const int PN::kDebugPortFieldNumber;
const int PN::kVersionFieldNumber;
const int PN::kHttpdPortFieldNumber;
#endif  // !_MSC_VER

PN::PN()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PN::InitAsDefaultInstance() {
  pn_id_ = const_cast< ::dstream::PNID*>(&::dstream::PNID::default_instance());
}

PN::PN(const PN& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PN::SharedCtor() {
  _cached_size_ = 0;
  pn_id_ = NULL;
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rpc_server_port_ = 0u;
  pub_port_ = 0u;
  sub_port_ = 0u;
  importer_port_ = 0u;
  status_ = 0;
  debug_port_ = 0u;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  httpd_port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PN::~PN() {
  SharedDtor();
}

void PN::SharedDtor() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete pn_id_;
  }
}

void PN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PN::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PN_descriptor_;
}

const PN& PN::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pn_2eproto();  return *default_instance_;
}

PN* PN::default_instance_ = NULL;

PN* PN::New() const {
  return new PN;
}

void PN::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pn_id()) {
      if (pn_id_ != NULL) pn_id_->::dstream::PNID::Clear();
    }
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::kEmptyString) {
        host_->clear();
      }
    }
    rpc_server_port_ = 0u;
    pub_port_ = 0u;
    sub_port_ = 0u;
    importer_port_ = 0u;
    status_ = 0;
    debug_port_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    httpd_port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PN::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dstream.PNID pn_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pn_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_host;
        break;
      }
      
      // optional string host = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_rpc_server_port;
        break;
      }
      
      // optional fixed32 rpc_server_port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rpc_server_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &rpc_server_port_)));
          set_has_rpc_server_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_pub_port;
        break;
      }
      
      // optional fixed32 pub_port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pub_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &pub_port_)));
          set_has_pub_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_sub_port;
        break;
      }
      
      // optional fixed32 sub_port = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sub_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &sub_port_)));
          set_has_sub_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_importer_port;
        break;
      }
      
      // optional fixed32 importer_port = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_importer_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &importer_port_)));
          set_has_importer_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_status;
        break;
      }
      
      // optional .dstream.PNStatus status = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (dstream::PNStatus_IsValid(value)) {
            set_status(static_cast< dstream::PNStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_debug_port;
        break;
      }
      
      // optional fixed32 debug_port = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_debug_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &debug_port_)));
          set_has_debug_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_version;
        break;
      }
      
      // optional string version = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_httpd_port;
        break;
      }
      
      // optional fixed32 httpd_port = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_httpd_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &httpd_port_)));
          set_has_httpd_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PN::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dstream.PNID pn_id = 1;
  if (has_pn_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pn_id(), output);
  }
  
  // optional string host = 2;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->host(), output);
  }
  
  // optional fixed32 rpc_server_port = 3;
  if (has_rpc_server_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->rpc_server_port(), output);
  }
  
  // optional fixed32 pub_port = 4;
  if (has_pub_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->pub_port(), output);
  }
  
  // optional fixed32 sub_port = 5;
  if (has_sub_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->sub_port(), output);
  }
  
  // optional fixed32 importer_port = 6;
  if (has_importer_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->importer_port(), output);
  }
  
  // optional .dstream.PNStatus status = 7;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->status(), output);
  }
  
  // optional fixed32 debug_port = 8;
  if (has_debug_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->debug_port(), output);
  }
  
  // optional string version = 9;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->version(), output);
  }
  
  // optional fixed32 httpd_port = 10;
  if (has_httpd_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(10, this->httpd_port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PN::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dstream.PNID pn_id = 1;
  if (has_pn_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pn_id(), target);
  }
  
  // optional string host = 2;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->host(), target);
  }
  
  // optional fixed32 rpc_server_port = 3;
  if (has_rpc_server_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->rpc_server_port(), target);
  }
  
  // optional fixed32 pub_port = 4;
  if (has_pub_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->pub_port(), target);
  }
  
  // optional fixed32 sub_port = 5;
  if (has_sub_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->sub_port(), target);
  }
  
  // optional fixed32 importer_port = 6;
  if (has_importer_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(6, this->importer_port(), target);
  }
  
  // optional .dstream.PNStatus status = 7;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->status(), target);
  }
  
  // optional fixed32 debug_port = 8;
  if (has_debug_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->debug_port(), target);
  }
  
  // optional string version = 9;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->version(), target);
  }
  
  // optional fixed32 httpd_port = 10;
  if (has_httpd_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(10, this->httpd_port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PN::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dstream.PNID pn_id = 1;
    if (has_pn_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pn_id());
    }
    
    // optional string host = 2;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }
    
    // optional fixed32 rpc_server_port = 3;
    if (has_rpc_server_port()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 pub_port = 4;
    if (has_pub_port()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 sub_port = 5;
    if (has_sub_port()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 importer_port = 6;
    if (has_importer_port()) {
      total_size += 1 + 4;
    }
    
    // optional .dstream.PNStatus status = 7;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }
    
    // optional fixed32 debug_port = 8;
    if (has_debug_port()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string version = 9;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
    // optional fixed32 httpd_port = 10;
    if (has_httpd_port()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PN::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PN* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PN*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PN::MergeFrom(const PN& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pn_id()) {
      mutable_pn_id()->::dstream::PNID::MergeFrom(from.pn_id());
    }
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_rpc_server_port()) {
      set_rpc_server_port(from.rpc_server_port());
    }
    if (from.has_pub_port()) {
      set_pub_port(from.pub_port());
    }
    if (from.has_sub_port()) {
      set_sub_port(from.sub_port());
    }
    if (from.has_importer_port()) {
      set_importer_port(from.importer_port());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_debug_port()) {
      set_debug_port(from.debug_port());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_httpd_port()) {
      set_httpd_port(from.httpd_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PN::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PN::CopyFrom(const PN& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PN::IsInitialized() const {
  
  return true;
}

void PN::Swap(PN* other) {
  if (other != this) {
    std::swap(pn_id_, other->pn_id_);
    std::swap(host_, other->host_);
    std::swap(rpc_server_port_, other->rpc_server_port_);
    std::swap(pub_port_, other->pub_port_);
    std::swap(sub_port_, other->sub_port_);
    std::swap(importer_port_, other->importer_port_);
    std::swap(status_, other->status_);
    std::swap(debug_port_, other->debug_port_);
    std::swap(version_, other->version_);
    std::swap(httpd_port_, other->httpd_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PN::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PN_descriptor_;
  metadata.reflection = PN_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PEWrapperKV::kPeIdFieldNumber;
const int PEWrapperKV::kTypeFieldNumber;
const int PEWrapperKV::kAssignTimeFieldNumber;
const int PEWrapperKV::kAppNameFieldNumber;
const int PEWrapperKV::kRevisionFieldNumber;
#endif  // !_MSC_VER

PEWrapperKV::PEWrapperKV()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PEWrapperKV::InitAsDefaultInstance() {
}

PEWrapperKV::PEWrapperKV(const PEWrapperKV& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PEWrapperKV::SharedCtor() {
  _cached_size_ = 0;
  pe_id_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  assign_time_ = GOOGLE_ULONGLONG(0);
  app_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  revision_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PEWrapperKV::~PEWrapperKV() {
  SharedDtor();
}

void PEWrapperKV::SharedDtor() {
  if (app_name_ != &::google::protobuf::internal::kEmptyString) {
    delete app_name_;
  }
  if (this != default_instance_) {
  }
}

void PEWrapperKV::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PEWrapperKV::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PEWrapperKV_descriptor_;
}

const PEWrapperKV& PEWrapperKV::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pn_2eproto();  return *default_instance_;
}

PEWrapperKV* PEWrapperKV::default_instance_ = NULL;

PEWrapperKV* PEWrapperKV::New() const {
  return new PEWrapperKV;
}

void PEWrapperKV::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pe_id_ = GOOGLE_ULONGLONG(0);
    type_ = 0u;
    assign_time_ = GOOGLE_ULONGLONG(0);
    if (has_app_name()) {
      if (app_name_ != &::google::protobuf::internal::kEmptyString) {
        app_name_->clear();
      }
    }
    revision_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PEWrapperKV::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 pe_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &pe_id_)));
          set_has_pe_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_type;
        break;
      }
      
      // optional fixed32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_assign_time;
        break;
      }
      
      // optional uint64 assign_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_assign_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &assign_time_)));
          set_has_assign_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_app_name;
        break;
      }
      
      // optional string app_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->app_name().data(), this->app_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_revision;
        break;
      }
      
      // optional fixed32 revision = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_revision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &revision_)));
          set_has_revision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PEWrapperKV::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 pe_id = 1;
  if (has_pe_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->pe_id(), output);
  }
  
  // optional fixed32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->type(), output);
  }
  
  // optional uint64 assign_time = 3;
  if (has_assign_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->assign_time(), output);
  }
  
  // optional string app_name = 4;
  if (has_app_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_name().data(), this->app_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->app_name(), output);
  }
  
  // optional fixed32 revision = 5;
  if (has_revision()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->revision(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PEWrapperKV::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 pe_id = 1;
  if (has_pe_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->pe_id(), target);
  }
  
  // optional fixed32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->type(), target);
  }
  
  // optional uint64 assign_time = 3;
  if (has_assign_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->assign_time(), target);
  }
  
  // optional string app_name = 4;
  if (has_app_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_name().data(), this->app_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->app_name(), target);
  }
  
  // optional fixed32 revision = 5;
  if (has_revision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->revision(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PEWrapperKV::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 pe_id = 1;
    if (has_pe_id()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 type = 2;
    if (has_type()) {
      total_size += 1 + 4;
    }
    
    // optional uint64 assign_time = 3;
    if (has_assign_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->assign_time());
    }
    
    // optional string app_name = 4;
    if (has_app_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_name());
    }
    
    // optional fixed32 revision = 5;
    if (has_revision()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PEWrapperKV::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PEWrapperKV* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PEWrapperKV*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PEWrapperKV::MergeFrom(const PEWrapperKV& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pe_id()) {
      set_pe_id(from.pe_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_assign_time()) {
      set_assign_time(from.assign_time());
    }
    if (from.has_app_name()) {
      set_app_name(from.app_name());
    }
    if (from.has_revision()) {
      set_revision(from.revision());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PEWrapperKV::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PEWrapperKV::CopyFrom(const PEWrapperKV& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PEWrapperKV::IsInitialized() const {
  
  return true;
}

void PEWrapperKV::Swap(PEWrapperKV* other) {
  if (other != this) {
    std::swap(pe_id_, other->pe_id_);
    std::swap(type_, other->type_);
    std::swap(assign_time_, other->assign_time_);
    std::swap(app_name_, other->app_name_);
    std::swap(revision_, other->revision_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PEWrapperKV::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PEWrapperKV_descriptor_;
  metadata.reflection = PEWrapperKV_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PEWrapperMapPB::kNormalPeKvFieldNumber;
const int PEWrapperMapPB::kFailPeKvFieldNumber;
#endif  // !_MSC_VER

PEWrapperMapPB::PEWrapperMapPB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PEWrapperMapPB::InitAsDefaultInstance() {
}

PEWrapperMapPB::PEWrapperMapPB(const PEWrapperMapPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PEWrapperMapPB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PEWrapperMapPB::~PEWrapperMapPB() {
  SharedDtor();
}

void PEWrapperMapPB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PEWrapperMapPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PEWrapperMapPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PEWrapperMapPB_descriptor_;
}

const PEWrapperMapPB& PEWrapperMapPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pn_2eproto();  return *default_instance_;
}

PEWrapperMapPB* PEWrapperMapPB::default_instance_ = NULL;

PEWrapperMapPB* PEWrapperMapPB::New() const {
  return new PEWrapperMapPB;
}

void PEWrapperMapPB::Clear() {
  normal_pe_kv_.Clear();
  fail_pe_kv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PEWrapperMapPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dstream.PEWrapperKV normal_pe_kv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_normal_pe_kv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_normal_pe_kv()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_normal_pe_kv;
        if (input->ExpectTag(18)) goto parse_fail_pe_kv;
        break;
      }
      
      // repeated .dstream.PEWrapperKV fail_pe_kv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fail_pe_kv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fail_pe_kv()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fail_pe_kv;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PEWrapperMapPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .dstream.PEWrapperKV normal_pe_kv = 1;
  for (int i = 0; i < this->normal_pe_kv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->normal_pe_kv(i), output);
  }
  
  // repeated .dstream.PEWrapperKV fail_pe_kv = 2;
  for (int i = 0; i < this->fail_pe_kv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fail_pe_kv(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PEWrapperMapPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .dstream.PEWrapperKV normal_pe_kv = 1;
  for (int i = 0; i < this->normal_pe_kv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->normal_pe_kv(i), target);
  }
  
  // repeated .dstream.PEWrapperKV fail_pe_kv = 2;
  for (int i = 0; i < this->fail_pe_kv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fail_pe_kv(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PEWrapperMapPB::ByteSize() const {
  int total_size = 0;
  
  // repeated .dstream.PEWrapperKV normal_pe_kv = 1;
  total_size += 1 * this->normal_pe_kv_size();
  for (int i = 0; i < this->normal_pe_kv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->normal_pe_kv(i));
  }
  
  // repeated .dstream.PEWrapperKV fail_pe_kv = 2;
  total_size += 1 * this->fail_pe_kv_size();
  for (int i = 0; i < this->fail_pe_kv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fail_pe_kv(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PEWrapperMapPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PEWrapperMapPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PEWrapperMapPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PEWrapperMapPB::MergeFrom(const PEWrapperMapPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  normal_pe_kv_.MergeFrom(from.normal_pe_kv_);
  fail_pe_kv_.MergeFrom(from.fail_pe_kv_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PEWrapperMapPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PEWrapperMapPB::CopyFrom(const PEWrapperMapPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PEWrapperMapPB::IsInitialized() const {
  
  return true;
}

void PEWrapperMapPB::Swap(PEWrapperMapPB* other) {
  if (other != this) {
    normal_pe_kv_.Swap(&other->normal_pe_kv_);
    fail_pe_kv_.Swap(&other->fail_pe_kv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PEWrapperMapPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PEWrapperMapPB_descriptor_;
  metadata.reflection = PEWrapperMapPB_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dstream

// @@protoc_insertion_point(global_scope)
