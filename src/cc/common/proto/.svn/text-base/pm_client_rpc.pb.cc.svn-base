// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pm_client_rpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dstream {

namespace {

const ::google::protobuf::Descriptor* Ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginAck_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LoginAck_ErrorCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UpdateTopology_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateTopology_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UpdateTopology_Operation_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NotifyPM_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyPM_reflection_ = NULL;
const ::google::protobuf::Descriptor* KillPE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KillPE_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserOperation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserOperation_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UserOperation_Operation_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UserOperationReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserOperationReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UserOperationReply_Operation_descriptor_ = NULL;
const ::google::protobuf::Descriptor* StatusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlowControlRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlowControlRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FlowControlRequest_Operation_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FlowControlResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlowControlResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateProRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateProRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateProResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateProResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateProDone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateProDone_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlackListOperationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlackListOperationRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BlackListOperationRequest_Operation_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BlackListOperationResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlackListOperationResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pm_5fclient_5frpc_2eproto() {
  protobuf_AddDesc_pm_5fclient_5frpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pm_client_rpc.proto");
  GOOGLE_CHECK(file != NULL);
  Ack_descriptor_ = file->message_type(0);
  static const int Ack_offsets_[1] = {
  };
  Ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ack_descriptor_,
      Ack::default_instance_,
      Ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ack));
  LoginAck_descriptor_ = file->message_type(1);
  static const int LoginAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginAck, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginAck, code_),
  };
  LoginAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginAck_descriptor_,
      LoginAck::default_instance_,
      LoginAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginAck));
  LoginAck_ErrorCode_descriptor_ = LoginAck_descriptor_->enum_type(0);
  UpdateTopology_descriptor_ = file->message_type(2);
  static const int UpdateTopology_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTopology, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTopology, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTopology, app_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTopology, error_num_),
  };
  UpdateTopology_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateTopology_descriptor_,
      UpdateTopology::default_instance_,
      UpdateTopology_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTopology, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTopology, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateTopology));
  UpdateTopology_Operation_descriptor_ = UpdateTopology_descriptor_->enum_type(0);
  NotifyPM_descriptor_ = file->message_type(3);
  static const int NotifyPM_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPM, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPM, status_),
  };
  NotifyPM_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyPM_descriptor_,
      NotifyPM::default_instance_,
      NotifyPM_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPM, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPM, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyPM));
  KillPE_descriptor_ = file->message_type(4);
  static const int KillPE_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillPE, app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillPE, pe_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillPE, backup_pe_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillPE, pn_id_),
  };
  KillPE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KillPE_descriptor_,
      KillPE::default_instance_,
      KillPE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillPE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillPE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KillPE));
  UserOperation_descriptor_ = file->message_type(5);
  static const int UserOperation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOperation, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOperation, user_),
  };
  UserOperation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserOperation_descriptor_,
      UserOperation::default_instance_,
      UserOperation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOperation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOperation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserOperation));
  UserOperation_Operation_descriptor_ = UserOperation_descriptor_->enum_type(0);
  UserOperationReply_descriptor_ = file->message_type(6);
  static const int UserOperationReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOperationReply, replytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOperationReply, user_),
  };
  UserOperationReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserOperationReply_descriptor_,
      UserOperationReply::default_instance_,
      UserOperationReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOperationReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOperationReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserOperationReply));
  UserOperationReply_Operation_descriptor_ = UserOperationReply_descriptor_->enum_type(0);
  StatusRequest_descriptor_ = file->message_type(7);
  static const int StatusRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusRequest, pe_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusRequest, pn_id_),
  };
  StatusRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatusRequest_descriptor_,
      StatusRequest::default_instance_,
      StatusRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatusRequest));
  StatusResponse_descriptor_ = file->message_type(8);
  static const int StatusResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, pe_status_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, pn_report_list_),
  };
  StatusResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatusResponse_descriptor_,
      StatusResponse::default_instance_,
      StatusResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatusResponse));
  FlowControlRequest_descriptor_ = file->message_type(9);
  static const int FlowControlRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowControlRequest, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowControlRequest, app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowControlRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowControlRequest, processor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowControlRequest, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowControlRequest, cmd_),
  };
  FlowControlRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlowControlRequest_descriptor_,
      FlowControlRequest::default_instance_,
      FlowControlRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowControlRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowControlRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlowControlRequest));
  FlowControlRequest_Operation_descriptor_ = FlowControlRequest_descriptor_->enum_type(0);
  FlowControlResponse_descriptor_ = file->message_type(10);
  static const int FlowControlResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowControlResponse, app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowControlResponse, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowControlResponse, processor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowControlResponse, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowControlResponse, result_),
  };
  FlowControlResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlowControlResponse_descriptor_,
      FlowControlResponse::default_instance_,
      FlowControlResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowControlResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowControlResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlowControlResponse));
  UpdateProRequest_descriptor_ = file->message_type(11);
  static const int UpdateProRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateProRequest, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateProRequest, app_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateProRequest, processor_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateProRequest, revision_),
  };
  UpdateProRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateProRequest_descriptor_,
      UpdateProRequest::default_instance_,
      UpdateProRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateProRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateProRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateProRequest));
  UpdateProResponse_descriptor_ = file->message_type(12);
  static const int UpdateProResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateProResponse, error_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateProResponse, revision_),
  };
  UpdateProResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateProResponse_descriptor_,
      UpdateProResponse::default_instance_,
      UpdateProResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateProResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateProResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateProResponse));
  UpdateProDone_descriptor_ = file->message_type(13);
  static const int UpdateProDone_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateProDone, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateProDone, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateProDone, app_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateProDone, processor_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateProDone, revision_),
  };
  UpdateProDone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateProDone_descriptor_,
      UpdateProDone::default_instance_,
      UpdateProDone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateProDone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateProDone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateProDone));
  BlackListOperationRequest_descriptor_ = file->message_type(14);
  static const int BlackListOperationRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackListOperationRequest, pe_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackListOperationRequest, operation_),
  };
  BlackListOperationRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlackListOperationRequest_descriptor_,
      BlackListOperationRequest::default_instance_,
      BlackListOperationRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackListOperationRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackListOperationRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlackListOperationRequest));
  BlackListOperationRequest_Operation_descriptor_ = BlackListOperationRequest_descriptor_->enum_type(0);
  BlackListOperationResponse_descriptor_ = file->message_type(15);
  static const int BlackListOperationResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackListOperationResponse, pe_pn_blacklist_),
  };
  BlackListOperationResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlackListOperationResponse_descriptor_,
      BlackListOperationResponse::default_instance_,
      BlackListOperationResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackListOperationResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackListOperationResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlackListOperationResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pm_5fclient_5frpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ack_descriptor_, &Ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginAck_descriptor_, &LoginAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateTopology_descriptor_, &UpdateTopology::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyPM_descriptor_, &NotifyPM::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KillPE_descriptor_, &KillPE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserOperation_descriptor_, &UserOperation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserOperationReply_descriptor_, &UserOperationReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatusRequest_descriptor_, &StatusRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatusResponse_descriptor_, &StatusResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlowControlRequest_descriptor_, &FlowControlRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlowControlResponse_descriptor_, &FlowControlResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateProRequest_descriptor_, &UpdateProRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateProResponse_descriptor_, &UpdateProResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateProDone_descriptor_, &UpdateProDone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlackListOperationRequest_descriptor_, &BlackListOperationRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlackListOperationResponse_descriptor_, &BlackListOperationResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pm_5fclient_5frpc_2eproto() {
  delete Ack::default_instance_;
  delete Ack_reflection_;
  delete LoginAck::default_instance_;
  delete LoginAck_reflection_;
  delete UpdateTopology::default_instance_;
  delete UpdateTopology_reflection_;
  delete NotifyPM::default_instance_;
  delete NotifyPM_reflection_;
  delete KillPE::default_instance_;
  delete KillPE_reflection_;
  delete UserOperation::default_instance_;
  delete UserOperation_reflection_;
  delete UserOperationReply::default_instance_;
  delete UserOperationReply_reflection_;
  delete StatusRequest::default_instance_;
  delete StatusRequest_reflection_;
  delete StatusResponse::default_instance_;
  delete StatusResponse_reflection_;
  delete FlowControlRequest::default_instance_;
  delete FlowControlRequest_reflection_;
  delete FlowControlResponse::default_instance_;
  delete FlowControlResponse_reflection_;
  delete UpdateProRequest::default_instance_;
  delete UpdateProRequest_reflection_;
  delete UpdateProResponse::default_instance_;
  delete UpdateProResponse_reflection_;
  delete UpdateProDone::default_instance_;
  delete UpdateProDone_reflection_;
  delete BlackListOperationRequest::default_instance_;
  delete BlackListOperationRequest_reflection_;
  delete BlackListOperationResponse::default_instance_;
  delete BlackListOperationResponse_reflection_;
}

void protobuf_AddDesc_pm_5fclient_5frpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::dstream::protobuf_AddDesc_application_2eproto();
  ::dstream::protobuf_AddDesc_dstream_5fproto_5fcommon_2eproto();
  ::dstream::protobuf_AddDesc_pm_2eproto();
  ::dstream::protobuf_AddDesc_pn_2eproto();
  ::dstream::protobuf_AddDesc_pm_5fpn_5frpc_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023pm_client_rpc.proto\022\007dstream\032\021applicat"
    "ion.proto\032\032dstream_proto_common.proto\032\010p"
    "m.proto\032\010pn.proto\032\017pm_pn_rpc.proto\"\005\n\003Ac"
    "k\"\221\001\n\010LoginAck\022\033\n\004user\030\001 \001(\0132\r.dstream.U"
    "ser\022)\n\004code\030\002 \001(\0162\033.dstream.LoginAck.Err"
    "orCode\"=\n\tErrorCode\022\t\n\005OTHER\020\001\022\025\n\021VERSIO"
    "N_MISSMATCH\020\002\022\016\n\nWRONG_USER\020\003\"\252\002\n\016Update"
    "Topology\022\022\n\nsession_id\030\001 \001(\006\022/\n\004type\030\002 \001"
    "(\0162!.dstream.UpdateTopology.Operation\022!\n"
    "\003app\030\003 \001(\0132\024.dstream.Application\022\021\n\terro"
    "r_num\030\004 \001(\005\"\234\001\n\tOperation\022\007\n\003ADD\020\001\022\007\n\003DE"
    "L\020\002\022\016\n\nADD_SUB_OK\020\003\022\020\n\014ADD_SUB_FAIL\020\004\022\016\n"
    "\nDEL_SUB_OK\020\005\022\020\n\014DEL_SUB_FAIL\020\006\022\017\n\013UPDAT"
    "E_PARA\020\007\022\022\n\016UPDATE_PARA_OK\020\010\022\024\n\020UPDATE_P"
    "ARA_FAIL\020\t\".\n\010NotifyPM\022\022\n\nsession_id\030\001 \001"
    "(\006\022\016\n\006status\030\002 \001(\t\"\217\001\n\006KillPE\022\036\n\006app_id\030"
    "\001 \001(\0132\016.dstream.AppID\022\034\n\005pe_id\030\002 \001(\0132\r.d"
    "stream.PEID\022)\n\014backup_pe_id\030\003 \001(\0132\023.dstr"
    "eam.BackupPEID\022\034\n\005pn_id\030\004 \001(\0132\r.dstream."
    "PNID\"\223\001\n\rUserOperation\022.\n\004type\030\001 \001(\0162 .d"
    "stream.UserOperation.Operation\022\033\n\004user\030\002"
    " \001(\0132\r.dstream.User\"5\n\tOperation\022\007\n\003GET\020"
    "\001\022\n\n\006UPDATE\020\002\022\007\n\003ADD\020\003\022\n\n\006DELETE\020\004\"\242\001\n\022U"
    "serOperationReply\0228\n\treplytype\030\001 \001(\0162%.d"
    "stream.UserOperationReply.Operation\022\033\n\004u"
    "ser\030\002 \003(\0132\r.dstream.User\"5\n\tOperation\022\007\n"
    "\003GET\020\001\022\n\n\006UPDATE\020\002\022\007\n\003ADD\020\003\022\n\n\006DELETE\020\004\""
    "K\n\rStatusRequest\022\034\n\005pe_id\030\001 \003(\0132\r.dstrea"
    "m.PEID\022\034\n\005pn_id\030\002 \003(\0132\r.dstream.PNID\"l\n\016"
    "StatusResponse\022/\n\016pe_status_list\030\001 \003(\0132\027"
    ".dstream.BackupPEStatus\022)\n\016pn_report_lis"
    "t\030\002 \003(\0132\021.dstream.PNReport\"\320\001\n\022FlowContr"
    "olRequest\022\022\n\nsession_id\030\001 \001(\006\022\036\n\006app_id\030"
    "\002 \001(\0132\016.dstream.AppID\022\014\n\004name\030\003 \001(\t\022\021\n\tp"
    "rocessor\030\004 \001(\t\022\r\n\005limit\030\005 \001(\005\0227\n\003cmd\030\006 \001"
    "(\0162%.dstream.FlowControlRequest.Operatio"
    "n:\003GET\"\035\n\tOperation\022\007\n\003GET\020\001\022\007\n\003SET\020\002\"u\n"
    "\023FlowControlResponse\022\036\n\006app_id\030\001 \001(\0132\016.d"
    "stream.AppID\022\014\n\004name\030\002 \001(\t\022\021\n\tprocessor\030"
    "\003 \001(\t\022\r\n\005limit\030\004 \001(\005\022\016\n\006result\030\005 \001(\005\"s\n\020"
    "UpdateProRequest\022\022\n\nsession_id\030\001 \001(\006\022!\n\003"
    "app\030\002 \001(\0132\024.dstream.Application\022\026\n\016proce"
    "ssor_name\030\003 \001(\t\022\020\n\010revision\030\004 \001(\r\"8\n\021Upd"
    "ateProResponse\022\021\n\terror_num\030\001 \001(\005\022\020\n\010rev"
    "ision\030\002 \001(\r\"\200\001\n\rUpdateProDone\022\022\n\nsession"
    "_id\030\001 \001(\006\022\016\n\006status\030\002 \001(\t\022!\n\003app\030\003 \001(\0132\024"
    ".dstream.Application\022\026\n\016processor_name\030\004"
    " \001(\t\022\020\n\010revision\030\005 \001(\r\"\263\001\n\031BlackListOper"
    "ationRequest\022\034\n\005pe_id\030\001 \003(\0132\r.dstream.PE"
    "ID\022\?\n\toperation\030\002 \001(\0162,.dstream.BlackLis"
    "tOperationRequest.Operation\"7\n\tOperation"
    "\022\007\n\003GET\020\001\022\013\n\007GET_ALL\020\002\022\t\n\005ERASE\020\003\022\t\n\005CLE"
    "AR\020\004\"M\n\032BlackListOperationResponse\022/\n\017pe"
    "_pn_blacklist\030\001 \003(\0132\026.dstream.PEPNBlackL"
    "ist", 2163);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pm_client_rpc.proto", &protobuf_RegisterTypes);
  Ack::default_instance_ = new Ack();
  LoginAck::default_instance_ = new LoginAck();
  UpdateTopology::default_instance_ = new UpdateTopology();
  NotifyPM::default_instance_ = new NotifyPM();
  KillPE::default_instance_ = new KillPE();
  UserOperation::default_instance_ = new UserOperation();
  UserOperationReply::default_instance_ = new UserOperationReply();
  StatusRequest::default_instance_ = new StatusRequest();
  StatusResponse::default_instance_ = new StatusResponse();
  FlowControlRequest::default_instance_ = new FlowControlRequest();
  FlowControlResponse::default_instance_ = new FlowControlResponse();
  UpdateProRequest::default_instance_ = new UpdateProRequest();
  UpdateProResponse::default_instance_ = new UpdateProResponse();
  UpdateProDone::default_instance_ = new UpdateProDone();
  BlackListOperationRequest::default_instance_ = new BlackListOperationRequest();
  BlackListOperationResponse::default_instance_ = new BlackListOperationResponse();
  Ack::default_instance_->InitAsDefaultInstance();
  LoginAck::default_instance_->InitAsDefaultInstance();
  UpdateTopology::default_instance_->InitAsDefaultInstance();
  NotifyPM::default_instance_->InitAsDefaultInstance();
  KillPE::default_instance_->InitAsDefaultInstance();
  UserOperation::default_instance_->InitAsDefaultInstance();
  UserOperationReply::default_instance_->InitAsDefaultInstance();
  StatusRequest::default_instance_->InitAsDefaultInstance();
  StatusResponse::default_instance_->InitAsDefaultInstance();
  FlowControlRequest::default_instance_->InitAsDefaultInstance();
  FlowControlResponse::default_instance_->InitAsDefaultInstance();
  UpdateProRequest::default_instance_->InitAsDefaultInstance();
  UpdateProResponse::default_instance_->InitAsDefaultInstance();
  UpdateProDone::default_instance_->InitAsDefaultInstance();
  BlackListOperationRequest::default_instance_->InitAsDefaultInstance();
  BlackListOperationResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pm_5fclient_5frpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pm_5fclient_5frpc_2eproto {
  StaticDescriptorInitializer_pm_5fclient_5frpc_2eproto() {
    protobuf_AddDesc_pm_5fclient_5frpc_2eproto();
  }
} static_descriptor_initializer_pm_5fclient_5frpc_2eproto_;


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Ack::Ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ack::InitAsDefaultInstance() {
}

Ack::Ack(const Ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ack::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ack::~Ack() {
  SharedDtor();
}

void Ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ack_descriptor_;
}

const Ack& Ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pm_5fclient_5frpc_2eproto();  return *default_instance_;
}

Ack* Ack::default_instance_ = NULL;

Ack* Ack::New() const {
  return new Ack;
}

void Ack::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ack::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ack::MergeFrom(const Ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ack::CopyFrom(const Ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ack::IsInitialized() const {
  
  return true;
}

void Ack::Swap(Ack* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ack_descriptor_;
  metadata.reflection = Ack_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LoginAck_ErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginAck_ErrorCode_descriptor_;
}
bool LoginAck_ErrorCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LoginAck_ErrorCode LoginAck::OTHER;
const LoginAck_ErrorCode LoginAck::VERSION_MISSMATCH;
const LoginAck_ErrorCode LoginAck::WRONG_USER;
const LoginAck_ErrorCode LoginAck::ErrorCode_MIN;
const LoginAck_ErrorCode LoginAck::ErrorCode_MAX;
const int LoginAck::ErrorCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LoginAck::kUserFieldNumber;
const int LoginAck::kCodeFieldNumber;
#endif  // !_MSC_VER

LoginAck::LoginAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginAck::InitAsDefaultInstance() {
  user_ = const_cast< ::dstream::User*>(&::dstream::User::default_instance());
}

LoginAck::LoginAck(const LoginAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginAck::SharedCtor() {
  _cached_size_ = 0;
  user_ = NULL;
  code_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginAck::~LoginAck() {
  SharedDtor();
}

void LoginAck::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
  }
}

void LoginAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginAck_descriptor_;
}

const LoginAck& LoginAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pm_5fclient_5frpc_2eproto();  return *default_instance_;
}

LoginAck* LoginAck::default_instance_ = NULL;

LoginAck* LoginAck::New() const {
  return new LoginAck;
}

void LoginAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user()) {
      if (user_ != NULL) user_->::dstream::User::Clear();
    }
    code_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dstream.User user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }
      
      // optional .dstream.LoginAck.ErrorCode code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dstream::LoginAck_ErrorCode_IsValid(value)) {
            set_code(static_cast< ::dstream::LoginAck_ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dstream.User user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user(), output);
  }
  
  // optional .dstream.LoginAck.ErrorCode code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dstream.User user = 1;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user(), target);
  }
  
  // optional .dstream.LoginAck.ErrorCode code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dstream.User user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }
    
    // optional .dstream.LoginAck.ErrorCode code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginAck::MergeFrom(const LoginAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      mutable_user()->::dstream::User::MergeFrom(from.user());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginAck::CopyFrom(const LoginAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginAck::IsInitialized() const {
  
  return true;
}

void LoginAck::Swap(LoginAck* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginAck_descriptor_;
  metadata.reflection = LoginAck_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* UpdateTopology_Operation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateTopology_Operation_descriptor_;
}
bool UpdateTopology_Operation_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const UpdateTopology_Operation UpdateTopology::ADD;
const UpdateTopology_Operation UpdateTopology::DEL;
const UpdateTopology_Operation UpdateTopology::ADD_SUB_OK;
const UpdateTopology_Operation UpdateTopology::ADD_SUB_FAIL;
const UpdateTopology_Operation UpdateTopology::DEL_SUB_OK;
const UpdateTopology_Operation UpdateTopology::DEL_SUB_FAIL;
const UpdateTopology_Operation UpdateTopology::UPDATE_PARA;
const UpdateTopology_Operation UpdateTopology::UPDATE_PARA_OK;
const UpdateTopology_Operation UpdateTopology::UPDATE_PARA_FAIL;
const UpdateTopology_Operation UpdateTopology::Operation_MIN;
const UpdateTopology_Operation UpdateTopology::Operation_MAX;
const int UpdateTopology::Operation_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int UpdateTopology::kSessionIdFieldNumber;
const int UpdateTopology::kTypeFieldNumber;
const int UpdateTopology::kAppFieldNumber;
const int UpdateTopology::kErrorNumFieldNumber;
#endif  // !_MSC_VER

UpdateTopology::UpdateTopology()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateTopology::InitAsDefaultInstance() {
  app_ = const_cast< ::dstream::Application*>(&::dstream::Application::default_instance());
}

UpdateTopology::UpdateTopology(const UpdateTopology& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateTopology::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = GOOGLE_ULONGLONG(0);
  type_ = 1;
  app_ = NULL;
  error_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateTopology::~UpdateTopology() {
  SharedDtor();
}

void UpdateTopology::SharedDtor() {
  if (this != default_instance_) {
    delete app_;
  }
}

void UpdateTopology::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateTopology::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateTopology_descriptor_;
}

const UpdateTopology& UpdateTopology::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pm_5fclient_5frpc_2eproto();  return *default_instance_;
}

UpdateTopology* UpdateTopology::default_instance_ = NULL;

UpdateTopology* UpdateTopology::New() const {
  return new UpdateTopology;
}

void UpdateTopology::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = GOOGLE_ULONGLONG(0);
    type_ = 1;
    if (has_app()) {
      if (app_ != NULL) app_->::dstream::Application::Clear();
    }
    error_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateTopology::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional .dstream.UpdateTopology.Operation type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dstream::UpdateTopology_Operation_IsValid(value)) {
            set_type(static_cast< ::dstream::UpdateTopology_Operation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_app;
        break;
      }
      
      // optional .dstream.Application app = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_error_num;
        break;
      }
      
      // optional int32 error_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_num_)));
          set_has_error_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateTopology::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 session_id = 1;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->session_id(), output);
  }
  
  // optional .dstream.UpdateTopology.Operation type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
  // optional .dstream.Application app = 3;
  if (has_app()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->app(), output);
  }
  
  // optional int32 error_num = 4;
  if (has_error_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->error_num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateTopology::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 session_id = 1;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->session_id(), target);
  }
  
  // optional .dstream.UpdateTopology.Operation type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }
  
  // optional .dstream.Application app = 3;
  if (has_app()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->app(), target);
  }
  
  // optional int32 error_num = 4;
  if (has_error_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->error_num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateTopology::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 session_id = 1;
    if (has_session_id()) {
      total_size += 1 + 8;
    }
    
    // optional .dstream.UpdateTopology.Operation type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional .dstream.Application app = 3;
    if (has_app()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->app());
    }
    
    // optional int32 error_num = 4;
    if (has_error_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateTopology::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateTopology* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateTopology*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateTopology::MergeFrom(const UpdateTopology& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_app()) {
      mutable_app()->::dstream::Application::MergeFrom(from.app());
    }
    if (from.has_error_num()) {
      set_error_num(from.error_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateTopology::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateTopology::CopyFrom(const UpdateTopology& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateTopology::IsInitialized() const {
  
  return true;
}

void UpdateTopology::Swap(UpdateTopology* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(type_, other->type_);
    std::swap(app_, other->app_);
    std::swap(error_num_, other->error_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateTopology::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateTopology_descriptor_;
  metadata.reflection = UpdateTopology_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyPM::kSessionIdFieldNumber;
const int NotifyPM::kStatusFieldNumber;
#endif  // !_MSC_VER

NotifyPM::NotifyPM()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyPM::InitAsDefaultInstance() {
}

NotifyPM::NotifyPM(const NotifyPM& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyPM::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = GOOGLE_ULONGLONG(0);
  status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyPM::~NotifyPM() {
  SharedDtor();
}

void NotifyPM::SharedDtor() {
  if (status_ != &::google::protobuf::internal::kEmptyString) {
    delete status_;
  }
  if (this != default_instance_) {
  }
}

void NotifyPM::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyPM::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyPM_descriptor_;
}

const NotifyPM& NotifyPM::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pm_5fclient_5frpc_2eproto();  return *default_instance_;
}

NotifyPM* NotifyPM::default_instance_ = NULL;

NotifyPM* NotifyPM::New() const {
  return new NotifyPM;
}

void NotifyPM::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = GOOGLE_ULONGLONG(0);
    if (has_status()) {
      if (status_ != &::google::protobuf::internal::kEmptyString) {
        status_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyPM::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_status;
        break;
      }
      
      // optional string status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyPM::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 session_id = 1;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->session_id(), output);
  }
  
  // optional string status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyPM::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 session_id = 1;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->session_id(), target);
  }
  
  // optional string status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyPM::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 session_id = 1;
    if (has_session_id()) {
      total_size += 1 + 8;
    }
    
    // optional string status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyPM::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyPM* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyPM*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyPM::MergeFrom(const NotifyPM& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyPM::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyPM::CopyFrom(const NotifyPM& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyPM::IsInitialized() const {
  
  return true;
}

void NotifyPM::Swap(NotifyPM* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyPM::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyPM_descriptor_;
  metadata.reflection = NotifyPM_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KillPE::kAppIdFieldNumber;
const int KillPE::kPeIdFieldNumber;
const int KillPE::kBackupPeIdFieldNumber;
const int KillPE::kPnIdFieldNumber;
#endif  // !_MSC_VER

KillPE::KillPE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KillPE::InitAsDefaultInstance() {
  app_id_ = const_cast< ::dstream::AppID*>(&::dstream::AppID::default_instance());
  pe_id_ = const_cast< ::dstream::PEID*>(&::dstream::PEID::default_instance());
  backup_pe_id_ = const_cast< ::dstream::BackupPEID*>(&::dstream::BackupPEID::default_instance());
  pn_id_ = const_cast< ::dstream::PNID*>(&::dstream::PNID::default_instance());
}

KillPE::KillPE(const KillPE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KillPE::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = NULL;
  pe_id_ = NULL;
  backup_pe_id_ = NULL;
  pn_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KillPE::~KillPE() {
  SharedDtor();
}

void KillPE::SharedDtor() {
  if (this != default_instance_) {
    delete app_id_;
    delete pe_id_;
    delete backup_pe_id_;
    delete pn_id_;
  }
}

void KillPE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KillPE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KillPE_descriptor_;
}

const KillPE& KillPE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pm_5fclient_5frpc_2eproto();  return *default_instance_;
}

KillPE* KillPE::default_instance_ = NULL;

KillPE* KillPE::New() const {
  return new KillPE;
}

void KillPE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_app_id()) {
      if (app_id_ != NULL) app_id_->::dstream::AppID::Clear();
    }
    if (has_pe_id()) {
      if (pe_id_ != NULL) pe_id_->::dstream::PEID::Clear();
    }
    if (has_backup_pe_id()) {
      if (backup_pe_id_ != NULL) backup_pe_id_->::dstream::BackupPEID::Clear();
    }
    if (has_pn_id()) {
      if (pn_id_ != NULL) pn_id_->::dstream::PNID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KillPE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dstream.AppID app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pe_id;
        break;
      }
      
      // optional .dstream.PEID pe_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pe_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pe_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_backup_pe_id;
        break;
      }
      
      // optional .dstream.BackupPEID backup_pe_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_backup_pe_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_backup_pe_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pn_id;
        break;
      }
      
      // optional .dstream.PNID pn_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pn_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pn_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KillPE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dstream.AppID app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->app_id(), output);
  }
  
  // optional .dstream.PEID pe_id = 2;
  if (has_pe_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pe_id(), output);
  }
  
  // optional .dstream.BackupPEID backup_pe_id = 3;
  if (has_backup_pe_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->backup_pe_id(), output);
  }
  
  // optional .dstream.PNID pn_id = 4;
  if (has_pn_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pn_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KillPE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dstream.AppID app_id = 1;
  if (has_app_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->app_id(), target);
  }
  
  // optional .dstream.PEID pe_id = 2;
  if (has_pe_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pe_id(), target);
  }
  
  // optional .dstream.BackupPEID backup_pe_id = 3;
  if (has_backup_pe_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->backup_pe_id(), target);
  }
  
  // optional .dstream.PNID pn_id = 4;
  if (has_pn_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pn_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KillPE::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dstream.AppID app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->app_id());
    }
    
    // optional .dstream.PEID pe_id = 2;
    if (has_pe_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pe_id());
    }
    
    // optional .dstream.BackupPEID backup_pe_id = 3;
    if (has_backup_pe_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->backup_pe_id());
    }
    
    // optional .dstream.PNID pn_id = 4;
    if (has_pn_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pn_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KillPE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KillPE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KillPE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KillPE::MergeFrom(const KillPE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      mutable_app_id()->::dstream::AppID::MergeFrom(from.app_id());
    }
    if (from.has_pe_id()) {
      mutable_pe_id()->::dstream::PEID::MergeFrom(from.pe_id());
    }
    if (from.has_backup_pe_id()) {
      mutable_backup_pe_id()->::dstream::BackupPEID::MergeFrom(from.backup_pe_id());
    }
    if (from.has_pn_id()) {
      mutable_pn_id()->::dstream::PNID::MergeFrom(from.pn_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KillPE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KillPE::CopyFrom(const KillPE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KillPE::IsInitialized() const {
  
  return true;
}

void KillPE::Swap(KillPE* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(pe_id_, other->pe_id_);
    std::swap(backup_pe_id_, other->backup_pe_id_);
    std::swap(pn_id_, other->pn_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KillPE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KillPE_descriptor_;
  metadata.reflection = KillPE_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* UserOperation_Operation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserOperation_Operation_descriptor_;
}
bool UserOperation_Operation_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const UserOperation_Operation UserOperation::GET;
const UserOperation_Operation UserOperation::UPDATE;
const UserOperation_Operation UserOperation::ADD;
const UserOperation_Operation UserOperation::DELETE;
const UserOperation_Operation UserOperation::Operation_MIN;
const UserOperation_Operation UserOperation::Operation_MAX;
const int UserOperation::Operation_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int UserOperation::kTypeFieldNumber;
const int UserOperation::kUserFieldNumber;
#endif  // !_MSC_VER

UserOperation::UserOperation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserOperation::InitAsDefaultInstance() {
  user_ = const_cast< ::dstream::User*>(&::dstream::User::default_instance());
}

UserOperation::UserOperation(const UserOperation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserOperation::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserOperation::~UserOperation() {
  SharedDtor();
}

void UserOperation::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
  }
}

void UserOperation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserOperation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserOperation_descriptor_;
}

const UserOperation& UserOperation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pm_5fclient_5frpc_2eproto();  return *default_instance_;
}

UserOperation* UserOperation::default_instance_ = NULL;

UserOperation* UserOperation::New() const {
  return new UserOperation;
}

void UserOperation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_user()) {
      if (user_ != NULL) user_->::dstream::User::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserOperation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dstream.UserOperation.Operation type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dstream::UserOperation_Operation_IsValid(value)) {
            set_type(static_cast< ::dstream::UserOperation_Operation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user;
        break;
      }
      
      // optional .dstream.User user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserOperation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dstream.UserOperation.Operation type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional .dstream.User user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserOperation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dstream.UserOperation.Operation type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional .dstream.User user = 2;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserOperation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dstream.UserOperation.Operation type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional .dstream.User user = 2;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserOperation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserOperation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserOperation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserOperation::MergeFrom(const UserOperation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_user()) {
      mutable_user()->::dstream::User::MergeFrom(from.user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserOperation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserOperation::CopyFrom(const UserOperation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserOperation::IsInitialized() const {
  
  return true;
}

void UserOperation::Swap(UserOperation* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(user_, other->user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserOperation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserOperation_descriptor_;
  metadata.reflection = UserOperation_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* UserOperationReply_Operation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserOperationReply_Operation_descriptor_;
}
bool UserOperationReply_Operation_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const UserOperationReply_Operation UserOperationReply::GET;
const UserOperationReply_Operation UserOperationReply::UPDATE;
const UserOperationReply_Operation UserOperationReply::ADD;
const UserOperationReply_Operation UserOperationReply::DELETE;
const UserOperationReply_Operation UserOperationReply::Operation_MIN;
const UserOperationReply_Operation UserOperationReply::Operation_MAX;
const int UserOperationReply::Operation_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int UserOperationReply::kReplytypeFieldNumber;
const int UserOperationReply::kUserFieldNumber;
#endif  // !_MSC_VER

UserOperationReply::UserOperationReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserOperationReply::InitAsDefaultInstance() {
}

UserOperationReply::UserOperationReply(const UserOperationReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserOperationReply::SharedCtor() {
  _cached_size_ = 0;
  replytype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserOperationReply::~UserOperationReply() {
  SharedDtor();
}

void UserOperationReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserOperationReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserOperationReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserOperationReply_descriptor_;
}

const UserOperationReply& UserOperationReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pm_5fclient_5frpc_2eproto();  return *default_instance_;
}

UserOperationReply* UserOperationReply::default_instance_ = NULL;

UserOperationReply* UserOperationReply::New() const {
  return new UserOperationReply;
}

void UserOperationReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    replytype_ = 1;
  }
  user_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserOperationReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dstream.UserOperationReply.Operation replytype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dstream::UserOperationReply_Operation_IsValid(value)) {
            set_replytype(static_cast< ::dstream::UserOperationReply_Operation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user;
        break;
      }
      
      // repeated .dstream.User user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserOperationReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dstream.UserOperationReply.Operation replytype = 1;
  if (has_replytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->replytype(), output);
  }
  
  // repeated .dstream.User user = 2;
  for (int i = 0; i < this->user_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserOperationReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dstream.UserOperationReply.Operation replytype = 1;
  if (has_replytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->replytype(), target);
  }
  
  // repeated .dstream.User user = 2;
  for (int i = 0; i < this->user_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserOperationReply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dstream.UserOperationReply.Operation replytype = 1;
    if (has_replytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->replytype());
    }
    
  }
  // repeated .dstream.User user = 2;
  total_size += 1 * this->user_size();
  for (int i = 0; i < this->user_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserOperationReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserOperationReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserOperationReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserOperationReply::MergeFrom(const UserOperationReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_.MergeFrom(from.user_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_replytype()) {
      set_replytype(from.replytype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserOperationReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserOperationReply::CopyFrom(const UserOperationReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserOperationReply::IsInitialized() const {
  
  return true;
}

void UserOperationReply::Swap(UserOperationReply* other) {
  if (other != this) {
    std::swap(replytype_, other->replytype_);
    user_.Swap(&other->user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserOperationReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserOperationReply_descriptor_;
  metadata.reflection = UserOperationReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatusRequest::kPeIdFieldNumber;
const int StatusRequest::kPnIdFieldNumber;
#endif  // !_MSC_VER

StatusRequest::StatusRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatusRequest::InitAsDefaultInstance() {
}

StatusRequest::StatusRequest(const StatusRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatusRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatusRequest::~StatusRequest() {
  SharedDtor();
}

void StatusRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusRequest_descriptor_;
}

const StatusRequest& StatusRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pm_5fclient_5frpc_2eproto();  return *default_instance_;
}

StatusRequest* StatusRequest::default_instance_ = NULL;

StatusRequest* StatusRequest::New() const {
  return new StatusRequest;
}

void StatusRequest::Clear() {
  pe_id_.Clear();
  pn_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dstream.PEID pe_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pe_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pe_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pe_id;
        if (input->ExpectTag(18)) goto parse_pn_id;
        break;
      }
      
      // repeated .dstream.PNID pn_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pn_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pn_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pn_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .dstream.PEID pe_id = 1;
  for (int i = 0; i < this->pe_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pe_id(i), output);
  }
  
  // repeated .dstream.PNID pn_id = 2;
  for (int i = 0; i < this->pn_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pn_id(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatusRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .dstream.PEID pe_id = 1;
  for (int i = 0; i < this->pe_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pe_id(i), target);
  }
  
  // repeated .dstream.PNID pn_id = 2;
  for (int i = 0; i < this->pn_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pn_id(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatusRequest::ByteSize() const {
  int total_size = 0;
  
  // repeated .dstream.PEID pe_id = 1;
  total_size += 1 * this->pe_id_size();
  for (int i = 0; i < this->pe_id_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pe_id(i));
  }
  
  // repeated .dstream.PNID pn_id = 2;
  total_size += 1 * this->pn_id_size();
  for (int i = 0; i < this->pn_id_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pn_id(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatusRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatusRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatusRequest::MergeFrom(const StatusRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  pe_id_.MergeFrom(from.pe_id_);
  pn_id_.MergeFrom(from.pn_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusRequest::CopyFrom(const StatusRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusRequest::IsInitialized() const {
  
  return true;
}

void StatusRequest::Swap(StatusRequest* other) {
  if (other != this) {
    pe_id_.Swap(&other->pe_id_);
    pn_id_.Swap(&other->pn_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatusRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusRequest_descriptor_;
  metadata.reflection = StatusRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatusResponse::kPeStatusListFieldNumber;
const int StatusResponse::kPnReportListFieldNumber;
#endif  // !_MSC_VER

StatusResponse::StatusResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatusResponse::InitAsDefaultInstance() {
}

StatusResponse::StatusResponse(const StatusResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatusResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatusResponse::~StatusResponse() {
  SharedDtor();
}

void StatusResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StatusResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusResponse_descriptor_;
}

const StatusResponse& StatusResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pm_5fclient_5frpc_2eproto();  return *default_instance_;
}

StatusResponse* StatusResponse::default_instance_ = NULL;

StatusResponse* StatusResponse::New() const {
  return new StatusResponse;
}

void StatusResponse::Clear() {
  pe_status_list_.Clear();
  pn_report_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dstream.BackupPEStatus pe_status_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pe_status_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pe_status_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pe_status_list;
        if (input->ExpectTag(18)) goto parse_pn_report_list;
        break;
      }
      
      // repeated .dstream.PNReport pn_report_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pn_report_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pn_report_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pn_report_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .dstream.BackupPEStatus pe_status_list = 1;
  for (int i = 0; i < this->pe_status_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pe_status_list(i), output);
  }
  
  // repeated .dstream.PNReport pn_report_list = 2;
  for (int i = 0; i < this->pn_report_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pn_report_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatusResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .dstream.BackupPEStatus pe_status_list = 1;
  for (int i = 0; i < this->pe_status_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pe_status_list(i), target);
  }
  
  // repeated .dstream.PNReport pn_report_list = 2;
  for (int i = 0; i < this->pn_report_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pn_report_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatusResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .dstream.BackupPEStatus pe_status_list = 1;
  total_size += 1 * this->pe_status_list_size();
  for (int i = 0; i < this->pe_status_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pe_status_list(i));
  }
  
  // repeated .dstream.PNReport pn_report_list = 2;
  total_size += 1 * this->pn_report_list_size();
  for (int i = 0; i < this->pn_report_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pn_report_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatusResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatusResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatusResponse::MergeFrom(const StatusResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  pe_status_list_.MergeFrom(from.pe_status_list_);
  pn_report_list_.MergeFrom(from.pn_report_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusResponse::CopyFrom(const StatusResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusResponse::IsInitialized() const {
  
  return true;
}

void StatusResponse::Swap(StatusResponse* other) {
  if (other != this) {
    pe_status_list_.Swap(&other->pe_status_list_);
    pn_report_list_.Swap(&other->pn_report_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatusResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusResponse_descriptor_;
  metadata.reflection = StatusResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* FlowControlRequest_Operation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlowControlRequest_Operation_descriptor_;
}
bool FlowControlRequest_Operation_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FlowControlRequest_Operation FlowControlRequest::GET;
const FlowControlRequest_Operation FlowControlRequest::SET;
const FlowControlRequest_Operation FlowControlRequest::Operation_MIN;
const FlowControlRequest_Operation FlowControlRequest::Operation_MAX;
const int FlowControlRequest::Operation_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int FlowControlRequest::kSessionIdFieldNumber;
const int FlowControlRequest::kAppIdFieldNumber;
const int FlowControlRequest::kNameFieldNumber;
const int FlowControlRequest::kProcessorFieldNumber;
const int FlowControlRequest::kLimitFieldNumber;
const int FlowControlRequest::kCmdFieldNumber;
#endif  // !_MSC_VER

FlowControlRequest::FlowControlRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlowControlRequest::InitAsDefaultInstance() {
  app_id_ = const_cast< ::dstream::AppID*>(&::dstream::AppID::default_instance());
}

FlowControlRequest::FlowControlRequest(const FlowControlRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlowControlRequest::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = GOOGLE_ULONGLONG(0);
  app_id_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  processor_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  limit_ = 0;
  cmd_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlowControlRequest::~FlowControlRequest() {
  SharedDtor();
}

void FlowControlRequest::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (processor_ != &::google::protobuf::internal::kEmptyString) {
    delete processor_;
  }
  if (this != default_instance_) {
    delete app_id_;
  }
}

void FlowControlRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlowControlRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlowControlRequest_descriptor_;
}

const FlowControlRequest& FlowControlRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pm_5fclient_5frpc_2eproto();  return *default_instance_;
}

FlowControlRequest* FlowControlRequest::default_instance_ = NULL;

FlowControlRequest* FlowControlRequest::New() const {
  return new FlowControlRequest;
}

void FlowControlRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = GOOGLE_ULONGLONG(0);
    if (has_app_id()) {
      if (app_id_ != NULL) app_id_->::dstream::AppID::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_processor()) {
      if (processor_ != &::google::protobuf::internal::kEmptyString) {
        processor_->clear();
      }
    }
    limit_ = 0;
    cmd_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlowControlRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_app_id;
        break;
      }
      
      // optional .dstream.AppID app_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_processor;
        break;
      }
      
      // optional string processor = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_processor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_processor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->processor().data(), this->processor().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_limit;
        break;
      }
      
      // optional int32 limit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cmd;
        break;
      }
      
      // optional .dstream.FlowControlRequest.Operation cmd = 6 [default = GET];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dstream::FlowControlRequest_Operation_IsValid(value)) {
            set_cmd(static_cast< ::dstream::FlowControlRequest_Operation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlowControlRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 session_id = 1;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->session_id(), output);
  }
  
  // optional .dstream.AppID app_id = 2;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->app_id(), output);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  // optional string processor = 4;
  if (has_processor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->processor().data(), this->processor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->processor(), output);
  }
  
  // optional int32 limit = 5;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->limit(), output);
  }
  
  // optional .dstream.FlowControlRequest.Operation cmd = 6 [default = GET];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->cmd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlowControlRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 session_id = 1;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->session_id(), target);
  }
  
  // optional .dstream.AppID app_id = 2;
  if (has_app_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->app_id(), target);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  // optional string processor = 4;
  if (has_processor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->processor().data(), this->processor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->processor(), target);
  }
  
  // optional int32 limit = 5;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->limit(), target);
  }
  
  // optional .dstream.FlowControlRequest.Operation cmd = 6 [default = GET];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->cmd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlowControlRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 session_id = 1;
    if (has_session_id()) {
      total_size += 1 + 8;
    }
    
    // optional .dstream.AppID app_id = 2;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->app_id());
    }
    
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string processor = 4;
    if (has_processor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->processor());
    }
    
    // optional int32 limit = 5;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit());
    }
    
    // optional .dstream.FlowControlRequest.Operation cmd = 6 [default = GET];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlowControlRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlowControlRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlowControlRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlowControlRequest::MergeFrom(const FlowControlRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_app_id()) {
      mutable_app_id()->::dstream::AppID::MergeFrom(from.app_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_processor()) {
      set_processor(from.processor());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlowControlRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowControlRequest::CopyFrom(const FlowControlRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowControlRequest::IsInitialized() const {
  
  return true;
}

void FlowControlRequest::Swap(FlowControlRequest* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(app_id_, other->app_id_);
    std::swap(name_, other->name_);
    std::swap(processor_, other->processor_);
    std::swap(limit_, other->limit_);
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlowControlRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlowControlRequest_descriptor_;
  metadata.reflection = FlowControlRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FlowControlResponse::kAppIdFieldNumber;
const int FlowControlResponse::kNameFieldNumber;
const int FlowControlResponse::kProcessorFieldNumber;
const int FlowControlResponse::kLimitFieldNumber;
const int FlowControlResponse::kResultFieldNumber;
#endif  // !_MSC_VER

FlowControlResponse::FlowControlResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlowControlResponse::InitAsDefaultInstance() {
  app_id_ = const_cast< ::dstream::AppID*>(&::dstream::AppID::default_instance());
}

FlowControlResponse::FlowControlResponse(const FlowControlResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlowControlResponse::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  processor_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  limit_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlowControlResponse::~FlowControlResponse() {
  SharedDtor();
}

void FlowControlResponse::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (processor_ != &::google::protobuf::internal::kEmptyString) {
    delete processor_;
  }
  if (this != default_instance_) {
    delete app_id_;
  }
}

void FlowControlResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlowControlResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlowControlResponse_descriptor_;
}

const FlowControlResponse& FlowControlResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pm_5fclient_5frpc_2eproto();  return *default_instance_;
}

FlowControlResponse* FlowControlResponse::default_instance_ = NULL;

FlowControlResponse* FlowControlResponse::New() const {
  return new FlowControlResponse;
}

void FlowControlResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_app_id()) {
      if (app_id_ != NULL) app_id_->::dstream::AppID::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_processor()) {
      if (processor_ != &::google::protobuf::internal::kEmptyString) {
        processor_->clear();
      }
    }
    limit_ = 0;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlowControlResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dstream.AppID app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_processor;
        break;
      }
      
      // optional string processor = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_processor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_processor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->processor().data(), this->processor().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_limit;
        break;
      }
      
      // optional int32 limit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_result;
        break;
      }
      
      // optional int32 result = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlowControlResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dstream.AppID app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->app_id(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional string processor = 3;
  if (has_processor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->processor().data(), this->processor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->processor(), output);
  }
  
  // optional int32 limit = 4;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->limit(), output);
  }
  
  // optional int32 result = 5;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlowControlResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dstream.AppID app_id = 1;
  if (has_app_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->app_id(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional string processor = 3;
  if (has_processor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->processor().data(), this->processor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->processor(), target);
  }
  
  // optional int32 limit = 4;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->limit(), target);
  }
  
  // optional int32 result = 5;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlowControlResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dstream.AppID app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->app_id());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string processor = 3;
    if (has_processor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->processor());
    }
    
    // optional int32 limit = 4;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit());
    }
    
    // optional int32 result = 5;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlowControlResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlowControlResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlowControlResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlowControlResponse::MergeFrom(const FlowControlResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      mutable_app_id()->::dstream::AppID::MergeFrom(from.app_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_processor()) {
      set_processor(from.processor());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlowControlResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowControlResponse::CopyFrom(const FlowControlResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowControlResponse::IsInitialized() const {
  
  return true;
}

void FlowControlResponse::Swap(FlowControlResponse* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(name_, other->name_);
    std::swap(processor_, other->processor_);
    std::swap(limit_, other->limit_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlowControlResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlowControlResponse_descriptor_;
  metadata.reflection = FlowControlResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateProRequest::kSessionIdFieldNumber;
const int UpdateProRequest::kAppFieldNumber;
const int UpdateProRequest::kProcessorNameFieldNumber;
const int UpdateProRequest::kRevisionFieldNumber;
#endif  // !_MSC_VER

UpdateProRequest::UpdateProRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateProRequest::InitAsDefaultInstance() {
  app_ = const_cast< ::dstream::Application*>(&::dstream::Application::default_instance());
}

UpdateProRequest::UpdateProRequest(const UpdateProRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateProRequest::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = GOOGLE_ULONGLONG(0);
  app_ = NULL;
  processor_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  revision_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateProRequest::~UpdateProRequest() {
  SharedDtor();
}

void UpdateProRequest::SharedDtor() {
  if (processor_name_ != &::google::protobuf::internal::kEmptyString) {
    delete processor_name_;
  }
  if (this != default_instance_) {
    delete app_;
  }
}

void UpdateProRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateProRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateProRequest_descriptor_;
}

const UpdateProRequest& UpdateProRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pm_5fclient_5frpc_2eproto();  return *default_instance_;
}

UpdateProRequest* UpdateProRequest::default_instance_ = NULL;

UpdateProRequest* UpdateProRequest::New() const {
  return new UpdateProRequest;
}

void UpdateProRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = GOOGLE_ULONGLONG(0);
    if (has_app()) {
      if (app_ != NULL) app_->::dstream::Application::Clear();
    }
    if (has_processor_name()) {
      if (processor_name_ != &::google::protobuf::internal::kEmptyString) {
        processor_name_->clear();
      }
    }
    revision_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateProRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_app;
        break;
      }
      
      // optional .dstream.Application app = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_processor_name;
        break;
      }
      
      // optional string processor_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_processor_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_processor_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->processor_name().data(), this->processor_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_revision;
        break;
      }
      
      // optional uint32 revision = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_revision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &revision_)));
          set_has_revision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateProRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 session_id = 1;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->session_id(), output);
  }
  
  // optional .dstream.Application app = 2;
  if (has_app()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->app(), output);
  }
  
  // optional string processor_name = 3;
  if (has_processor_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->processor_name().data(), this->processor_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->processor_name(), output);
  }
  
  // optional uint32 revision = 4;
  if (has_revision()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->revision(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateProRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 session_id = 1;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->session_id(), target);
  }
  
  // optional .dstream.Application app = 2;
  if (has_app()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->app(), target);
  }
  
  // optional string processor_name = 3;
  if (has_processor_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->processor_name().data(), this->processor_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->processor_name(), target);
  }
  
  // optional uint32 revision = 4;
  if (has_revision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->revision(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateProRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 session_id = 1;
    if (has_session_id()) {
      total_size += 1 + 8;
    }
    
    // optional .dstream.Application app = 2;
    if (has_app()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->app());
    }
    
    // optional string processor_name = 3;
    if (has_processor_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->processor_name());
    }
    
    // optional uint32 revision = 4;
    if (has_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->revision());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateProRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateProRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateProRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateProRequest::MergeFrom(const UpdateProRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_app()) {
      mutable_app()->::dstream::Application::MergeFrom(from.app());
    }
    if (from.has_processor_name()) {
      set_processor_name(from.processor_name());
    }
    if (from.has_revision()) {
      set_revision(from.revision());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateProRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateProRequest::CopyFrom(const UpdateProRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateProRequest::IsInitialized() const {
  
  return true;
}

void UpdateProRequest::Swap(UpdateProRequest* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(app_, other->app_);
    std::swap(processor_name_, other->processor_name_);
    std::swap(revision_, other->revision_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateProRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateProRequest_descriptor_;
  metadata.reflection = UpdateProRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateProResponse::kErrorNumFieldNumber;
const int UpdateProResponse::kRevisionFieldNumber;
#endif  // !_MSC_VER

UpdateProResponse::UpdateProResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateProResponse::InitAsDefaultInstance() {
}

UpdateProResponse::UpdateProResponse(const UpdateProResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateProResponse::SharedCtor() {
  _cached_size_ = 0;
  error_num_ = 0;
  revision_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateProResponse::~UpdateProResponse() {
  SharedDtor();
}

void UpdateProResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateProResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateProResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateProResponse_descriptor_;
}

const UpdateProResponse& UpdateProResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pm_5fclient_5frpc_2eproto();  return *default_instance_;
}

UpdateProResponse* UpdateProResponse::default_instance_ = NULL;

UpdateProResponse* UpdateProResponse::New() const {
  return new UpdateProResponse;
}

void UpdateProResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_num_ = 0;
    revision_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateProResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_num_)));
          set_has_error_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_revision;
        break;
      }
      
      // optional uint32 revision = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_revision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &revision_)));
          set_has_revision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateProResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error_num = 1;
  if (has_error_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_num(), output);
  }
  
  // optional uint32 revision = 2;
  if (has_revision()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->revision(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateProResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error_num = 1;
  if (has_error_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_num(), target);
  }
  
  // optional uint32 revision = 2;
  if (has_revision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->revision(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateProResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error_num = 1;
    if (has_error_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_num());
    }
    
    // optional uint32 revision = 2;
    if (has_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->revision());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateProResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateProResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateProResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateProResponse::MergeFrom(const UpdateProResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_num()) {
      set_error_num(from.error_num());
    }
    if (from.has_revision()) {
      set_revision(from.revision());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateProResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateProResponse::CopyFrom(const UpdateProResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateProResponse::IsInitialized() const {
  
  return true;
}

void UpdateProResponse::Swap(UpdateProResponse* other) {
  if (other != this) {
    std::swap(error_num_, other->error_num_);
    std::swap(revision_, other->revision_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateProResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateProResponse_descriptor_;
  metadata.reflection = UpdateProResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateProDone::kSessionIdFieldNumber;
const int UpdateProDone::kStatusFieldNumber;
const int UpdateProDone::kAppFieldNumber;
const int UpdateProDone::kProcessorNameFieldNumber;
const int UpdateProDone::kRevisionFieldNumber;
#endif  // !_MSC_VER

UpdateProDone::UpdateProDone()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateProDone::InitAsDefaultInstance() {
  app_ = const_cast< ::dstream::Application*>(&::dstream::Application::default_instance());
}

UpdateProDone::UpdateProDone(const UpdateProDone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateProDone::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = GOOGLE_ULONGLONG(0);
  status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  app_ = NULL;
  processor_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  revision_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateProDone::~UpdateProDone() {
  SharedDtor();
}

void UpdateProDone::SharedDtor() {
  if (status_ != &::google::protobuf::internal::kEmptyString) {
    delete status_;
  }
  if (processor_name_ != &::google::protobuf::internal::kEmptyString) {
    delete processor_name_;
  }
  if (this != default_instance_) {
    delete app_;
  }
}

void UpdateProDone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateProDone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateProDone_descriptor_;
}

const UpdateProDone& UpdateProDone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pm_5fclient_5frpc_2eproto();  return *default_instance_;
}

UpdateProDone* UpdateProDone::default_instance_ = NULL;

UpdateProDone* UpdateProDone::New() const {
  return new UpdateProDone;
}

void UpdateProDone::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = GOOGLE_ULONGLONG(0);
    if (has_status()) {
      if (status_ != &::google::protobuf::internal::kEmptyString) {
        status_->clear();
      }
    }
    if (has_app()) {
      if (app_ != NULL) app_->::dstream::Application::Clear();
    }
    if (has_processor_name()) {
      if (processor_name_ != &::google::protobuf::internal::kEmptyString) {
        processor_name_->clear();
      }
    }
    revision_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateProDone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_status;
        break;
      }
      
      // optional string status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_app;
        break;
      }
      
      // optional .dstream.Application app = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_processor_name;
        break;
      }
      
      // optional string processor_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_processor_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_processor_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->processor_name().data(), this->processor_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_revision;
        break;
      }
      
      // optional uint32 revision = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_revision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &revision_)));
          set_has_revision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateProDone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 session_id = 1;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->session_id(), output);
  }
  
  // optional string status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->status(), output);
  }
  
  // optional .dstream.Application app = 3;
  if (has_app()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->app(), output);
  }
  
  // optional string processor_name = 4;
  if (has_processor_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->processor_name().data(), this->processor_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->processor_name(), output);
  }
  
  // optional uint32 revision = 5;
  if (has_revision()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->revision(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateProDone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 session_id = 1;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->session_id(), target);
  }
  
  // optional string status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->status(), target);
  }
  
  // optional .dstream.Application app = 3;
  if (has_app()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->app(), target);
  }
  
  // optional string processor_name = 4;
  if (has_processor_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->processor_name().data(), this->processor_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->processor_name(), target);
  }
  
  // optional uint32 revision = 5;
  if (has_revision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->revision(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateProDone::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 session_id = 1;
    if (has_session_id()) {
      total_size += 1 + 8;
    }
    
    // optional string status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->status());
    }
    
    // optional .dstream.Application app = 3;
    if (has_app()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->app());
    }
    
    // optional string processor_name = 4;
    if (has_processor_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->processor_name());
    }
    
    // optional uint32 revision = 5;
    if (has_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->revision());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateProDone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateProDone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateProDone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateProDone::MergeFrom(const UpdateProDone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_app()) {
      mutable_app()->::dstream::Application::MergeFrom(from.app());
    }
    if (from.has_processor_name()) {
      set_processor_name(from.processor_name());
    }
    if (from.has_revision()) {
      set_revision(from.revision());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateProDone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateProDone::CopyFrom(const UpdateProDone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateProDone::IsInitialized() const {
  
  return true;
}

void UpdateProDone::Swap(UpdateProDone* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(status_, other->status_);
    std::swap(app_, other->app_);
    std::swap(processor_name_, other->processor_name_);
    std::swap(revision_, other->revision_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateProDone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateProDone_descriptor_;
  metadata.reflection = UpdateProDone_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* BlackListOperationRequest_Operation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlackListOperationRequest_Operation_descriptor_;
}
bool BlackListOperationRequest_Operation_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BlackListOperationRequest_Operation BlackListOperationRequest::GET;
const BlackListOperationRequest_Operation BlackListOperationRequest::GET_ALL;
const BlackListOperationRequest_Operation BlackListOperationRequest::ERASE;
const BlackListOperationRequest_Operation BlackListOperationRequest::CLEAR;
const BlackListOperationRequest_Operation BlackListOperationRequest::Operation_MIN;
const BlackListOperationRequest_Operation BlackListOperationRequest::Operation_MAX;
const int BlackListOperationRequest::Operation_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BlackListOperationRequest::kPeIdFieldNumber;
const int BlackListOperationRequest::kOperationFieldNumber;
#endif  // !_MSC_VER

BlackListOperationRequest::BlackListOperationRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlackListOperationRequest::InitAsDefaultInstance() {
}

BlackListOperationRequest::BlackListOperationRequest(const BlackListOperationRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlackListOperationRequest::SharedCtor() {
  _cached_size_ = 0;
  operation_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlackListOperationRequest::~BlackListOperationRequest() {
  SharedDtor();
}

void BlackListOperationRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlackListOperationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlackListOperationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlackListOperationRequest_descriptor_;
}

const BlackListOperationRequest& BlackListOperationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pm_5fclient_5frpc_2eproto();  return *default_instance_;
}

BlackListOperationRequest* BlackListOperationRequest::default_instance_ = NULL;

BlackListOperationRequest* BlackListOperationRequest::New() const {
  return new BlackListOperationRequest;
}

void BlackListOperationRequest::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    operation_ = 1;
  }
  pe_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlackListOperationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dstream.PEID pe_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pe_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pe_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pe_id;
        if (input->ExpectTag(16)) goto parse_operation;
        break;
      }
      
      // optional .dstream.BlackListOperationRequest.Operation operation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dstream::BlackListOperationRequest_Operation_IsValid(value)) {
            set_operation(static_cast< ::dstream::BlackListOperationRequest_Operation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlackListOperationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .dstream.PEID pe_id = 1;
  for (int i = 0; i < this->pe_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pe_id(i), output);
  }
  
  // optional .dstream.BlackListOperationRequest.Operation operation = 2;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->operation(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlackListOperationRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .dstream.PEID pe_id = 1;
  for (int i = 0; i < this->pe_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pe_id(i), target);
  }
  
  // optional .dstream.BlackListOperationRequest.Operation operation = 2;
  if (has_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->operation(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlackListOperationRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .dstream.BlackListOperationRequest.Operation operation = 2;
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
    }
    
  }
  // repeated .dstream.PEID pe_id = 1;
  total_size += 1 * this->pe_id_size();
  for (int i = 0; i < this->pe_id_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pe_id(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlackListOperationRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlackListOperationRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlackListOperationRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlackListOperationRequest::MergeFrom(const BlackListOperationRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  pe_id_.MergeFrom(from.pe_id_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_operation()) {
      set_operation(from.operation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlackListOperationRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlackListOperationRequest::CopyFrom(const BlackListOperationRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlackListOperationRequest::IsInitialized() const {
  
  return true;
}

void BlackListOperationRequest::Swap(BlackListOperationRequest* other) {
  if (other != this) {
    pe_id_.Swap(&other->pe_id_);
    std::swap(operation_, other->operation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlackListOperationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlackListOperationRequest_descriptor_;
  metadata.reflection = BlackListOperationRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlackListOperationResponse::kPePnBlacklistFieldNumber;
#endif  // !_MSC_VER

BlackListOperationResponse::BlackListOperationResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlackListOperationResponse::InitAsDefaultInstance() {
}

BlackListOperationResponse::BlackListOperationResponse(const BlackListOperationResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlackListOperationResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlackListOperationResponse::~BlackListOperationResponse() {
  SharedDtor();
}

void BlackListOperationResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlackListOperationResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlackListOperationResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlackListOperationResponse_descriptor_;
}

const BlackListOperationResponse& BlackListOperationResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pm_5fclient_5frpc_2eproto();  return *default_instance_;
}

BlackListOperationResponse* BlackListOperationResponse::default_instance_ = NULL;

BlackListOperationResponse* BlackListOperationResponse::New() const {
  return new BlackListOperationResponse;
}

void BlackListOperationResponse::Clear() {
  pe_pn_blacklist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlackListOperationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dstream.PEPNBlackList pe_pn_blacklist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pe_pn_blacklist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pe_pn_blacklist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pe_pn_blacklist;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlackListOperationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .dstream.PEPNBlackList pe_pn_blacklist = 1;
  for (int i = 0; i < this->pe_pn_blacklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pe_pn_blacklist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlackListOperationResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .dstream.PEPNBlackList pe_pn_blacklist = 1;
  for (int i = 0; i < this->pe_pn_blacklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pe_pn_blacklist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlackListOperationResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .dstream.PEPNBlackList pe_pn_blacklist = 1;
  total_size += 1 * this->pe_pn_blacklist_size();
  for (int i = 0; i < this->pe_pn_blacklist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pe_pn_blacklist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlackListOperationResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlackListOperationResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlackListOperationResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlackListOperationResponse::MergeFrom(const BlackListOperationResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  pe_pn_blacklist_.MergeFrom(from.pe_pn_blacklist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlackListOperationResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlackListOperationResponse::CopyFrom(const BlackListOperationResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlackListOperationResponse::IsInitialized() const {
  
  return true;
}

void BlackListOperationResponse::Swap(BlackListOperationResponse* other) {
  if (other != this) {
    pe_pn_blacklist_.Swap(&other->pe_pn_blacklist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlackListOperationResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlackListOperationResponse_descriptor_;
  metadata.reflection = BlackListOperationResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dstream

// @@protoc_insertion_point(global_scope)
