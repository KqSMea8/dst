// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dstream_proto_common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dstream {

namespace {

const ::google::protobuf::Descriptor* ProcessorID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcessorID_reflection_ = NULL;
const ::google::protobuf::Descriptor* PNID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PNID_reflection_ = NULL;
const ::google::protobuf::Descriptor* PEID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PEID_reflection_ = NULL;
const ::google::protobuf::Descriptor* Resource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Resource_reflection_ = NULL;
const ::google::protobuf::Descriptor* PNResourceStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PNResourceStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* PEPNBlackList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PEPNBlackList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_dstream_5fproto_5fcommon_2eproto() {
  protobuf_AddDesc_dstream_5fproto_5fcommon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dstream_proto_common.proto");
  GOOGLE_CHECK(file != NULL);
  ProcessorID_descriptor_ = file->message_type(0);
  static const int ProcessorID_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorID, id_),
  };
  ProcessorID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProcessorID_descriptor_,
      ProcessorID::default_instance_,
      ProcessorID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProcessorID));
  PNID_descriptor_ = file->message_type(1);
  static const int PNID_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNID, id_),
  };
  PNID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PNID_descriptor_,
      PNID::default_instance_,
      PNID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PNID));
  PEID_descriptor_ = file->message_type(2);
  static const int PEID_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEID, id_),
  };
  PEID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PEID_descriptor_,
      PEID::default_instance_,
      PEID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PEID));
  Resource_descriptor_ = file->message_type(3);
  static const int Resource_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, cpu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, memory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, network_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, disk_),
  };
  Resource_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Resource_descriptor_,
      Resource::default_instance_,
      Resource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Resource));
  PNResourceStatus_descriptor_ = file->message_type(4);
  static const int PNResourceStatus_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNResourceStatus, total_resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNResourceStatus, cpu_utilize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNResourceStatus, memory_utilize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNResourceStatus, network_utilize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNResourceStatus, disk_utilize_),
  };
  PNResourceStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PNResourceStatus_descriptor_,
      PNResourceStatus::default_instance_,
      PNResourceStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNResourceStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNResourceStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PNResourceStatus));
  PEPNBlackList_descriptor_ = file->message_type(5);
  static const int PEPNBlackList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEPNBlackList, pe_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEPNBlackList, pn_id_),
  };
  PEPNBlackList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PEPNBlackList_descriptor_,
      PEPNBlackList::default_instance_,
      PEPNBlackList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEPNBlackList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEPNBlackList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PEPNBlackList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dstream_5fproto_5fcommon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProcessorID_descriptor_, &ProcessorID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PNID_descriptor_, &PNID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PEID_descriptor_, &PEID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Resource_descriptor_, &Resource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PNResourceStatus_descriptor_, &PNResourceStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PEPNBlackList_descriptor_, &PEPNBlackList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dstream_5fproto_5fcommon_2eproto() {
  delete ProcessorID::default_instance_;
  delete ProcessorID_reflection_;
  delete PNID::default_instance_;
  delete PNID_reflection_;
  delete PEID::default_instance_;
  delete PEID_reflection_;
  delete Resource::default_instance_;
  delete Resource_reflection_;
  delete PNResourceStatus::default_instance_;
  delete PNResourceStatus_reflection_;
  delete PEPNBlackList::default_instance_;
  delete PEPNBlackList_reflection_;
}

void protobuf_AddDesc_dstream_5fproto_5fcommon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032dstream_proto_common.proto\022\007dstream\"\031\n"
    "\013ProcessorID\022\n\n\002id\030\001 \001(\006\"\022\n\004PNID\022\n\n\002id\030\001"
    " \001(\t\"\022\n\004PEID\022\n\n\002id\030\001 \001(\006\"F\n\010Resource\022\013\n\003"
    "cpu\030\001 \001(\002\022\016\n\006memory\030\002 \001(\006\022\017\n\007network\030\003 \001"
    "(\006\022\014\n\004disk\030\004 \001(\006\"\231\001\n\020PNResourceStatus\022)\n"
    "\016total_resource\030\001 \001(\0132\021.dstream.Resource"
    "\022\023\n\013cpu_utilize\030\002 \001(\002\022\026\n\016memory_utilize\030"
    "\004 \001(\002\022\027\n\017network_utilize\030\006 \001(\002\022\024\n\014disk_u"
    "tilize\030\010 \001(\002\"K\n\rPEPNBlackList\022\034\n\005pe_id\030\001"
    " \001(\0132\r.dstream.PEID\022\034\n\005pn_id\030\002 \003(\0132\r.dst"
    "ream.PNID", 409);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dstream_proto_common.proto", &protobuf_RegisterTypes);
  ProcessorID::default_instance_ = new ProcessorID();
  PNID::default_instance_ = new PNID();
  PEID::default_instance_ = new PEID();
  Resource::default_instance_ = new Resource();
  PNResourceStatus::default_instance_ = new PNResourceStatus();
  PEPNBlackList::default_instance_ = new PEPNBlackList();
  ProcessorID::default_instance_->InitAsDefaultInstance();
  PNID::default_instance_->InitAsDefaultInstance();
  PEID::default_instance_->InitAsDefaultInstance();
  Resource::default_instance_->InitAsDefaultInstance();
  PNResourceStatus::default_instance_->InitAsDefaultInstance();
  PEPNBlackList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dstream_5fproto_5fcommon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dstream_5fproto_5fcommon_2eproto {
  StaticDescriptorInitializer_dstream_5fproto_5fcommon_2eproto() {
    protobuf_AddDesc_dstream_5fproto_5fcommon_2eproto();
  }
} static_descriptor_initializer_dstream_5fproto_5fcommon_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ProcessorID::kIdFieldNumber;
#endif  // !_MSC_VER

ProcessorID::ProcessorID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProcessorID::InitAsDefaultInstance() {
}

ProcessorID::ProcessorID(const ProcessorID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProcessorID::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProcessorID::~ProcessorID() {
  SharedDtor();
}

void ProcessorID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProcessorID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessorID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessorID_descriptor_;
}

const ProcessorID& ProcessorID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dstream_5fproto_5fcommon_2eproto();  return *default_instance_;
}

ProcessorID* ProcessorID::default_instance_ = NULL;

ProcessorID* ProcessorID::New() const {
  return new ProcessorID;
}

void ProcessorID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProcessorID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProcessorID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProcessorID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProcessorID::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 id = 1;
    if (has_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessorID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProcessorID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProcessorID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProcessorID::MergeFrom(const ProcessorID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProcessorID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessorID::CopyFrom(const ProcessorID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessorID::IsInitialized() const {
  
  return true;
}

void ProcessorID::Swap(ProcessorID* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProcessorID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcessorID_descriptor_;
  metadata.reflection = ProcessorID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PNID::kIdFieldNumber;
#endif  // !_MSC_VER

PNID::PNID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PNID::InitAsDefaultInstance() {
}

PNID::PNID(const PNID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PNID::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PNID::~PNID() {
  SharedDtor();
}

void PNID::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void PNID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PNID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PNID_descriptor_;
}

const PNID& PNID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dstream_5fproto_5fcommon_2eproto();  return *default_instance_;
}

PNID* PNID::default_instance_ = NULL;

PNID* PNID::New() const {
  return new PNID;
}

void PNID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PNID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PNID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PNID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PNID::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PNID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PNID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PNID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PNID::MergeFrom(const PNID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PNID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PNID::CopyFrom(const PNID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PNID::IsInitialized() const {
  
  return true;
}

void PNID::Swap(PNID* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PNID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PNID_descriptor_;
  metadata.reflection = PNID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PEID::kIdFieldNumber;
#endif  // !_MSC_VER

PEID::PEID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PEID::InitAsDefaultInstance() {
}

PEID::PEID(const PEID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PEID::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PEID::~PEID() {
  SharedDtor();
}

void PEID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PEID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PEID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PEID_descriptor_;
}

const PEID& PEID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dstream_5fproto_5fcommon_2eproto();  return *default_instance_;
}

PEID* PEID::default_instance_ = NULL;

PEID* PEID::New() const {
  return new PEID;
}

void PEID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PEID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PEID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PEID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PEID::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 id = 1;
    if (has_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PEID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PEID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PEID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PEID::MergeFrom(const PEID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PEID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PEID::CopyFrom(const PEID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PEID::IsInitialized() const {
  
  return true;
}

void PEID::Swap(PEID* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PEID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PEID_descriptor_;
  metadata.reflection = PEID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Resource::kCpuFieldNumber;
const int Resource::kMemoryFieldNumber;
const int Resource::kNetworkFieldNumber;
const int Resource::kDiskFieldNumber;
#endif  // !_MSC_VER

Resource::Resource()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Resource::InitAsDefaultInstance() {
}

Resource::Resource(const Resource& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Resource::SharedCtor() {
  _cached_size_ = 0;
  cpu_ = 0;
  memory_ = GOOGLE_ULONGLONG(0);
  network_ = GOOGLE_ULONGLONG(0);
  disk_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Resource::~Resource() {
  SharedDtor();
}

void Resource::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Resource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Resource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Resource_descriptor_;
}

const Resource& Resource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dstream_5fproto_5fcommon_2eproto();  return *default_instance_;
}

Resource* Resource::default_instance_ = NULL;

Resource* Resource::New() const {
  return new Resource;
}

void Resource::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cpu_ = 0;
    memory_ = GOOGLE_ULONGLONG(0);
    network_ = GOOGLE_ULONGLONG(0);
    disk_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Resource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float cpu = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_)));
          set_has_cpu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_memory;
        break;
      }
      
      // optional fixed64 memory = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_memory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &memory_)));
          set_has_memory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_network;
        break;
      }
      
      // optional fixed64 network = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_network:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &network_)));
          set_has_network();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_disk;
        break;
      }
      
      // optional fixed64 disk = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_disk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &disk_)));
          set_has_disk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Resource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float cpu = 1;
  if (has_cpu()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->cpu(), output);
  }
  
  // optional fixed64 memory = 2;
  if (has_memory()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->memory(), output);
  }
  
  // optional fixed64 network = 3;
  if (has_network()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->network(), output);
  }
  
  // optional fixed64 disk = 4;
  if (has_disk()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->disk(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Resource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float cpu = 1;
  if (has_cpu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->cpu(), target);
  }
  
  // optional fixed64 memory = 2;
  if (has_memory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->memory(), target);
  }
  
  // optional fixed64 network = 3;
  if (has_network()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->network(), target);
  }
  
  // optional fixed64 disk = 4;
  if (has_disk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->disk(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Resource::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float cpu = 1;
    if (has_cpu()) {
      total_size += 1 + 4;
    }
    
    // optional fixed64 memory = 2;
    if (has_memory()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 network = 3;
    if (has_network()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 disk = 4;
    if (has_disk()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Resource::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Resource* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Resource*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Resource::MergeFrom(const Resource& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cpu()) {
      set_cpu(from.cpu());
    }
    if (from.has_memory()) {
      set_memory(from.memory());
    }
    if (from.has_network()) {
      set_network(from.network());
    }
    if (from.has_disk()) {
      set_disk(from.disk());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Resource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Resource::CopyFrom(const Resource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resource::IsInitialized() const {
  
  return true;
}

void Resource::Swap(Resource* other) {
  if (other != this) {
    std::swap(cpu_, other->cpu_);
    std::swap(memory_, other->memory_);
    std::swap(network_, other->network_);
    std::swap(disk_, other->disk_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Resource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Resource_descriptor_;
  metadata.reflection = Resource_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PNResourceStatus::kTotalResourceFieldNumber;
const int PNResourceStatus::kCpuUtilizeFieldNumber;
const int PNResourceStatus::kMemoryUtilizeFieldNumber;
const int PNResourceStatus::kNetworkUtilizeFieldNumber;
const int PNResourceStatus::kDiskUtilizeFieldNumber;
#endif  // !_MSC_VER

PNResourceStatus::PNResourceStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PNResourceStatus::InitAsDefaultInstance() {
  total_resource_ = const_cast< ::dstream::Resource*>(&::dstream::Resource::default_instance());
}

PNResourceStatus::PNResourceStatus(const PNResourceStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PNResourceStatus::SharedCtor() {
  _cached_size_ = 0;
  total_resource_ = NULL;
  cpu_utilize_ = 0;
  memory_utilize_ = 0;
  network_utilize_ = 0;
  disk_utilize_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PNResourceStatus::~PNResourceStatus() {
  SharedDtor();
}

void PNResourceStatus::SharedDtor() {
  if (this != default_instance_) {
    delete total_resource_;
  }
}

void PNResourceStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PNResourceStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PNResourceStatus_descriptor_;
}

const PNResourceStatus& PNResourceStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dstream_5fproto_5fcommon_2eproto();  return *default_instance_;
}

PNResourceStatus* PNResourceStatus::default_instance_ = NULL;

PNResourceStatus* PNResourceStatus::New() const {
  return new PNResourceStatus;
}

void PNResourceStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_total_resource()) {
      if (total_resource_ != NULL) total_resource_->::dstream::Resource::Clear();
    }
    cpu_utilize_ = 0;
    memory_utilize_ = 0;
    network_utilize_ = 0;
    disk_utilize_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PNResourceStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dstream.Resource total_resource = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_total_resource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_cpu_utilize;
        break;
      }
      
      // optional float cpu_utilize = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cpu_utilize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_utilize_)));
          set_has_cpu_utilize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_memory_utilize;
        break;
      }
      
      // optional float memory_utilize = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_memory_utilize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &memory_utilize_)));
          set_has_memory_utilize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_network_utilize;
        break;
      }
      
      // optional float network_utilize = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_network_utilize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &network_utilize_)));
          set_has_network_utilize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_disk_utilize;
        break;
      }
      
      // optional float disk_utilize = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_disk_utilize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &disk_utilize_)));
          set_has_disk_utilize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PNResourceStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dstream.Resource total_resource = 1;
  if (has_total_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->total_resource(), output);
  }
  
  // optional float cpu_utilize = 2;
  if (has_cpu_utilize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->cpu_utilize(), output);
  }
  
  // optional float memory_utilize = 4;
  if (has_memory_utilize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->memory_utilize(), output);
  }
  
  // optional float network_utilize = 6;
  if (has_network_utilize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->network_utilize(), output);
  }
  
  // optional float disk_utilize = 8;
  if (has_disk_utilize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->disk_utilize(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PNResourceStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dstream.Resource total_resource = 1;
  if (has_total_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->total_resource(), target);
  }
  
  // optional float cpu_utilize = 2;
  if (has_cpu_utilize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->cpu_utilize(), target);
  }
  
  // optional float memory_utilize = 4;
  if (has_memory_utilize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->memory_utilize(), target);
  }
  
  // optional float network_utilize = 6;
  if (has_network_utilize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->network_utilize(), target);
  }
  
  // optional float disk_utilize = 8;
  if (has_disk_utilize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->disk_utilize(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PNResourceStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dstream.Resource total_resource = 1;
    if (has_total_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->total_resource());
    }
    
    // optional float cpu_utilize = 2;
    if (has_cpu_utilize()) {
      total_size += 1 + 4;
    }
    
    // optional float memory_utilize = 4;
    if (has_memory_utilize()) {
      total_size += 1 + 4;
    }
    
    // optional float network_utilize = 6;
    if (has_network_utilize()) {
      total_size += 1 + 4;
    }
    
    // optional float disk_utilize = 8;
    if (has_disk_utilize()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PNResourceStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PNResourceStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PNResourceStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PNResourceStatus::MergeFrom(const PNResourceStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_resource()) {
      mutable_total_resource()->::dstream::Resource::MergeFrom(from.total_resource());
    }
    if (from.has_cpu_utilize()) {
      set_cpu_utilize(from.cpu_utilize());
    }
    if (from.has_memory_utilize()) {
      set_memory_utilize(from.memory_utilize());
    }
    if (from.has_network_utilize()) {
      set_network_utilize(from.network_utilize());
    }
    if (from.has_disk_utilize()) {
      set_disk_utilize(from.disk_utilize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PNResourceStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PNResourceStatus::CopyFrom(const PNResourceStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PNResourceStatus::IsInitialized() const {
  
  return true;
}

void PNResourceStatus::Swap(PNResourceStatus* other) {
  if (other != this) {
    std::swap(total_resource_, other->total_resource_);
    std::swap(cpu_utilize_, other->cpu_utilize_);
    std::swap(memory_utilize_, other->memory_utilize_);
    std::swap(network_utilize_, other->network_utilize_);
    std::swap(disk_utilize_, other->disk_utilize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PNResourceStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PNResourceStatus_descriptor_;
  metadata.reflection = PNResourceStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PEPNBlackList::kPeIdFieldNumber;
const int PEPNBlackList::kPnIdFieldNumber;
#endif  // !_MSC_VER

PEPNBlackList::PEPNBlackList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PEPNBlackList::InitAsDefaultInstance() {
  pe_id_ = const_cast< ::dstream::PEID*>(&::dstream::PEID::default_instance());
}

PEPNBlackList::PEPNBlackList(const PEPNBlackList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PEPNBlackList::SharedCtor() {
  _cached_size_ = 0;
  pe_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PEPNBlackList::~PEPNBlackList() {
  SharedDtor();
}

void PEPNBlackList::SharedDtor() {
  if (this != default_instance_) {
    delete pe_id_;
  }
}

void PEPNBlackList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PEPNBlackList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PEPNBlackList_descriptor_;
}

const PEPNBlackList& PEPNBlackList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dstream_5fproto_5fcommon_2eproto();  return *default_instance_;
}

PEPNBlackList* PEPNBlackList::default_instance_ = NULL;

PEPNBlackList* PEPNBlackList::New() const {
  return new PEPNBlackList;
}

void PEPNBlackList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pe_id()) {
      if (pe_id_ != NULL) pe_id_->::dstream::PEID::Clear();
    }
  }
  pn_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PEPNBlackList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dstream.PEID pe_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pe_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pn_id;
        break;
      }
      
      // repeated .dstream.PNID pn_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pn_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pn_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pn_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PEPNBlackList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dstream.PEID pe_id = 1;
  if (has_pe_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pe_id(), output);
  }
  
  // repeated .dstream.PNID pn_id = 2;
  for (int i = 0; i < this->pn_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pn_id(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PEPNBlackList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dstream.PEID pe_id = 1;
  if (has_pe_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pe_id(), target);
  }
  
  // repeated .dstream.PNID pn_id = 2;
  for (int i = 0; i < this->pn_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pn_id(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PEPNBlackList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dstream.PEID pe_id = 1;
    if (has_pe_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pe_id());
    }
    
  }
  // repeated .dstream.PNID pn_id = 2;
  total_size += 1 * this->pn_id_size();
  for (int i = 0; i < this->pn_id_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pn_id(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PEPNBlackList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PEPNBlackList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PEPNBlackList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PEPNBlackList::MergeFrom(const PEPNBlackList& from) {
  GOOGLE_CHECK_NE(&from, this);
  pn_id_.MergeFrom(from.pn_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pe_id()) {
      mutable_pe_id()->::dstream::PEID::MergeFrom(from.pe_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PEPNBlackList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PEPNBlackList::CopyFrom(const PEPNBlackList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PEPNBlackList::IsInitialized() const {
  
  return true;
}

void PEPNBlackList::Swap(PEPNBlackList* other) {
  if (other != this) {
    std::swap(pe_id_, other->pe_id_);
    pn_id_.Swap(&other->pn_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PEPNBlackList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PEPNBlackList_descriptor_;
  metadata.reflection = PEPNBlackList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dstream

// @@protoc_insertion_point(global_scope)
