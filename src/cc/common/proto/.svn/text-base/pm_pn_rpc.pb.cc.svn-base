// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pm_pn_rpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dstream {

namespace {

const ::google::protobuf::Descriptor* CreatePEMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreatePEMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreatePEResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreatePEResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PEOperationMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PEOperationMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PEOperationMessage_OperationType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PEOperationResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PEOperationResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* BackupPEStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BackupPEStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* FailPE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FailPE_reflection_ = NULL;
const ::google::protobuf::Descriptor* TupleQueue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TupleQueue_reflection_ = NULL;
const ::google::protobuf::Descriptor* PNReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PNReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pm_5fpn_5frpc_2eproto() {
  protobuf_AddDesc_pm_5fpn_5frpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pm_pn_rpc.proto");
  GOOGLE_CHECK(file != NULL);
  CreatePEMessage_descriptor_ = file->message_type(0);
  static const int CreatePEMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePEMessage, app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePEMessage, pe_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePEMessage, processor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePEMessage, backup_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePEMessage, last_assign_time_),
  };
  CreatePEMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreatePEMessage_descriptor_,
      CreatePEMessage::default_instance_,
      CreatePEMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePEMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePEMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreatePEMessage));
  CreatePEResult_descriptor_ = file->message_type(1);
  static const int CreatePEResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePEResult, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePEResult, app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePEResult, pe_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePEResult, backup_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePEResult, res_),
  };
  CreatePEResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreatePEResult_descriptor_,
      CreatePEResult::default_instance_,
      CreatePEResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePEResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePEResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreatePEResult));
  PEOperationMessage_descriptor_ = file->message_type(2);
  static const int PEOperationMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEOperationMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEOperationMessage, app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEOperationMessage, pe_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEOperationMessage, backup_pe_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEOperationMessage, revision_),
  };
  PEOperationMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PEOperationMessage_descriptor_,
      PEOperationMessage::default_instance_,
      PEOperationMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEOperationMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEOperationMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PEOperationMessage));
  PEOperationMessage_OperationType_descriptor_ = PEOperationMessage_descriptor_->enum_type(0);
  PEOperationResult_descriptor_ = file->message_type(3);
  static const int PEOperationResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEOperationResult, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEOperationResult, app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEOperationResult, pe_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEOperationResult, backup_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEOperationResult, res_),
  };
  PEOperationResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PEOperationResult_descriptor_,
      PEOperationResult::default_instance_,
      PEOperationResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEOperationResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEOperationResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PEOperationResult));
  BackupPEStatus_descriptor_ = file->message_type(4);
  static const int BackupPEStatus_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupPEStatus, app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupPEStatus, pe_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupPEStatus, backup_pd_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupPEStatus, cpu_used_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupPEStatus, memory_used_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupPEStatus, network_used_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupPEStatus, disk_used_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupPEStatus, tuples_processed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupPEStatus, metric_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupPEStatus, metric_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupPEStatus, revision_),
  };
  BackupPEStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BackupPEStatus_descriptor_,
      BackupPEStatus::default_instance_,
      BackupPEStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupPEStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupPEStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BackupPEStatus));
  FailPE_descriptor_ = file->message_type(5);
  static const int FailPE_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FailPE, app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FailPE, pe_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FailPE, backup_pe_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FailPE, revision_),
  };
  FailPE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FailPE_descriptor_,
      FailPE::default_instance_,
      FailPE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FailPE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FailPE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FailPE));
  TupleQueue_descriptor_ = file->message_type(6);
  static const int TupleQueue_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TupleQueue, queue_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TupleQueue, pe_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TupleQueue, drop_tuples_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TupleQueue, buffer_tuples_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TupleQueue, memory_used_),
  };
  TupleQueue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TupleQueue_descriptor_,
      TupleQueue::default_instance_,
      TupleQueue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TupleQueue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TupleQueue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TupleQueue));
  PNReport_descriptor_ = file->message_type(7);
  static const int PNReport_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNReport, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNReport, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNReport, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNReport, fails_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNReport, queues_),
  };
  PNReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PNReport_descriptor_,
      PNReport::default_instance_,
      PNReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PNReport));
  ReportResponse_descriptor_ = file->message_type(8);
  static const int ReportResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportResponse, next_report_interval_),
  };
  ReportResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportResponse_descriptor_,
      ReportResponse::default_instance_,
      ReportResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pm_5fpn_5frpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreatePEMessage_descriptor_, &CreatePEMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreatePEResult_descriptor_, &CreatePEResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PEOperationMessage_descriptor_, &PEOperationMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PEOperationResult_descriptor_, &PEOperationResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BackupPEStatus_descriptor_, &BackupPEStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FailPE_descriptor_, &FailPE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TupleQueue_descriptor_, &TupleQueue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PNReport_descriptor_, &PNReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportResponse_descriptor_, &ReportResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pm_5fpn_5frpc_2eproto() {
  delete CreatePEMessage::default_instance_;
  delete CreatePEMessage_reflection_;
  delete CreatePEResult::default_instance_;
  delete CreatePEResult_reflection_;
  delete PEOperationMessage::default_instance_;
  delete PEOperationMessage_reflection_;
  delete PEOperationResult::default_instance_;
  delete PEOperationResult_reflection_;
  delete BackupPEStatus::default_instance_;
  delete BackupPEStatus_reflection_;
  delete FailPE::default_instance_;
  delete FailPE_reflection_;
  delete TupleQueue::default_instance_;
  delete TupleQueue_reflection_;
  delete PNReport::default_instance_;
  delete PNReport_reflection_;
  delete ReportResponse::default_instance_;
  delete ReportResponse_reflection_;
}

void protobuf_AddDesc_pm_5fpn_5frpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::dstream::protobuf_AddDesc_application_2eproto();
  ::dstream::protobuf_AddDesc_dstream_5fproto_5fcommon_2eproto();
  ::dstream::protobuf_AddDesc_pn_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017pm_pn_rpc.proto\022\007dstream\032\021application."
    "proto\032\032dstream_proto_common.proto\032\010pn.pr"
    "oto\"\270\001\n\017CreatePEMessage\022\036\n\006app_id\030\001 \001(\0132"
    "\016.dstream.AppID\022\034\n\005pe_id\030\002 \001(\0132\r.dstream"
    ".PEID\022%\n\tprocessor\030\003 \001(\0132\022.dstream.Proce"
    "ssor\022&\n\tbackup_id\030\004 \001(\0132\023.dstream.Backup"
    "PEID\022\030\n\020last_assign_time\030\005 \001(\006\"\236\001\n\016Creat"
    "ePEResult\022\031\n\002id\030\001 \001(\0132\r.dstream.PNID\022\036\n\006"
    "app_id\030\002 \001(\0132\016.dstream.AppID\022\034\n\005pe_id\030\003 "
    "\001(\0132\r.dstream.PEID\022&\n\tbackup_id\030\004 \001(\0132\023."
    "dstream.BackupPEID\022\013\n\003res\030\005 \001(\005\"\213\002\n\022PEOp"
    "erationMessage\0227\n\004type\030\001 \001(\0162).dstream.P"
    "EOperationMessage.OperationType\022\036\n\006app_i"
    "d\030\002 \001(\0132\016.dstream.AppID\022\034\n\005pe_id\030\003 \001(\0132\r"
    ".dstream.PEID\022)\n\014backup_pe_id\030\004 \001(\0132\023.ds"
    "tream.BackupPEID\022\020\n\010revision\030\005 \001(\r\"A\n\rOp"
    "erationType\022\010\n\004KILL\020\000\022\016\n\nSETPRIMARY\020\001\022\t\n"
    "\005QUERY\020\002\022\013\n\007RESTART\020\003\"\241\001\n\021PEOperationRes"
    "ult\022\031\n\002id\030\001 \001(\0132\r.dstream.PNID\022\036\n\006app_id"
    "\030\002 \001(\0132\016.dstream.AppID\022\034\n\005pe_id\030\003 \001(\0132\r."
    "dstream.PEID\022&\n\tbackup_id\030\004 \001(\0132\023.dstrea"
    "m.BackupPEID\022\013\n\003res\030\005 \001(\005\"\240\002\n\016BackupPESt"
    "atus\022\036\n\006app_id\030\001 \001(\0132\016.dstream.AppID\022\034\n\005"
    "pe_id\030\002 \001(\0132\r.dstream.PEID\022)\n\014backup_pd_"
    "id\030\003 \001(\0132\023.dstream.BackupPEID\022\020\n\010cpu_use"
    "d\030\004 \001(\002\022\023\n\013memory_used\030\005 \001(\r\022\024\n\014network_"
    "used\030\006 \001(\r\022\021\n\tdisk_used\030\007 \001(\r\022\030\n\020tuples_"
    "processed\030\010 \001(\004\022\023\n\013metric_name\030\t \003(\t\022\024\n\014"
    "metric_value\030\n \003(\t\022\020\n\010revision\030\013 \001(\r\"\203\001\n"
    "\006FailPE\022\036\n\006app_id\030\001 \001(\0132\016.dstream.AppID\022"
    "\034\n\005pe_id\030\002 \001(\0132\r.dstream.PEID\022)\n\014backup_"
    "pe_id\030\003 \001(\0132\023.dstream.BackupPEID\022\020\n\010revi"
    "sion\030\004 \001(\r\"}\n\nTupleQueue\022\020\n\010queue_id\030\001 \001"
    "(\r\022\034\n\005pe_id\030\002 \001(\0132\r.dstream.PEID\022\023\n\013drop"
    "_tuples\030\003 \001(\r\022\025\n\rbuffer_tuples\030\004 \001(\r\022\023\n\013"
    "memory_used\030\005 \001(\r\"\300\001\n\010PNReport\022\031\n\002id\030\001 \001"
    "(\0132\r.dstream.PNID\022+\n\010resource\030\002 \001(\0132\031.ds"
    "tream.PNResourceStatus\022\'\n\006status\030\003 \003(\0132\027"
    ".dstream.BackupPEStatus\022\036\n\005fails\030\004 \003(\0132\017"
    ".dstream.FailPE\022#\n\006queues\030\005 \003(\0132\023.dstrea"
    "m.TupleQueue\".\n\016ReportResponse\022\034\n\024next_r"
    "eport_interval\030\001 \001(\007", 1660);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pm_pn_rpc.proto", &protobuf_RegisterTypes);
  CreatePEMessage::default_instance_ = new CreatePEMessage();
  CreatePEResult::default_instance_ = new CreatePEResult();
  PEOperationMessage::default_instance_ = new PEOperationMessage();
  PEOperationResult::default_instance_ = new PEOperationResult();
  BackupPEStatus::default_instance_ = new BackupPEStatus();
  FailPE::default_instance_ = new FailPE();
  TupleQueue::default_instance_ = new TupleQueue();
  PNReport::default_instance_ = new PNReport();
  ReportResponse::default_instance_ = new ReportResponse();
  CreatePEMessage::default_instance_->InitAsDefaultInstance();
  CreatePEResult::default_instance_->InitAsDefaultInstance();
  PEOperationMessage::default_instance_->InitAsDefaultInstance();
  PEOperationResult::default_instance_->InitAsDefaultInstance();
  BackupPEStatus::default_instance_->InitAsDefaultInstance();
  FailPE::default_instance_->InitAsDefaultInstance();
  TupleQueue::default_instance_->InitAsDefaultInstance();
  PNReport::default_instance_->InitAsDefaultInstance();
  ReportResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pm_5fpn_5frpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pm_5fpn_5frpc_2eproto {
  StaticDescriptorInitializer_pm_5fpn_5frpc_2eproto() {
    protobuf_AddDesc_pm_5fpn_5frpc_2eproto();
  }
} static_descriptor_initializer_pm_5fpn_5frpc_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int CreatePEMessage::kAppIdFieldNumber;
const int CreatePEMessage::kPeIdFieldNumber;
const int CreatePEMessage::kProcessorFieldNumber;
const int CreatePEMessage::kBackupIdFieldNumber;
const int CreatePEMessage::kLastAssignTimeFieldNumber;
#endif  // !_MSC_VER

CreatePEMessage::CreatePEMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreatePEMessage::InitAsDefaultInstance() {
  app_id_ = const_cast< ::dstream::AppID*>(&::dstream::AppID::default_instance());
  pe_id_ = const_cast< ::dstream::PEID*>(&::dstream::PEID::default_instance());
  processor_ = const_cast< ::dstream::Processor*>(&::dstream::Processor::default_instance());
  backup_id_ = const_cast< ::dstream::BackupPEID*>(&::dstream::BackupPEID::default_instance());
}

CreatePEMessage::CreatePEMessage(const CreatePEMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreatePEMessage::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = NULL;
  pe_id_ = NULL;
  processor_ = NULL;
  backup_id_ = NULL;
  last_assign_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreatePEMessage::~CreatePEMessage() {
  SharedDtor();
}

void CreatePEMessage::SharedDtor() {
  if (this != default_instance_) {
    delete app_id_;
    delete pe_id_;
    delete processor_;
    delete backup_id_;
  }
}

void CreatePEMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreatePEMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreatePEMessage_descriptor_;
}

const CreatePEMessage& CreatePEMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pm_5fpn_5frpc_2eproto();  return *default_instance_;
}

CreatePEMessage* CreatePEMessage::default_instance_ = NULL;

CreatePEMessage* CreatePEMessage::New() const {
  return new CreatePEMessage;
}

void CreatePEMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_app_id()) {
      if (app_id_ != NULL) app_id_->::dstream::AppID::Clear();
    }
    if (has_pe_id()) {
      if (pe_id_ != NULL) pe_id_->::dstream::PEID::Clear();
    }
    if (has_processor()) {
      if (processor_ != NULL) processor_->::dstream::Processor::Clear();
    }
    if (has_backup_id()) {
      if (backup_id_ != NULL) backup_id_->::dstream::BackupPEID::Clear();
    }
    last_assign_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreatePEMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dstream.AppID app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pe_id;
        break;
      }
      
      // optional .dstream.PEID pe_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pe_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pe_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_processor;
        break;
      }
      
      // optional .dstream.Processor processor = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_processor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_processor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_backup_id;
        break;
      }
      
      // optional .dstream.BackupPEID backup_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_backup_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_backup_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_last_assign_time;
        break;
      }
      
      // optional fixed64 last_assign_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_last_assign_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &last_assign_time_)));
          set_has_last_assign_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreatePEMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dstream.AppID app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->app_id(), output);
  }
  
  // optional .dstream.PEID pe_id = 2;
  if (has_pe_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pe_id(), output);
  }
  
  // optional .dstream.Processor processor = 3;
  if (has_processor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->processor(), output);
  }
  
  // optional .dstream.BackupPEID backup_id = 4;
  if (has_backup_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->backup_id(), output);
  }
  
  // optional fixed64 last_assign_time = 5;
  if (has_last_assign_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->last_assign_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreatePEMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dstream.AppID app_id = 1;
  if (has_app_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->app_id(), target);
  }
  
  // optional .dstream.PEID pe_id = 2;
  if (has_pe_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pe_id(), target);
  }
  
  // optional .dstream.Processor processor = 3;
  if (has_processor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->processor(), target);
  }
  
  // optional .dstream.BackupPEID backup_id = 4;
  if (has_backup_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->backup_id(), target);
  }
  
  // optional fixed64 last_assign_time = 5;
  if (has_last_assign_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->last_assign_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreatePEMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dstream.AppID app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->app_id());
    }
    
    // optional .dstream.PEID pe_id = 2;
    if (has_pe_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pe_id());
    }
    
    // optional .dstream.Processor processor = 3;
    if (has_processor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->processor());
    }
    
    // optional .dstream.BackupPEID backup_id = 4;
    if (has_backup_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->backup_id());
    }
    
    // optional fixed64 last_assign_time = 5;
    if (has_last_assign_time()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreatePEMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreatePEMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreatePEMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreatePEMessage::MergeFrom(const CreatePEMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      mutable_app_id()->::dstream::AppID::MergeFrom(from.app_id());
    }
    if (from.has_pe_id()) {
      mutable_pe_id()->::dstream::PEID::MergeFrom(from.pe_id());
    }
    if (from.has_processor()) {
      mutable_processor()->::dstream::Processor::MergeFrom(from.processor());
    }
    if (from.has_backup_id()) {
      mutable_backup_id()->::dstream::BackupPEID::MergeFrom(from.backup_id());
    }
    if (from.has_last_assign_time()) {
      set_last_assign_time(from.last_assign_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreatePEMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatePEMessage::CopyFrom(const CreatePEMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatePEMessage::IsInitialized() const {
  
  return true;
}

void CreatePEMessage::Swap(CreatePEMessage* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(pe_id_, other->pe_id_);
    std::swap(processor_, other->processor_);
    std::swap(backup_id_, other->backup_id_);
    std::swap(last_assign_time_, other->last_assign_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreatePEMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreatePEMessage_descriptor_;
  metadata.reflection = CreatePEMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreatePEResult::kIdFieldNumber;
const int CreatePEResult::kAppIdFieldNumber;
const int CreatePEResult::kPeIdFieldNumber;
const int CreatePEResult::kBackupIdFieldNumber;
const int CreatePEResult::kResFieldNumber;
#endif  // !_MSC_VER

CreatePEResult::CreatePEResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreatePEResult::InitAsDefaultInstance() {
  id_ = const_cast< ::dstream::PNID*>(&::dstream::PNID::default_instance());
  app_id_ = const_cast< ::dstream::AppID*>(&::dstream::AppID::default_instance());
  pe_id_ = const_cast< ::dstream::PEID*>(&::dstream::PEID::default_instance());
  backup_id_ = const_cast< ::dstream::BackupPEID*>(&::dstream::BackupPEID::default_instance());
}

CreatePEResult::CreatePEResult(const CreatePEResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreatePEResult::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  app_id_ = NULL;
  pe_id_ = NULL;
  backup_id_ = NULL;
  res_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreatePEResult::~CreatePEResult() {
  SharedDtor();
}

void CreatePEResult::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
    delete app_id_;
    delete pe_id_;
    delete backup_id_;
  }
}

void CreatePEResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreatePEResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreatePEResult_descriptor_;
}

const CreatePEResult& CreatePEResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pm_5fpn_5frpc_2eproto();  return *default_instance_;
}

CreatePEResult* CreatePEResult::default_instance_ = NULL;

CreatePEResult* CreatePEResult::New() const {
  return new CreatePEResult;
}

void CreatePEResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != NULL) id_->::dstream::PNID::Clear();
    }
    if (has_app_id()) {
      if (app_id_ != NULL) app_id_->::dstream::AppID::Clear();
    }
    if (has_pe_id()) {
      if (pe_id_ != NULL) pe_id_->::dstream::PEID::Clear();
    }
    if (has_backup_id()) {
      if (backup_id_ != NULL) backup_id_->::dstream::BackupPEID::Clear();
    }
    res_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreatePEResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dstream.PNID id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_app_id;
        break;
      }
      
      // optional .dstream.AppID app_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pe_id;
        break;
      }
      
      // optional .dstream.PEID pe_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pe_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pe_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_backup_id;
        break;
      }
      
      // optional .dstream.BackupPEID backup_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_backup_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_backup_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_res;
        break;
      }
      
      // optional int32 res = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_res:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreatePEResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dstream.PNID id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }
  
  // optional .dstream.AppID app_id = 2;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->app_id(), output);
  }
  
  // optional .dstream.PEID pe_id = 3;
  if (has_pe_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pe_id(), output);
  }
  
  // optional .dstream.BackupPEID backup_id = 4;
  if (has_backup_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->backup_id(), output);
  }
  
  // optional int32 res = 5;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->res(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreatePEResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dstream.PNID id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }
  
  // optional .dstream.AppID app_id = 2;
  if (has_app_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->app_id(), target);
  }
  
  // optional .dstream.PEID pe_id = 3;
  if (has_pe_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pe_id(), target);
  }
  
  // optional .dstream.BackupPEID backup_id = 4;
  if (has_backup_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->backup_id(), target);
  }
  
  // optional int32 res = 5;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->res(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreatePEResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dstream.PNID id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }
    
    // optional .dstream.AppID app_id = 2;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->app_id());
    }
    
    // optional .dstream.PEID pe_id = 3;
    if (has_pe_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pe_id());
    }
    
    // optional .dstream.BackupPEID backup_id = 4;
    if (has_backup_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->backup_id());
    }
    
    // optional int32 res = 5;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->res());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreatePEResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreatePEResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreatePEResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreatePEResult::MergeFrom(const CreatePEResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::dstream::PNID::MergeFrom(from.id());
    }
    if (from.has_app_id()) {
      mutable_app_id()->::dstream::AppID::MergeFrom(from.app_id());
    }
    if (from.has_pe_id()) {
      mutable_pe_id()->::dstream::PEID::MergeFrom(from.pe_id());
    }
    if (from.has_backup_id()) {
      mutable_backup_id()->::dstream::BackupPEID::MergeFrom(from.backup_id());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreatePEResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatePEResult::CopyFrom(const CreatePEResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatePEResult::IsInitialized() const {
  
  return true;
}

void CreatePEResult::Swap(CreatePEResult* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(app_id_, other->app_id_);
    std::swap(pe_id_, other->pe_id_);
    std::swap(backup_id_, other->backup_id_);
    std::swap(res_, other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreatePEResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreatePEResult_descriptor_;
  metadata.reflection = CreatePEResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PEOperationMessage_OperationType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PEOperationMessage_OperationType_descriptor_;
}
bool PEOperationMessage_OperationType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PEOperationMessage_OperationType PEOperationMessage::KILL;
const PEOperationMessage_OperationType PEOperationMessage::SETPRIMARY;
const PEOperationMessage_OperationType PEOperationMessage::QUERY;
const PEOperationMessage_OperationType PEOperationMessage::RESTART;
const PEOperationMessage_OperationType PEOperationMessage::OperationType_MIN;
const PEOperationMessage_OperationType PEOperationMessage::OperationType_MAX;
const int PEOperationMessage::OperationType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PEOperationMessage::kTypeFieldNumber;
const int PEOperationMessage::kAppIdFieldNumber;
const int PEOperationMessage::kPeIdFieldNumber;
const int PEOperationMessage::kBackupPeIdFieldNumber;
const int PEOperationMessage::kRevisionFieldNumber;
#endif  // !_MSC_VER

PEOperationMessage::PEOperationMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PEOperationMessage::InitAsDefaultInstance() {
  app_id_ = const_cast< ::dstream::AppID*>(&::dstream::AppID::default_instance());
  pe_id_ = const_cast< ::dstream::PEID*>(&::dstream::PEID::default_instance());
  backup_pe_id_ = const_cast< ::dstream::BackupPEID*>(&::dstream::BackupPEID::default_instance());
}

PEOperationMessage::PEOperationMessage(const PEOperationMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PEOperationMessage::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  app_id_ = NULL;
  pe_id_ = NULL;
  backup_pe_id_ = NULL;
  revision_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PEOperationMessage::~PEOperationMessage() {
  SharedDtor();
}

void PEOperationMessage::SharedDtor() {
  if (this != default_instance_) {
    delete app_id_;
    delete pe_id_;
    delete backup_pe_id_;
  }
}

void PEOperationMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PEOperationMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PEOperationMessage_descriptor_;
}

const PEOperationMessage& PEOperationMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pm_5fpn_5frpc_2eproto();  return *default_instance_;
}

PEOperationMessage* PEOperationMessage::default_instance_ = NULL;

PEOperationMessage* PEOperationMessage::New() const {
  return new PEOperationMessage;
}

void PEOperationMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_app_id()) {
      if (app_id_ != NULL) app_id_->::dstream::AppID::Clear();
    }
    if (has_pe_id()) {
      if (pe_id_ != NULL) pe_id_->::dstream::PEID::Clear();
    }
    if (has_backup_pe_id()) {
      if (backup_pe_id_ != NULL) backup_pe_id_->::dstream::BackupPEID::Clear();
    }
    revision_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PEOperationMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dstream.PEOperationMessage.OperationType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dstream::PEOperationMessage_OperationType_IsValid(value)) {
            set_type(static_cast< ::dstream::PEOperationMessage_OperationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_app_id;
        break;
      }
      
      // optional .dstream.AppID app_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pe_id;
        break;
      }
      
      // optional .dstream.PEID pe_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pe_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pe_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_backup_pe_id;
        break;
      }
      
      // optional .dstream.BackupPEID backup_pe_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_backup_pe_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_backup_pe_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_revision;
        break;
      }
      
      // optional uint32 revision = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_revision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &revision_)));
          set_has_revision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PEOperationMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dstream.PEOperationMessage.OperationType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional .dstream.AppID app_id = 2;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->app_id(), output);
  }
  
  // optional .dstream.PEID pe_id = 3;
  if (has_pe_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pe_id(), output);
  }
  
  // optional .dstream.BackupPEID backup_pe_id = 4;
  if (has_backup_pe_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->backup_pe_id(), output);
  }
  
  // optional uint32 revision = 5;
  if (has_revision()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->revision(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PEOperationMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dstream.PEOperationMessage.OperationType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional .dstream.AppID app_id = 2;
  if (has_app_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->app_id(), target);
  }
  
  // optional .dstream.PEID pe_id = 3;
  if (has_pe_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pe_id(), target);
  }
  
  // optional .dstream.BackupPEID backup_pe_id = 4;
  if (has_backup_pe_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->backup_pe_id(), target);
  }
  
  // optional uint32 revision = 5;
  if (has_revision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->revision(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PEOperationMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dstream.PEOperationMessage.OperationType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional .dstream.AppID app_id = 2;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->app_id());
    }
    
    // optional .dstream.PEID pe_id = 3;
    if (has_pe_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pe_id());
    }
    
    // optional .dstream.BackupPEID backup_pe_id = 4;
    if (has_backup_pe_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->backup_pe_id());
    }
    
    // optional uint32 revision = 5;
    if (has_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->revision());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PEOperationMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PEOperationMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PEOperationMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PEOperationMessage::MergeFrom(const PEOperationMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_app_id()) {
      mutable_app_id()->::dstream::AppID::MergeFrom(from.app_id());
    }
    if (from.has_pe_id()) {
      mutable_pe_id()->::dstream::PEID::MergeFrom(from.pe_id());
    }
    if (from.has_backup_pe_id()) {
      mutable_backup_pe_id()->::dstream::BackupPEID::MergeFrom(from.backup_pe_id());
    }
    if (from.has_revision()) {
      set_revision(from.revision());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PEOperationMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PEOperationMessage::CopyFrom(const PEOperationMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PEOperationMessage::IsInitialized() const {
  
  return true;
}

void PEOperationMessage::Swap(PEOperationMessage* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(app_id_, other->app_id_);
    std::swap(pe_id_, other->pe_id_);
    std::swap(backup_pe_id_, other->backup_pe_id_);
    std::swap(revision_, other->revision_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PEOperationMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PEOperationMessage_descriptor_;
  metadata.reflection = PEOperationMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PEOperationResult::kIdFieldNumber;
const int PEOperationResult::kAppIdFieldNumber;
const int PEOperationResult::kPeIdFieldNumber;
const int PEOperationResult::kBackupIdFieldNumber;
const int PEOperationResult::kResFieldNumber;
#endif  // !_MSC_VER

PEOperationResult::PEOperationResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PEOperationResult::InitAsDefaultInstance() {
  id_ = const_cast< ::dstream::PNID*>(&::dstream::PNID::default_instance());
  app_id_ = const_cast< ::dstream::AppID*>(&::dstream::AppID::default_instance());
  pe_id_ = const_cast< ::dstream::PEID*>(&::dstream::PEID::default_instance());
  backup_id_ = const_cast< ::dstream::BackupPEID*>(&::dstream::BackupPEID::default_instance());
}

PEOperationResult::PEOperationResult(const PEOperationResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PEOperationResult::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  app_id_ = NULL;
  pe_id_ = NULL;
  backup_id_ = NULL;
  res_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PEOperationResult::~PEOperationResult() {
  SharedDtor();
}

void PEOperationResult::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
    delete app_id_;
    delete pe_id_;
    delete backup_id_;
  }
}

void PEOperationResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PEOperationResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PEOperationResult_descriptor_;
}

const PEOperationResult& PEOperationResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pm_5fpn_5frpc_2eproto();  return *default_instance_;
}

PEOperationResult* PEOperationResult::default_instance_ = NULL;

PEOperationResult* PEOperationResult::New() const {
  return new PEOperationResult;
}

void PEOperationResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != NULL) id_->::dstream::PNID::Clear();
    }
    if (has_app_id()) {
      if (app_id_ != NULL) app_id_->::dstream::AppID::Clear();
    }
    if (has_pe_id()) {
      if (pe_id_ != NULL) pe_id_->::dstream::PEID::Clear();
    }
    if (has_backup_id()) {
      if (backup_id_ != NULL) backup_id_->::dstream::BackupPEID::Clear();
    }
    res_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PEOperationResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dstream.PNID id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_app_id;
        break;
      }
      
      // optional .dstream.AppID app_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pe_id;
        break;
      }
      
      // optional .dstream.PEID pe_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pe_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pe_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_backup_id;
        break;
      }
      
      // optional .dstream.BackupPEID backup_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_backup_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_backup_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_res;
        break;
      }
      
      // optional int32 res = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_res:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PEOperationResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dstream.PNID id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }
  
  // optional .dstream.AppID app_id = 2;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->app_id(), output);
  }
  
  // optional .dstream.PEID pe_id = 3;
  if (has_pe_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pe_id(), output);
  }
  
  // optional .dstream.BackupPEID backup_id = 4;
  if (has_backup_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->backup_id(), output);
  }
  
  // optional int32 res = 5;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->res(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PEOperationResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dstream.PNID id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }
  
  // optional .dstream.AppID app_id = 2;
  if (has_app_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->app_id(), target);
  }
  
  // optional .dstream.PEID pe_id = 3;
  if (has_pe_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pe_id(), target);
  }
  
  // optional .dstream.BackupPEID backup_id = 4;
  if (has_backup_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->backup_id(), target);
  }
  
  // optional int32 res = 5;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->res(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PEOperationResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dstream.PNID id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }
    
    // optional .dstream.AppID app_id = 2;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->app_id());
    }
    
    // optional .dstream.PEID pe_id = 3;
    if (has_pe_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pe_id());
    }
    
    // optional .dstream.BackupPEID backup_id = 4;
    if (has_backup_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->backup_id());
    }
    
    // optional int32 res = 5;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->res());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PEOperationResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PEOperationResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PEOperationResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PEOperationResult::MergeFrom(const PEOperationResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::dstream::PNID::MergeFrom(from.id());
    }
    if (from.has_app_id()) {
      mutable_app_id()->::dstream::AppID::MergeFrom(from.app_id());
    }
    if (from.has_pe_id()) {
      mutable_pe_id()->::dstream::PEID::MergeFrom(from.pe_id());
    }
    if (from.has_backup_id()) {
      mutable_backup_id()->::dstream::BackupPEID::MergeFrom(from.backup_id());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PEOperationResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PEOperationResult::CopyFrom(const PEOperationResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PEOperationResult::IsInitialized() const {
  
  return true;
}

void PEOperationResult::Swap(PEOperationResult* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(app_id_, other->app_id_);
    std::swap(pe_id_, other->pe_id_);
    std::swap(backup_id_, other->backup_id_);
    std::swap(res_, other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PEOperationResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PEOperationResult_descriptor_;
  metadata.reflection = PEOperationResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BackupPEStatus::kAppIdFieldNumber;
const int BackupPEStatus::kPeIdFieldNumber;
const int BackupPEStatus::kBackupPdIdFieldNumber;
const int BackupPEStatus::kCpuUsedFieldNumber;
const int BackupPEStatus::kMemoryUsedFieldNumber;
const int BackupPEStatus::kNetworkUsedFieldNumber;
const int BackupPEStatus::kDiskUsedFieldNumber;
const int BackupPEStatus::kTuplesProcessedFieldNumber;
const int BackupPEStatus::kMetricNameFieldNumber;
const int BackupPEStatus::kMetricValueFieldNumber;
const int BackupPEStatus::kRevisionFieldNumber;
#endif  // !_MSC_VER

BackupPEStatus::BackupPEStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BackupPEStatus::InitAsDefaultInstance() {
  app_id_ = const_cast< ::dstream::AppID*>(&::dstream::AppID::default_instance());
  pe_id_ = const_cast< ::dstream::PEID*>(&::dstream::PEID::default_instance());
  backup_pd_id_ = const_cast< ::dstream::BackupPEID*>(&::dstream::BackupPEID::default_instance());
}

BackupPEStatus::BackupPEStatus(const BackupPEStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BackupPEStatus::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = NULL;
  pe_id_ = NULL;
  backup_pd_id_ = NULL;
  cpu_used_ = 0;
  memory_used_ = 0u;
  network_used_ = 0u;
  disk_used_ = 0u;
  tuples_processed_ = GOOGLE_ULONGLONG(0);
  revision_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BackupPEStatus::~BackupPEStatus() {
  SharedDtor();
}

void BackupPEStatus::SharedDtor() {
  if (this != default_instance_) {
    delete app_id_;
    delete pe_id_;
    delete backup_pd_id_;
  }
}

void BackupPEStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BackupPEStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BackupPEStatus_descriptor_;
}

const BackupPEStatus& BackupPEStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pm_5fpn_5frpc_2eproto();  return *default_instance_;
}

BackupPEStatus* BackupPEStatus::default_instance_ = NULL;

BackupPEStatus* BackupPEStatus::New() const {
  return new BackupPEStatus;
}

void BackupPEStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_app_id()) {
      if (app_id_ != NULL) app_id_->::dstream::AppID::Clear();
    }
    if (has_pe_id()) {
      if (pe_id_ != NULL) pe_id_->::dstream::PEID::Clear();
    }
    if (has_backup_pd_id()) {
      if (backup_pd_id_ != NULL) backup_pd_id_->::dstream::BackupPEID::Clear();
    }
    cpu_used_ = 0;
    memory_used_ = 0u;
    network_used_ = 0u;
    disk_used_ = 0u;
    tuples_processed_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    revision_ = 0u;
  }
  metric_name_.Clear();
  metric_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BackupPEStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dstream.AppID app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pe_id;
        break;
      }
      
      // optional .dstream.PEID pe_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pe_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pe_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_backup_pd_id;
        break;
      }
      
      // optional .dstream.BackupPEID backup_pd_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_backup_pd_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_backup_pd_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_cpu_used;
        break;
      }
      
      // optional float cpu_used = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cpu_used:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_used_)));
          set_has_cpu_used();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_memory_used;
        break;
      }
      
      // optional uint32 memory_used = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memory_used:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &memory_used_)));
          set_has_memory_used();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_network_used;
        break;
      }
      
      // optional uint32 network_used = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_network_used:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &network_used_)));
          set_has_network_used();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_disk_used;
        break;
      }
      
      // optional uint32 disk_used = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_disk_used:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &disk_used_)));
          set_has_disk_used();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_tuples_processed;
        break;
      }
      
      // optional uint64 tuples_processed = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tuples_processed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tuples_processed_)));
          set_has_tuples_processed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_metric_name;
        break;
      }
      
      // repeated string metric_name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_metric_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_metric_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->metric_name(0).data(), this->metric_name(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_metric_name;
        if (input->ExpectTag(82)) goto parse_metric_value;
        break;
      }
      
      // repeated string metric_value = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_metric_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_metric_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->metric_value(0).data(), this->metric_value(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_metric_value;
        if (input->ExpectTag(88)) goto parse_revision;
        break;
      }
      
      // optional uint32 revision = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_revision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &revision_)));
          set_has_revision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BackupPEStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dstream.AppID app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->app_id(), output);
  }
  
  // optional .dstream.PEID pe_id = 2;
  if (has_pe_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pe_id(), output);
  }
  
  // optional .dstream.BackupPEID backup_pd_id = 3;
  if (has_backup_pd_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->backup_pd_id(), output);
  }
  
  // optional float cpu_used = 4;
  if (has_cpu_used()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->cpu_used(), output);
  }
  
  // optional uint32 memory_used = 5;
  if (has_memory_used()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->memory_used(), output);
  }
  
  // optional uint32 network_used = 6;
  if (has_network_used()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->network_used(), output);
  }
  
  // optional uint32 disk_used = 7;
  if (has_disk_used()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->disk_used(), output);
  }
  
  // optional uint64 tuples_processed = 8;
  if (has_tuples_processed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->tuples_processed(), output);
  }
  
  // repeated string metric_name = 9;
  for (int i = 0; i < this->metric_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->metric_name(i).data(), this->metric_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->metric_name(i), output);
  }
  
  // repeated string metric_value = 10;
  for (int i = 0; i < this->metric_value_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->metric_value(i).data(), this->metric_value(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->metric_value(i), output);
  }
  
  // optional uint32 revision = 11;
  if (has_revision()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->revision(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BackupPEStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dstream.AppID app_id = 1;
  if (has_app_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->app_id(), target);
  }
  
  // optional .dstream.PEID pe_id = 2;
  if (has_pe_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pe_id(), target);
  }
  
  // optional .dstream.BackupPEID backup_pd_id = 3;
  if (has_backup_pd_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->backup_pd_id(), target);
  }
  
  // optional float cpu_used = 4;
  if (has_cpu_used()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->cpu_used(), target);
  }
  
  // optional uint32 memory_used = 5;
  if (has_memory_used()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->memory_used(), target);
  }
  
  // optional uint32 network_used = 6;
  if (has_network_used()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->network_used(), target);
  }
  
  // optional uint32 disk_used = 7;
  if (has_disk_used()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->disk_used(), target);
  }
  
  // optional uint64 tuples_processed = 8;
  if (has_tuples_processed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->tuples_processed(), target);
  }
  
  // repeated string metric_name = 9;
  for (int i = 0; i < this->metric_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->metric_name(i).data(), this->metric_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->metric_name(i), target);
  }
  
  // repeated string metric_value = 10;
  for (int i = 0; i < this->metric_value_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->metric_value(i).data(), this->metric_value(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->metric_value(i), target);
  }
  
  // optional uint32 revision = 11;
  if (has_revision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->revision(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BackupPEStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dstream.AppID app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->app_id());
    }
    
    // optional .dstream.PEID pe_id = 2;
    if (has_pe_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pe_id());
    }
    
    // optional .dstream.BackupPEID backup_pd_id = 3;
    if (has_backup_pd_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->backup_pd_id());
    }
    
    // optional float cpu_used = 4;
    if (has_cpu_used()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 memory_used = 5;
    if (has_memory_used()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->memory_used());
    }
    
    // optional uint32 network_used = 6;
    if (has_network_used()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->network_used());
    }
    
    // optional uint32 disk_used = 7;
    if (has_disk_used()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->disk_used());
    }
    
    // optional uint64 tuples_processed = 8;
    if (has_tuples_processed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tuples_processed());
    }
    
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional uint32 revision = 11;
    if (has_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->revision());
    }
    
  }
  // repeated string metric_name = 9;
  total_size += 1 * this->metric_name_size();
  for (int i = 0; i < this->metric_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->metric_name(i));
  }
  
  // repeated string metric_value = 10;
  total_size += 1 * this->metric_value_size();
  for (int i = 0; i < this->metric_value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->metric_value(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BackupPEStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BackupPEStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BackupPEStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BackupPEStatus::MergeFrom(const BackupPEStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  metric_name_.MergeFrom(from.metric_name_);
  metric_value_.MergeFrom(from.metric_value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      mutable_app_id()->::dstream::AppID::MergeFrom(from.app_id());
    }
    if (from.has_pe_id()) {
      mutable_pe_id()->::dstream::PEID::MergeFrom(from.pe_id());
    }
    if (from.has_backup_pd_id()) {
      mutable_backup_pd_id()->::dstream::BackupPEID::MergeFrom(from.backup_pd_id());
    }
    if (from.has_cpu_used()) {
      set_cpu_used(from.cpu_used());
    }
    if (from.has_memory_used()) {
      set_memory_used(from.memory_used());
    }
    if (from.has_network_used()) {
      set_network_used(from.network_used());
    }
    if (from.has_disk_used()) {
      set_disk_used(from.disk_used());
    }
    if (from.has_tuples_processed()) {
      set_tuples_processed(from.tuples_processed());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_revision()) {
      set_revision(from.revision());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BackupPEStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackupPEStatus::CopyFrom(const BackupPEStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackupPEStatus::IsInitialized() const {
  
  return true;
}

void BackupPEStatus::Swap(BackupPEStatus* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(pe_id_, other->pe_id_);
    std::swap(backup_pd_id_, other->backup_pd_id_);
    std::swap(cpu_used_, other->cpu_used_);
    std::swap(memory_used_, other->memory_used_);
    std::swap(network_used_, other->network_used_);
    std::swap(disk_used_, other->disk_used_);
    std::swap(tuples_processed_, other->tuples_processed_);
    metric_name_.Swap(&other->metric_name_);
    metric_value_.Swap(&other->metric_value_);
    std::swap(revision_, other->revision_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BackupPEStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BackupPEStatus_descriptor_;
  metadata.reflection = BackupPEStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FailPE::kAppIdFieldNumber;
const int FailPE::kPeIdFieldNumber;
const int FailPE::kBackupPeIdFieldNumber;
const int FailPE::kRevisionFieldNumber;
#endif  // !_MSC_VER

FailPE::FailPE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FailPE::InitAsDefaultInstance() {
  app_id_ = const_cast< ::dstream::AppID*>(&::dstream::AppID::default_instance());
  pe_id_ = const_cast< ::dstream::PEID*>(&::dstream::PEID::default_instance());
  backup_pe_id_ = const_cast< ::dstream::BackupPEID*>(&::dstream::BackupPEID::default_instance());
}

FailPE::FailPE(const FailPE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FailPE::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = NULL;
  pe_id_ = NULL;
  backup_pe_id_ = NULL;
  revision_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FailPE::~FailPE() {
  SharedDtor();
}

void FailPE::SharedDtor() {
  if (this != default_instance_) {
    delete app_id_;
    delete pe_id_;
    delete backup_pe_id_;
  }
}

void FailPE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FailPE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FailPE_descriptor_;
}

const FailPE& FailPE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pm_5fpn_5frpc_2eproto();  return *default_instance_;
}

FailPE* FailPE::default_instance_ = NULL;

FailPE* FailPE::New() const {
  return new FailPE;
}

void FailPE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_app_id()) {
      if (app_id_ != NULL) app_id_->::dstream::AppID::Clear();
    }
    if (has_pe_id()) {
      if (pe_id_ != NULL) pe_id_->::dstream::PEID::Clear();
    }
    if (has_backup_pe_id()) {
      if (backup_pe_id_ != NULL) backup_pe_id_->::dstream::BackupPEID::Clear();
    }
    revision_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FailPE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dstream.AppID app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pe_id;
        break;
      }
      
      // optional .dstream.PEID pe_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pe_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pe_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_backup_pe_id;
        break;
      }
      
      // optional .dstream.BackupPEID backup_pe_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_backup_pe_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_backup_pe_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_revision;
        break;
      }
      
      // optional uint32 revision = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_revision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &revision_)));
          set_has_revision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FailPE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dstream.AppID app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->app_id(), output);
  }
  
  // optional .dstream.PEID pe_id = 2;
  if (has_pe_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pe_id(), output);
  }
  
  // optional .dstream.BackupPEID backup_pe_id = 3;
  if (has_backup_pe_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->backup_pe_id(), output);
  }
  
  // optional uint32 revision = 4;
  if (has_revision()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->revision(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FailPE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dstream.AppID app_id = 1;
  if (has_app_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->app_id(), target);
  }
  
  // optional .dstream.PEID pe_id = 2;
  if (has_pe_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pe_id(), target);
  }
  
  // optional .dstream.BackupPEID backup_pe_id = 3;
  if (has_backup_pe_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->backup_pe_id(), target);
  }
  
  // optional uint32 revision = 4;
  if (has_revision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->revision(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FailPE::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dstream.AppID app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->app_id());
    }
    
    // optional .dstream.PEID pe_id = 2;
    if (has_pe_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pe_id());
    }
    
    // optional .dstream.BackupPEID backup_pe_id = 3;
    if (has_backup_pe_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->backup_pe_id());
    }
    
    // optional uint32 revision = 4;
    if (has_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->revision());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FailPE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FailPE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FailPE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FailPE::MergeFrom(const FailPE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      mutable_app_id()->::dstream::AppID::MergeFrom(from.app_id());
    }
    if (from.has_pe_id()) {
      mutable_pe_id()->::dstream::PEID::MergeFrom(from.pe_id());
    }
    if (from.has_backup_pe_id()) {
      mutable_backup_pe_id()->::dstream::BackupPEID::MergeFrom(from.backup_pe_id());
    }
    if (from.has_revision()) {
      set_revision(from.revision());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FailPE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FailPE::CopyFrom(const FailPE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FailPE::IsInitialized() const {
  
  return true;
}

void FailPE::Swap(FailPE* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(pe_id_, other->pe_id_);
    std::swap(backup_pe_id_, other->backup_pe_id_);
    std::swap(revision_, other->revision_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FailPE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FailPE_descriptor_;
  metadata.reflection = FailPE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TupleQueue::kQueueIdFieldNumber;
const int TupleQueue::kPeIdFieldNumber;
const int TupleQueue::kDropTuplesFieldNumber;
const int TupleQueue::kBufferTuplesFieldNumber;
const int TupleQueue::kMemoryUsedFieldNumber;
#endif  // !_MSC_VER

TupleQueue::TupleQueue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TupleQueue::InitAsDefaultInstance() {
  pe_id_ = const_cast< ::dstream::PEID*>(&::dstream::PEID::default_instance());
}

TupleQueue::TupleQueue(const TupleQueue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TupleQueue::SharedCtor() {
  _cached_size_ = 0;
  queue_id_ = 0u;
  pe_id_ = NULL;
  drop_tuples_ = 0u;
  buffer_tuples_ = 0u;
  memory_used_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TupleQueue::~TupleQueue() {
  SharedDtor();
}

void TupleQueue::SharedDtor() {
  if (this != default_instance_) {
    delete pe_id_;
  }
}

void TupleQueue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TupleQueue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TupleQueue_descriptor_;
}

const TupleQueue& TupleQueue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pm_5fpn_5frpc_2eproto();  return *default_instance_;
}

TupleQueue* TupleQueue::default_instance_ = NULL;

TupleQueue* TupleQueue::New() const {
  return new TupleQueue;
}

void TupleQueue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    queue_id_ = 0u;
    if (has_pe_id()) {
      if (pe_id_ != NULL) pe_id_->::dstream::PEID::Clear();
    }
    drop_tuples_ = 0u;
    buffer_tuples_ = 0u;
    memory_used_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TupleQueue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 queue_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &queue_id_)));
          set_has_queue_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pe_id;
        break;
      }
      
      // optional .dstream.PEID pe_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pe_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pe_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_drop_tuples;
        break;
      }
      
      // optional uint32 drop_tuples = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drop_tuples:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drop_tuples_)));
          set_has_drop_tuples();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_buffer_tuples;
        break;
      }
      
      // optional uint32 buffer_tuples = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buffer_tuples:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buffer_tuples_)));
          set_has_buffer_tuples();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_memory_used;
        break;
      }
      
      // optional uint32 memory_used = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memory_used:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &memory_used_)));
          set_has_memory_used();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TupleQueue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 queue_id = 1;
  if (has_queue_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->queue_id(), output);
  }
  
  // optional .dstream.PEID pe_id = 2;
  if (has_pe_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pe_id(), output);
  }
  
  // optional uint32 drop_tuples = 3;
  if (has_drop_tuples()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->drop_tuples(), output);
  }
  
  // optional uint32 buffer_tuples = 4;
  if (has_buffer_tuples()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->buffer_tuples(), output);
  }
  
  // optional uint32 memory_used = 5;
  if (has_memory_used()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->memory_used(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TupleQueue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 queue_id = 1;
  if (has_queue_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->queue_id(), target);
  }
  
  // optional .dstream.PEID pe_id = 2;
  if (has_pe_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pe_id(), target);
  }
  
  // optional uint32 drop_tuples = 3;
  if (has_drop_tuples()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->drop_tuples(), target);
  }
  
  // optional uint32 buffer_tuples = 4;
  if (has_buffer_tuples()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->buffer_tuples(), target);
  }
  
  // optional uint32 memory_used = 5;
  if (has_memory_used()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->memory_used(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TupleQueue::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 queue_id = 1;
    if (has_queue_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->queue_id());
    }
    
    // optional .dstream.PEID pe_id = 2;
    if (has_pe_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pe_id());
    }
    
    // optional uint32 drop_tuples = 3;
    if (has_drop_tuples()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->drop_tuples());
    }
    
    // optional uint32 buffer_tuples = 4;
    if (has_buffer_tuples()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buffer_tuples());
    }
    
    // optional uint32 memory_used = 5;
    if (has_memory_used()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->memory_used());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TupleQueue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TupleQueue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TupleQueue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TupleQueue::MergeFrom(const TupleQueue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_queue_id()) {
      set_queue_id(from.queue_id());
    }
    if (from.has_pe_id()) {
      mutable_pe_id()->::dstream::PEID::MergeFrom(from.pe_id());
    }
    if (from.has_drop_tuples()) {
      set_drop_tuples(from.drop_tuples());
    }
    if (from.has_buffer_tuples()) {
      set_buffer_tuples(from.buffer_tuples());
    }
    if (from.has_memory_used()) {
      set_memory_used(from.memory_used());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TupleQueue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TupleQueue::CopyFrom(const TupleQueue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TupleQueue::IsInitialized() const {
  
  return true;
}

void TupleQueue::Swap(TupleQueue* other) {
  if (other != this) {
    std::swap(queue_id_, other->queue_id_);
    std::swap(pe_id_, other->pe_id_);
    std::swap(drop_tuples_, other->drop_tuples_);
    std::swap(buffer_tuples_, other->buffer_tuples_);
    std::swap(memory_used_, other->memory_used_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TupleQueue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TupleQueue_descriptor_;
  metadata.reflection = TupleQueue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PNReport::kIdFieldNumber;
const int PNReport::kResourceFieldNumber;
const int PNReport::kStatusFieldNumber;
const int PNReport::kFailsFieldNumber;
const int PNReport::kQueuesFieldNumber;
#endif  // !_MSC_VER

PNReport::PNReport()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PNReport::InitAsDefaultInstance() {
  id_ = const_cast< ::dstream::PNID*>(&::dstream::PNID::default_instance());
  resource_ = const_cast< ::dstream::PNResourceStatus*>(&::dstream::PNResourceStatus::default_instance());
}

PNReport::PNReport(const PNReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PNReport::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  resource_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PNReport::~PNReport() {
  SharedDtor();
}

void PNReport::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
    delete resource_;
  }
}

void PNReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PNReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PNReport_descriptor_;
}

const PNReport& PNReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pm_5fpn_5frpc_2eproto();  return *default_instance_;
}

PNReport* PNReport::default_instance_ = NULL;

PNReport* PNReport::New() const {
  return new PNReport;
}

void PNReport::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != NULL) id_->::dstream::PNID::Clear();
    }
    if (has_resource()) {
      if (resource_ != NULL) resource_->::dstream::PNResourceStatus::Clear();
    }
  }
  status_.Clear();
  fails_.Clear();
  queues_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PNReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dstream.PNID id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resource;
        break;
      }
      
      // optional .dstream.PNResourceStatus resource = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_status;
        break;
      }
      
      // repeated .dstream.BackupPEStatus status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_status;
        if (input->ExpectTag(34)) goto parse_fails;
        break;
      }
      
      // repeated .dstream.FailPE fails = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fails()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fails;
        if (input->ExpectTag(42)) goto parse_queues;
        break;
      }
      
      // repeated .dstream.TupleQueue queues = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_queues:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_queues()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_queues;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PNReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dstream.PNID id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }
  
  // optional .dstream.PNResourceStatus resource = 2;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->resource(), output);
  }
  
  // repeated .dstream.BackupPEStatus status = 3;
  for (int i = 0; i < this->status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->status(i), output);
  }
  
  // repeated .dstream.FailPE fails = 4;
  for (int i = 0; i < this->fails_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->fails(i), output);
  }
  
  // repeated .dstream.TupleQueue queues = 5;
  for (int i = 0; i < this->queues_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->queues(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PNReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dstream.PNID id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }
  
  // optional .dstream.PNResourceStatus resource = 2;
  if (has_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->resource(), target);
  }
  
  // repeated .dstream.BackupPEStatus status = 3;
  for (int i = 0; i < this->status_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->status(i), target);
  }
  
  // repeated .dstream.FailPE fails = 4;
  for (int i = 0; i < this->fails_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->fails(i), target);
  }
  
  // repeated .dstream.TupleQueue queues = 5;
  for (int i = 0; i < this->queues_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->queues(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PNReport::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dstream.PNID id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }
    
    // optional .dstream.PNResourceStatus resource = 2;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resource());
    }
    
  }
  // repeated .dstream.BackupPEStatus status = 3;
  total_size += 1 * this->status_size();
  for (int i = 0; i < this->status_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->status(i));
  }
  
  // repeated .dstream.FailPE fails = 4;
  total_size += 1 * this->fails_size();
  for (int i = 0; i < this->fails_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fails(i));
  }
  
  // repeated .dstream.TupleQueue queues = 5;
  total_size += 1 * this->queues_size();
  for (int i = 0; i < this->queues_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->queues(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PNReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PNReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PNReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PNReport::MergeFrom(const PNReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  status_.MergeFrom(from.status_);
  fails_.MergeFrom(from.fails_);
  queues_.MergeFrom(from.queues_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::dstream::PNID::MergeFrom(from.id());
    }
    if (from.has_resource()) {
      mutable_resource()->::dstream::PNResourceStatus::MergeFrom(from.resource());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PNReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PNReport::CopyFrom(const PNReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PNReport::IsInitialized() const {
  
  return true;
}

void PNReport::Swap(PNReport* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(resource_, other->resource_);
    status_.Swap(&other->status_);
    fails_.Swap(&other->fails_);
    queues_.Swap(&other->queues_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PNReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PNReport_descriptor_;
  metadata.reflection = PNReport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportResponse::kNextReportIntervalFieldNumber;
#endif  // !_MSC_VER

ReportResponse::ReportResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportResponse::InitAsDefaultInstance() {
}

ReportResponse::ReportResponse(const ReportResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportResponse::SharedCtor() {
  _cached_size_ = 0;
  next_report_interval_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportResponse::~ReportResponse() {
  SharedDtor();
}

void ReportResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReportResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportResponse_descriptor_;
}

const ReportResponse& ReportResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pm_5fpn_5frpc_2eproto();  return *default_instance_;
}

ReportResponse* ReportResponse::default_instance_ = NULL;

ReportResponse* ReportResponse::New() const {
  return new ReportResponse;
}

void ReportResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    next_report_interval_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 next_report_interval = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &next_report_interval_)));
          set_has_next_report_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 next_report_interval = 1;
  if (has_next_report_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->next_report_interval(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 next_report_interval = 1;
  if (has_next_report_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->next_report_interval(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 next_report_interval = 1;
    if (has_next_report_interval()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportResponse::MergeFrom(const ReportResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_next_report_interval()) {
      set_next_report_interval(from.next_report_interval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportResponse::CopyFrom(const ReportResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportResponse::IsInitialized() const {
  
  return true;
}

void ReportResponse::Swap(ReportResponse* other) {
  if (other != this) {
    std::swap(next_report_interval_, other->next_report_interval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportResponse_descriptor_;
  metadata.reflection = ReportResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dstream

// @@protoc_insertion_point(global_scope)
