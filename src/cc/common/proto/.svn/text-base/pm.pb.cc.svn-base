// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dstream {

namespace {

const ::google::protobuf::Descriptor* PM_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PM_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventSetValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventSetValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventKV_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventKV_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventMapPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventMapPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* DelayEventKV_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelayEventKV_reflection_ = NULL;
const ::google::protobuf::Descriptor* DelayEventPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelayEventPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* PNResStaticsPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PNResStaticsPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* PnidStaticsKV_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PnidStaticsKV_reflection_ = NULL;
const ::google::protobuf::Descriptor* PnidStaticsPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PnidStaticsPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* PnidReportKV_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PnidReportKV_reflection_ = NULL;
const ::google::protobuf::Descriptor* PnidReportMapPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PnidReportMapPB_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pm_2eproto() {
  protobuf_AddDesc_pm_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pm.proto");
  GOOGLE_CHECK(file != NULL);
  PM_descriptor_ = file->message_type(0);
  static const int PM_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PM, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PM, submit_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PM, report_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PM, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PM, bk_host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PM, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PM, httpd_port_),
  };
  PM_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PM_descriptor_,
      PM::default_instance_,
      PM_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PM, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PM, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PM));
  EventSetValue_descriptor_ = file->message_type(1);
  static const int EventSetValue_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventSetValue, event_description_),
  };
  EventSetValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventSetValue_descriptor_,
      EventSetValue::default_instance_,
      EventSetValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventSetValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventSetValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventSetValue));
  EventKV_descriptor_ = file->message_type(2);
  static const int EventKV_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventKV, event_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventKV, event_set_),
  };
  EventKV_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventKV_descriptor_,
      EventKV::default_instance_,
      EventKV_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventKV, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventKV, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventKV));
  EventMapPB_descriptor_ = file->message_type(3);
  static const int EventMapPB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventMapPB, event_kv_),
  };
  EventMapPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventMapPB_descriptor_,
      EventMapPB::default_instance_,
      EventMapPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventMapPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventMapPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventMapPB));
  DelayEventKV_descriptor_ = file->message_type(4);
  static const int DelayEventKV_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelayEventKV, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelayEventKV, event_map_),
  };
  DelayEventKV_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DelayEventKV_descriptor_,
      DelayEventKV::default_instance_,
      DelayEventKV_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelayEventKV, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelayEventKV, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DelayEventKV));
  DelayEventPB_descriptor_ = file->message_type(5);
  static const int DelayEventPB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelayEventPB, delay_event_kv_),
  };
  DelayEventPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DelayEventPB_descriptor_,
      DelayEventPB::default_instance_,
      DelayEventPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelayEventPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelayEventPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DelayEventPB));
  PNResStaticsPB_descriptor_ = file->message_type(6);
  static const int PNResStaticsPB_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNResStaticsPB, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNResStaticsPB, used_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNResStaticsPB, reserved_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNResStaticsPB, pe_num_),
  };
  PNResStaticsPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PNResStaticsPB_descriptor_,
      PNResStaticsPB::default_instance_,
      PNResStaticsPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNResStaticsPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNResStaticsPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PNResStaticsPB));
  PnidStaticsKV_descriptor_ = file->message_type(7);
  static const int PnidStaticsKV_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PnidStaticsKV, pn_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PnidStaticsKV, pn_res_statics_),
  };
  PnidStaticsKV_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PnidStaticsKV_descriptor_,
      PnidStaticsKV::default_instance_,
      PnidStaticsKV_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PnidStaticsKV, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PnidStaticsKV, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PnidStaticsKV));
  PnidStaticsPB_descriptor_ = file->message_type(8);
  static const int PnidStaticsPB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PnidStaticsPB, pn_statics_kv_),
  };
  PnidStaticsPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PnidStaticsPB_descriptor_,
      PnidStaticsPB::default_instance_,
      PnidStaticsPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PnidStaticsPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PnidStaticsPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PnidStaticsPB));
  PnidReportKV_descriptor_ = file->message_type(9);
  static const int PnidReportKV_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PnidReportKV, pn_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PnidReportKV, pn_report_),
  };
  PnidReportKV_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PnidReportKV_descriptor_,
      PnidReportKV::default_instance_,
      PnidReportKV_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PnidReportKV, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PnidReportKV, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PnidReportKV));
  PnidReportMapPB_descriptor_ = file->message_type(10);
  static const int PnidReportMapPB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PnidReportMapPB, pnid_report_kv_),
  };
  PnidReportMapPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PnidReportMapPB_descriptor_,
      PnidReportMapPB::default_instance_,
      PnidReportMapPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PnidReportMapPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PnidReportMapPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PnidReportMapPB));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pm_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PM_descriptor_, &PM::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventSetValue_descriptor_, &EventSetValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventKV_descriptor_, &EventKV::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventMapPB_descriptor_, &EventMapPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DelayEventKV_descriptor_, &DelayEventKV::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DelayEventPB_descriptor_, &DelayEventPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PNResStaticsPB_descriptor_, &PNResStaticsPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PnidStaticsKV_descriptor_, &PnidStaticsKV::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PnidStaticsPB_descriptor_, &PnidStaticsPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PnidReportKV_descriptor_, &PnidReportKV::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PnidReportMapPB_descriptor_, &PnidReportMapPB::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pm_2eproto() {
  delete PM::default_instance_;
  delete PM_reflection_;
  delete EventSetValue::default_instance_;
  delete EventSetValue_reflection_;
  delete EventKV::default_instance_;
  delete EventKV_reflection_;
  delete EventMapPB::default_instance_;
  delete EventMapPB_reflection_;
  delete DelayEventKV::default_instance_;
  delete DelayEventKV_reflection_;
  delete DelayEventPB::default_instance_;
  delete DelayEventPB_reflection_;
  delete PNResStaticsPB::default_instance_;
  delete PNResStaticsPB_reflection_;
  delete PnidStaticsKV::default_instance_;
  delete PnidStaticsKV_reflection_;
  delete PnidStaticsPB::default_instance_;
  delete PnidStaticsPB_reflection_;
  delete PnidReportKV::default_instance_;
  delete PnidReportKV_reflection_;
  delete PnidReportMapPB::default_instance_;
  delete PnidReportMapPB_reflection_;
}

void protobuf_AddDesc_pm_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::dstream::protobuf_AddDesc_dstream_5fproto_5fcommon_2eproto();
  ::dstream::protobuf_AddDesc_pm_5fpn_5frpc_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010pm.proto\022\007dstream\032\032dstream_proto_commo"
    "n.proto\032\017pm_pn_rpc.proto\"~\n\002PM\022\014\n\004host\030\001"
    " \001(\t\022\023\n\013submit_port\030\002 \001(\007\022\023\n\013report_port"
    "\030\003 \001(\007\022\n\n\002id\030\004 \001(\t\022\017\n\007bk_host\030\005 \001(\t\022\017\n\007v"
    "ersion\030\006 \001(\t\022\022\n\nhttpd_port\030\007 \001(\007\"*\n\rEven"
    "tSetValue\022\031\n\021event_description\030\001 \003(\t\"H\n\007"
    "EventKV\022\022\n\nevent_type\030\001 \001(\t\022)\n\tevent_set"
    "\030\002 \001(\0132\026.dstream.EventSetValue\"0\n\nEventM"
    "apPB\022\"\n\010event_kv\030\001 \003(\0132\020.dstream.EventKV"
    "\"I\n\014DelayEventKV\022\021\n\ttimestamp\030\001 \001(\006\022&\n\te"
    "vent_map\030\002 \001(\0132\023.dstream.EventMapPB\"=\n\014D"
    "elayEventPB\022-\n\016delay_event_kv\030\001 \003(\0132\025.ds"
    "tream.DelayEventKV\"\210\001\n\016PNResStaticsPB\022 \n"
    "\005total\030\001 \001(\0132\021.dstream.Resource\022\037\n\004used\030"
    "\002 \001(\0132\021.dstream.Resource\022#\n\010reserved\030\003 \001"
    "(\0132\021.dstream.Resource\022\016\n\006pe_num\030\004 \001(\007\"^\n"
    "\rPnidStaticsKV\022\034\n\005pn_id\030\001 \001(\0132\r.dstream."
    "PNID\022/\n\016pn_res_statics\030\002 \001(\0132\027.dstream.P"
    "NResStaticsPB\">\n\rPnidStaticsPB\022-\n\rpn_sta"
    "tics_kv\030\001 \003(\0132\026.dstream.PnidStaticsKV\"R\n"
    "\014PnidReportKV\022\034\n\005pn_id\030\001 \001(\0132\r.dstream.P"
    "NID\022$\n\tpn_report\030\002 \001(\0132\021.dstream.PNRepor"
    "t\"@\n\017PnidReportMapPB\022-\n\016pnid_report_kv\030\001"
    " \003(\0132\025.dstream.PnidReportKV", 947);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pm.proto", &protobuf_RegisterTypes);
  PM::default_instance_ = new PM();
  EventSetValue::default_instance_ = new EventSetValue();
  EventKV::default_instance_ = new EventKV();
  EventMapPB::default_instance_ = new EventMapPB();
  DelayEventKV::default_instance_ = new DelayEventKV();
  DelayEventPB::default_instance_ = new DelayEventPB();
  PNResStaticsPB::default_instance_ = new PNResStaticsPB();
  PnidStaticsKV::default_instance_ = new PnidStaticsKV();
  PnidStaticsPB::default_instance_ = new PnidStaticsPB();
  PnidReportKV::default_instance_ = new PnidReportKV();
  PnidReportMapPB::default_instance_ = new PnidReportMapPB();
  PM::default_instance_->InitAsDefaultInstance();
  EventSetValue::default_instance_->InitAsDefaultInstance();
  EventKV::default_instance_->InitAsDefaultInstance();
  EventMapPB::default_instance_->InitAsDefaultInstance();
  DelayEventKV::default_instance_->InitAsDefaultInstance();
  DelayEventPB::default_instance_->InitAsDefaultInstance();
  PNResStaticsPB::default_instance_->InitAsDefaultInstance();
  PnidStaticsKV::default_instance_->InitAsDefaultInstance();
  PnidStaticsPB::default_instance_->InitAsDefaultInstance();
  PnidReportKV::default_instance_->InitAsDefaultInstance();
  PnidReportMapPB::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pm_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pm_2eproto {
  StaticDescriptorInitializer_pm_2eproto() {
    protobuf_AddDesc_pm_2eproto();
  }
} static_descriptor_initializer_pm_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int PM::kHostFieldNumber;
const int PM::kSubmitPortFieldNumber;
const int PM::kReportPortFieldNumber;
const int PM::kIdFieldNumber;
const int PM::kBkHostFieldNumber;
const int PM::kVersionFieldNumber;
const int PM::kHttpdPortFieldNumber;
#endif  // !_MSC_VER

PM::PM()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PM::InitAsDefaultInstance() {
}

PM::PM(const PM& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PM::SharedCtor() {
  _cached_size_ = 0;
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  submit_port_ = 0u;
  report_port_ = 0u;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bk_host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  httpd_port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PM::~PM() {
  SharedDtor();
}

void PM::SharedDtor() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (bk_host_ != &::google::protobuf::internal::kEmptyString) {
    delete bk_host_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void PM::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PM::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PM_descriptor_;
}

const PM& PM::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pm_2eproto();  return *default_instance_;
}

PM* PM::default_instance_ = NULL;

PM* PM::New() const {
  return new PM;
}

void PM::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::kEmptyString) {
        host_->clear();
      }
    }
    submit_port_ = 0u;
    report_port_ = 0u;
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_bk_host()) {
      if (bk_host_ != &::google::protobuf::internal::kEmptyString) {
        bk_host_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    httpd_port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PM::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string host = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_submit_port;
        break;
      }
      
      // optional fixed32 submit_port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_submit_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &submit_port_)));
          set_has_submit_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_report_port;
        break;
      }
      
      // optional fixed32 report_port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_report_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &report_port_)));
          set_has_report_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_id;
        break;
      }
      
      // optional string id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_bk_host;
        break;
      }
      
      // optional string bk_host = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bk_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bk_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bk_host().data(), this->bk_host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_version;
        break;
      }
      
      // optional string version = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_httpd_port;
        break;
      }
      
      // optional fixed32 httpd_port = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_httpd_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &httpd_port_)));
          set_has_httpd_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PM::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->host(), output);
  }
  
  // optional fixed32 submit_port = 2;
  if (has_submit_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->submit_port(), output);
  }
  
  // optional fixed32 report_port = 3;
  if (has_report_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->report_port(), output);
  }
  
  // optional string id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->id(), output);
  }
  
  // optional string bk_host = 5;
  if (has_bk_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bk_host().data(), this->bk_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->bk_host(), output);
  }
  
  // optional string version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->version(), output);
  }
  
  // optional fixed32 httpd_port = 7;
  if (has_httpd_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->httpd_port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PM::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }
  
  // optional fixed32 submit_port = 2;
  if (has_submit_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->submit_port(), target);
  }
  
  // optional fixed32 report_port = 3;
  if (has_report_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->report_port(), target);
  }
  
  // optional string id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->id(), target);
  }
  
  // optional string bk_host = 5;
  if (has_bk_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bk_host().data(), this->bk_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->bk_host(), target);
  }
  
  // optional string version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->version(), target);
  }
  
  // optional fixed32 httpd_port = 7;
  if (has_httpd_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->httpd_port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PM::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string host = 1;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }
    
    // optional fixed32 submit_port = 2;
    if (has_submit_port()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 report_port = 3;
    if (has_report_port()) {
      total_size += 1 + 4;
    }
    
    // optional string id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // optional string bk_host = 5;
    if (has_bk_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bk_host());
    }
    
    // optional string version = 6;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
    // optional fixed32 httpd_port = 7;
    if (has_httpd_port()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PM::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PM* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PM*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PM::MergeFrom(const PM& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_submit_port()) {
      set_submit_port(from.submit_port());
    }
    if (from.has_report_port()) {
      set_report_port(from.report_port());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_bk_host()) {
      set_bk_host(from.bk_host());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_httpd_port()) {
      set_httpd_port(from.httpd_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PM::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PM::CopyFrom(const PM& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PM::IsInitialized() const {
  
  return true;
}

void PM::Swap(PM* other) {
  if (other != this) {
    std::swap(host_, other->host_);
    std::swap(submit_port_, other->submit_port_);
    std::swap(report_port_, other->report_port_);
    std::swap(id_, other->id_);
    std::swap(bk_host_, other->bk_host_);
    std::swap(version_, other->version_);
    std::swap(httpd_port_, other->httpd_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PM::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PM_descriptor_;
  metadata.reflection = PM_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventSetValue::kEventDescriptionFieldNumber;
#endif  // !_MSC_VER

EventSetValue::EventSetValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventSetValue::InitAsDefaultInstance() {
}

EventSetValue::EventSetValue(const EventSetValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventSetValue::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventSetValue::~EventSetValue() {
  SharedDtor();
}

void EventSetValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EventSetValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventSetValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventSetValue_descriptor_;
}

const EventSetValue& EventSetValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pm_2eproto();  return *default_instance_;
}

EventSetValue* EventSetValue::default_instance_ = NULL;

EventSetValue* EventSetValue::New() const {
  return new EventSetValue;
}

void EventSetValue::Clear() {
  event_description_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventSetValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string event_description = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_event_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->event_description(0).data(), this->event_description(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_event_description;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventSetValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string event_description = 1;
  for (int i = 0; i < this->event_description_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->event_description(i).data(), this->event_description(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->event_description(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventSetValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string event_description = 1;
  for (int i = 0; i < this->event_description_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_description(i).data(), this->event_description(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->event_description(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventSetValue::ByteSize() const {
  int total_size = 0;
  
  // repeated string event_description = 1;
  total_size += 1 * this->event_description_size();
  for (int i = 0; i < this->event_description_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->event_description(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventSetValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventSetValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventSetValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventSetValue::MergeFrom(const EventSetValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  event_description_.MergeFrom(from.event_description_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventSetValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventSetValue::CopyFrom(const EventSetValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventSetValue::IsInitialized() const {
  
  return true;
}

void EventSetValue::Swap(EventSetValue* other) {
  if (other != this) {
    event_description_.Swap(&other->event_description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventSetValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventSetValue_descriptor_;
  metadata.reflection = EventSetValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventKV::kEventTypeFieldNumber;
const int EventKV::kEventSetFieldNumber;
#endif  // !_MSC_VER

EventKV::EventKV()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventKV::InitAsDefaultInstance() {
  event_set_ = const_cast< ::dstream::EventSetValue*>(&::dstream::EventSetValue::default_instance());
}

EventKV::EventKV(const EventKV& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventKV::SharedCtor() {
  _cached_size_ = 0;
  event_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  event_set_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventKV::~EventKV() {
  SharedDtor();
}

void EventKV::SharedDtor() {
  if (event_type_ != &::google::protobuf::internal::kEmptyString) {
    delete event_type_;
  }
  if (this != default_instance_) {
    delete event_set_;
  }
}

void EventKV::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventKV::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventKV_descriptor_;
}

const EventKV& EventKV::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pm_2eproto();  return *default_instance_;
}

EventKV* EventKV::default_instance_ = NULL;

EventKV* EventKV::New() const {
  return new EventKV;
}

void EventKV::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_event_type()) {
      if (event_type_ != &::google::protobuf::internal::kEmptyString) {
        event_type_->clear();
      }
    }
    if (has_event_set()) {
      if (event_set_ != NULL) event_set_->::dstream::EventSetValue::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventKV::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string event_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->event_type().data(), this->event_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_event_set;
        break;
      }
      
      // optional .dstream.EventSetValue event_set = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event_set()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventKV::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string event_type = 1;
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_type().data(), this->event_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->event_type(), output);
  }
  
  // optional .dstream.EventSetValue event_set = 2;
  if (has_event_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->event_set(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventKV::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string event_type = 1;
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_type().data(), this->event_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->event_type(), target);
  }
  
  // optional .dstream.EventSetValue event_set = 2;
  if (has_event_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->event_set(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventKV::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string event_type = 1;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_type());
    }
    
    // optional .dstream.EventSetValue event_set = 2;
    if (has_event_set()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->event_set());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventKV::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventKV* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventKV*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventKV::MergeFrom(const EventKV& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
    if (from.has_event_set()) {
      mutable_event_set()->::dstream::EventSetValue::MergeFrom(from.event_set());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventKV::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventKV::CopyFrom(const EventKV& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventKV::IsInitialized() const {
  
  return true;
}

void EventKV::Swap(EventKV* other) {
  if (other != this) {
    std::swap(event_type_, other->event_type_);
    std::swap(event_set_, other->event_set_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventKV::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventKV_descriptor_;
  metadata.reflection = EventKV_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventMapPB::kEventKvFieldNumber;
#endif  // !_MSC_VER

EventMapPB::EventMapPB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventMapPB::InitAsDefaultInstance() {
}

EventMapPB::EventMapPB(const EventMapPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventMapPB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventMapPB::~EventMapPB() {
  SharedDtor();
}

void EventMapPB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EventMapPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventMapPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventMapPB_descriptor_;
}

const EventMapPB& EventMapPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pm_2eproto();  return *default_instance_;
}

EventMapPB* EventMapPB::default_instance_ = NULL;

EventMapPB* EventMapPB::New() const {
  return new EventMapPB;
}

void EventMapPB::Clear() {
  event_kv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventMapPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dstream.EventKV event_kv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_kv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_event_kv()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_event_kv;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventMapPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .dstream.EventKV event_kv = 1;
  for (int i = 0; i < this->event_kv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->event_kv(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventMapPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .dstream.EventKV event_kv = 1;
  for (int i = 0; i < this->event_kv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->event_kv(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventMapPB::ByteSize() const {
  int total_size = 0;
  
  // repeated .dstream.EventKV event_kv = 1;
  total_size += 1 * this->event_kv_size();
  for (int i = 0; i < this->event_kv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->event_kv(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventMapPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventMapPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventMapPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventMapPB::MergeFrom(const EventMapPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  event_kv_.MergeFrom(from.event_kv_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventMapPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventMapPB::CopyFrom(const EventMapPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventMapPB::IsInitialized() const {
  
  return true;
}

void EventMapPB::Swap(EventMapPB* other) {
  if (other != this) {
    event_kv_.Swap(&other->event_kv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventMapPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventMapPB_descriptor_;
  metadata.reflection = EventMapPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DelayEventKV::kTimestampFieldNumber;
const int DelayEventKV::kEventMapFieldNumber;
#endif  // !_MSC_VER

DelayEventKV::DelayEventKV()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DelayEventKV::InitAsDefaultInstance() {
  event_map_ = const_cast< ::dstream::EventMapPB*>(&::dstream::EventMapPB::default_instance());
}

DelayEventKV::DelayEventKV(const DelayEventKV& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DelayEventKV::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = GOOGLE_ULONGLONG(0);
  event_map_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DelayEventKV::~DelayEventKV() {
  SharedDtor();
}

void DelayEventKV::SharedDtor() {
  if (this != default_instance_) {
    delete event_map_;
  }
}

void DelayEventKV::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelayEventKV::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelayEventKV_descriptor_;
}

const DelayEventKV& DelayEventKV::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pm_2eproto();  return *default_instance_;
}

DelayEventKV* DelayEventKV::default_instance_ = NULL;

DelayEventKV* DelayEventKV::New() const {
  return new DelayEventKV;
}

void DelayEventKV::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = GOOGLE_ULONGLONG(0);
    if (has_event_map()) {
      if (event_map_ != NULL) event_map_->::dstream::EventMapPB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DelayEventKV::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_event_map;
        break;
      }
      
      // optional .dstream.EventMapPB event_map = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DelayEventKV::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->timestamp(), output);
  }
  
  // optional .dstream.EventMapPB event_map = 2;
  if (has_event_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->event_map(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DelayEventKV::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->timestamp(), target);
  }
  
  // optional .dstream.EventMapPB event_map = 2;
  if (has_event_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->event_map(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DelayEventKV::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }
    
    // optional .dstream.EventMapPB event_map = 2;
    if (has_event_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->event_map());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelayEventKV::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DelayEventKV* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DelayEventKV*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DelayEventKV::MergeFrom(const DelayEventKV& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_event_map()) {
      mutable_event_map()->::dstream::EventMapPB::MergeFrom(from.event_map());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DelayEventKV::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelayEventKV::CopyFrom(const DelayEventKV& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelayEventKV::IsInitialized() const {
  
  return true;
}

void DelayEventKV::Swap(DelayEventKV* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(event_map_, other->event_map_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DelayEventKV::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelayEventKV_descriptor_;
  metadata.reflection = DelayEventKV_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DelayEventPB::kDelayEventKvFieldNumber;
#endif  // !_MSC_VER

DelayEventPB::DelayEventPB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DelayEventPB::InitAsDefaultInstance() {
}

DelayEventPB::DelayEventPB(const DelayEventPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DelayEventPB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DelayEventPB::~DelayEventPB() {
  SharedDtor();
}

void DelayEventPB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DelayEventPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelayEventPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelayEventPB_descriptor_;
}

const DelayEventPB& DelayEventPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pm_2eproto();  return *default_instance_;
}

DelayEventPB* DelayEventPB::default_instance_ = NULL;

DelayEventPB* DelayEventPB::New() const {
  return new DelayEventPB;
}

void DelayEventPB::Clear() {
  delay_event_kv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DelayEventPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dstream.DelayEventKV delay_event_kv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_delay_event_kv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_delay_event_kv()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_delay_event_kv;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DelayEventPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .dstream.DelayEventKV delay_event_kv = 1;
  for (int i = 0; i < this->delay_event_kv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->delay_event_kv(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DelayEventPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .dstream.DelayEventKV delay_event_kv = 1;
  for (int i = 0; i < this->delay_event_kv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->delay_event_kv(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DelayEventPB::ByteSize() const {
  int total_size = 0;
  
  // repeated .dstream.DelayEventKV delay_event_kv = 1;
  total_size += 1 * this->delay_event_kv_size();
  for (int i = 0; i < this->delay_event_kv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->delay_event_kv(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelayEventPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DelayEventPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DelayEventPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DelayEventPB::MergeFrom(const DelayEventPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  delay_event_kv_.MergeFrom(from.delay_event_kv_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DelayEventPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelayEventPB::CopyFrom(const DelayEventPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelayEventPB::IsInitialized() const {
  
  return true;
}

void DelayEventPB::Swap(DelayEventPB* other) {
  if (other != this) {
    delay_event_kv_.Swap(&other->delay_event_kv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DelayEventPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelayEventPB_descriptor_;
  metadata.reflection = DelayEventPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PNResStaticsPB::kTotalFieldNumber;
const int PNResStaticsPB::kUsedFieldNumber;
const int PNResStaticsPB::kReservedFieldNumber;
const int PNResStaticsPB::kPeNumFieldNumber;
#endif  // !_MSC_VER

PNResStaticsPB::PNResStaticsPB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PNResStaticsPB::InitAsDefaultInstance() {
  total_ = const_cast< ::dstream::Resource*>(&::dstream::Resource::default_instance());
  used_ = const_cast< ::dstream::Resource*>(&::dstream::Resource::default_instance());
  reserved_ = const_cast< ::dstream::Resource*>(&::dstream::Resource::default_instance());
}

PNResStaticsPB::PNResStaticsPB(const PNResStaticsPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PNResStaticsPB::SharedCtor() {
  _cached_size_ = 0;
  total_ = NULL;
  used_ = NULL;
  reserved_ = NULL;
  pe_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PNResStaticsPB::~PNResStaticsPB() {
  SharedDtor();
}

void PNResStaticsPB::SharedDtor() {
  if (this != default_instance_) {
    delete total_;
    delete used_;
    delete reserved_;
  }
}

void PNResStaticsPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PNResStaticsPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PNResStaticsPB_descriptor_;
}

const PNResStaticsPB& PNResStaticsPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pm_2eproto();  return *default_instance_;
}

PNResStaticsPB* PNResStaticsPB::default_instance_ = NULL;

PNResStaticsPB* PNResStaticsPB::New() const {
  return new PNResStaticsPB;
}

void PNResStaticsPB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_total()) {
      if (total_ != NULL) total_->::dstream::Resource::Clear();
    }
    if (has_used()) {
      if (used_ != NULL) used_->::dstream::Resource::Clear();
    }
    if (has_reserved()) {
      if (reserved_ != NULL) reserved_->::dstream::Resource::Clear();
    }
    pe_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PNResStaticsPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dstream.Resource total = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_total()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_used;
        break;
      }
      
      // optional .dstream.Resource used = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_used:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_used()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reserved;
        break;
      }
      
      // optional .dstream.Resource reserved = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reserved:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reserved()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_pe_num;
        break;
      }
      
      // optional fixed32 pe_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pe_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &pe_num_)));
          set_has_pe_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PNResStaticsPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dstream.Resource total = 1;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->total(), output);
  }
  
  // optional .dstream.Resource used = 2;
  if (has_used()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->used(), output);
  }
  
  // optional .dstream.Resource reserved = 3;
  if (has_reserved()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reserved(), output);
  }
  
  // optional fixed32 pe_num = 4;
  if (has_pe_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->pe_num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PNResStaticsPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dstream.Resource total = 1;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->total(), target);
  }
  
  // optional .dstream.Resource used = 2;
  if (has_used()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->used(), target);
  }
  
  // optional .dstream.Resource reserved = 3;
  if (has_reserved()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reserved(), target);
  }
  
  // optional fixed32 pe_num = 4;
  if (has_pe_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->pe_num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PNResStaticsPB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dstream.Resource total = 1;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->total());
    }
    
    // optional .dstream.Resource used = 2;
    if (has_used()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->used());
    }
    
    // optional .dstream.Resource reserved = 3;
    if (has_reserved()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reserved());
    }
    
    // optional fixed32 pe_num = 4;
    if (has_pe_num()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PNResStaticsPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PNResStaticsPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PNResStaticsPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PNResStaticsPB::MergeFrom(const PNResStaticsPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total()) {
      mutable_total()->::dstream::Resource::MergeFrom(from.total());
    }
    if (from.has_used()) {
      mutable_used()->::dstream::Resource::MergeFrom(from.used());
    }
    if (from.has_reserved()) {
      mutable_reserved()->::dstream::Resource::MergeFrom(from.reserved());
    }
    if (from.has_pe_num()) {
      set_pe_num(from.pe_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PNResStaticsPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PNResStaticsPB::CopyFrom(const PNResStaticsPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PNResStaticsPB::IsInitialized() const {
  
  return true;
}

void PNResStaticsPB::Swap(PNResStaticsPB* other) {
  if (other != this) {
    std::swap(total_, other->total_);
    std::swap(used_, other->used_);
    std::swap(reserved_, other->reserved_);
    std::swap(pe_num_, other->pe_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PNResStaticsPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PNResStaticsPB_descriptor_;
  metadata.reflection = PNResStaticsPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PnidStaticsKV::kPnIdFieldNumber;
const int PnidStaticsKV::kPnResStaticsFieldNumber;
#endif  // !_MSC_VER

PnidStaticsKV::PnidStaticsKV()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PnidStaticsKV::InitAsDefaultInstance() {
  pn_id_ = const_cast< ::dstream::PNID*>(&::dstream::PNID::default_instance());
  pn_res_statics_ = const_cast< ::dstream::PNResStaticsPB*>(&::dstream::PNResStaticsPB::default_instance());
}

PnidStaticsKV::PnidStaticsKV(const PnidStaticsKV& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PnidStaticsKV::SharedCtor() {
  _cached_size_ = 0;
  pn_id_ = NULL;
  pn_res_statics_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PnidStaticsKV::~PnidStaticsKV() {
  SharedDtor();
}

void PnidStaticsKV::SharedDtor() {
  if (this != default_instance_) {
    delete pn_id_;
    delete pn_res_statics_;
  }
}

void PnidStaticsKV::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PnidStaticsKV::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PnidStaticsKV_descriptor_;
}

const PnidStaticsKV& PnidStaticsKV::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pm_2eproto();  return *default_instance_;
}

PnidStaticsKV* PnidStaticsKV::default_instance_ = NULL;

PnidStaticsKV* PnidStaticsKV::New() const {
  return new PnidStaticsKV;
}

void PnidStaticsKV::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pn_id()) {
      if (pn_id_ != NULL) pn_id_->::dstream::PNID::Clear();
    }
    if (has_pn_res_statics()) {
      if (pn_res_statics_ != NULL) pn_res_statics_->::dstream::PNResStaticsPB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PnidStaticsKV::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dstream.PNID pn_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pn_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pn_res_statics;
        break;
      }
      
      // optional .dstream.PNResStaticsPB pn_res_statics = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pn_res_statics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pn_res_statics()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PnidStaticsKV::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dstream.PNID pn_id = 1;
  if (has_pn_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pn_id(), output);
  }
  
  // optional .dstream.PNResStaticsPB pn_res_statics = 2;
  if (has_pn_res_statics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pn_res_statics(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PnidStaticsKV::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dstream.PNID pn_id = 1;
  if (has_pn_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pn_id(), target);
  }
  
  // optional .dstream.PNResStaticsPB pn_res_statics = 2;
  if (has_pn_res_statics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pn_res_statics(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PnidStaticsKV::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dstream.PNID pn_id = 1;
    if (has_pn_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pn_id());
    }
    
    // optional .dstream.PNResStaticsPB pn_res_statics = 2;
    if (has_pn_res_statics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pn_res_statics());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PnidStaticsKV::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PnidStaticsKV* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PnidStaticsKV*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PnidStaticsKV::MergeFrom(const PnidStaticsKV& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pn_id()) {
      mutable_pn_id()->::dstream::PNID::MergeFrom(from.pn_id());
    }
    if (from.has_pn_res_statics()) {
      mutable_pn_res_statics()->::dstream::PNResStaticsPB::MergeFrom(from.pn_res_statics());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PnidStaticsKV::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PnidStaticsKV::CopyFrom(const PnidStaticsKV& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PnidStaticsKV::IsInitialized() const {
  
  return true;
}

void PnidStaticsKV::Swap(PnidStaticsKV* other) {
  if (other != this) {
    std::swap(pn_id_, other->pn_id_);
    std::swap(pn_res_statics_, other->pn_res_statics_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PnidStaticsKV::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PnidStaticsKV_descriptor_;
  metadata.reflection = PnidStaticsKV_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PnidStaticsPB::kPnStaticsKvFieldNumber;
#endif  // !_MSC_VER

PnidStaticsPB::PnidStaticsPB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PnidStaticsPB::InitAsDefaultInstance() {
}

PnidStaticsPB::PnidStaticsPB(const PnidStaticsPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PnidStaticsPB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PnidStaticsPB::~PnidStaticsPB() {
  SharedDtor();
}

void PnidStaticsPB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PnidStaticsPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PnidStaticsPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PnidStaticsPB_descriptor_;
}

const PnidStaticsPB& PnidStaticsPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pm_2eproto();  return *default_instance_;
}

PnidStaticsPB* PnidStaticsPB::default_instance_ = NULL;

PnidStaticsPB* PnidStaticsPB::New() const {
  return new PnidStaticsPB;
}

void PnidStaticsPB::Clear() {
  pn_statics_kv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PnidStaticsPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dstream.PnidStaticsKV pn_statics_kv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pn_statics_kv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pn_statics_kv()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pn_statics_kv;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PnidStaticsPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .dstream.PnidStaticsKV pn_statics_kv = 1;
  for (int i = 0; i < this->pn_statics_kv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pn_statics_kv(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PnidStaticsPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .dstream.PnidStaticsKV pn_statics_kv = 1;
  for (int i = 0; i < this->pn_statics_kv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pn_statics_kv(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PnidStaticsPB::ByteSize() const {
  int total_size = 0;
  
  // repeated .dstream.PnidStaticsKV pn_statics_kv = 1;
  total_size += 1 * this->pn_statics_kv_size();
  for (int i = 0; i < this->pn_statics_kv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pn_statics_kv(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PnidStaticsPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PnidStaticsPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PnidStaticsPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PnidStaticsPB::MergeFrom(const PnidStaticsPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  pn_statics_kv_.MergeFrom(from.pn_statics_kv_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PnidStaticsPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PnidStaticsPB::CopyFrom(const PnidStaticsPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PnidStaticsPB::IsInitialized() const {
  
  return true;
}

void PnidStaticsPB::Swap(PnidStaticsPB* other) {
  if (other != this) {
    pn_statics_kv_.Swap(&other->pn_statics_kv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PnidStaticsPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PnidStaticsPB_descriptor_;
  metadata.reflection = PnidStaticsPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PnidReportKV::kPnIdFieldNumber;
const int PnidReportKV::kPnReportFieldNumber;
#endif  // !_MSC_VER

PnidReportKV::PnidReportKV()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PnidReportKV::InitAsDefaultInstance() {
  pn_id_ = const_cast< ::dstream::PNID*>(&::dstream::PNID::default_instance());
  pn_report_ = const_cast< ::dstream::PNReport*>(&::dstream::PNReport::default_instance());
}

PnidReportKV::PnidReportKV(const PnidReportKV& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PnidReportKV::SharedCtor() {
  _cached_size_ = 0;
  pn_id_ = NULL;
  pn_report_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PnidReportKV::~PnidReportKV() {
  SharedDtor();
}

void PnidReportKV::SharedDtor() {
  if (this != default_instance_) {
    delete pn_id_;
    delete pn_report_;
  }
}

void PnidReportKV::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PnidReportKV::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PnidReportKV_descriptor_;
}

const PnidReportKV& PnidReportKV::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pm_2eproto();  return *default_instance_;
}

PnidReportKV* PnidReportKV::default_instance_ = NULL;

PnidReportKV* PnidReportKV::New() const {
  return new PnidReportKV;
}

void PnidReportKV::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pn_id()) {
      if (pn_id_ != NULL) pn_id_->::dstream::PNID::Clear();
    }
    if (has_pn_report()) {
      if (pn_report_ != NULL) pn_report_->::dstream::PNReport::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PnidReportKV::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dstream.PNID pn_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pn_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pn_report;
        break;
      }
      
      // optional .dstream.PNReport pn_report = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pn_report:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pn_report()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PnidReportKV::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dstream.PNID pn_id = 1;
  if (has_pn_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pn_id(), output);
  }
  
  // optional .dstream.PNReport pn_report = 2;
  if (has_pn_report()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pn_report(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PnidReportKV::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dstream.PNID pn_id = 1;
  if (has_pn_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pn_id(), target);
  }
  
  // optional .dstream.PNReport pn_report = 2;
  if (has_pn_report()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pn_report(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PnidReportKV::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dstream.PNID pn_id = 1;
    if (has_pn_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pn_id());
    }
    
    // optional .dstream.PNReport pn_report = 2;
    if (has_pn_report()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pn_report());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PnidReportKV::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PnidReportKV* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PnidReportKV*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PnidReportKV::MergeFrom(const PnidReportKV& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pn_id()) {
      mutable_pn_id()->::dstream::PNID::MergeFrom(from.pn_id());
    }
    if (from.has_pn_report()) {
      mutable_pn_report()->::dstream::PNReport::MergeFrom(from.pn_report());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PnidReportKV::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PnidReportKV::CopyFrom(const PnidReportKV& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PnidReportKV::IsInitialized() const {
  
  return true;
}

void PnidReportKV::Swap(PnidReportKV* other) {
  if (other != this) {
    std::swap(pn_id_, other->pn_id_);
    std::swap(pn_report_, other->pn_report_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PnidReportKV::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PnidReportKV_descriptor_;
  metadata.reflection = PnidReportKV_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PnidReportMapPB::kPnidReportKvFieldNumber;
#endif  // !_MSC_VER

PnidReportMapPB::PnidReportMapPB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PnidReportMapPB::InitAsDefaultInstance() {
}

PnidReportMapPB::PnidReportMapPB(const PnidReportMapPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PnidReportMapPB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PnidReportMapPB::~PnidReportMapPB() {
  SharedDtor();
}

void PnidReportMapPB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PnidReportMapPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PnidReportMapPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PnidReportMapPB_descriptor_;
}

const PnidReportMapPB& PnidReportMapPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pm_2eproto();  return *default_instance_;
}

PnidReportMapPB* PnidReportMapPB::default_instance_ = NULL;

PnidReportMapPB* PnidReportMapPB::New() const {
  return new PnidReportMapPB;
}

void PnidReportMapPB::Clear() {
  pnid_report_kv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PnidReportMapPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dstream.PnidReportKV pnid_report_kv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pnid_report_kv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pnid_report_kv()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pnid_report_kv;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PnidReportMapPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .dstream.PnidReportKV pnid_report_kv = 1;
  for (int i = 0; i < this->pnid_report_kv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pnid_report_kv(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PnidReportMapPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .dstream.PnidReportKV pnid_report_kv = 1;
  for (int i = 0; i < this->pnid_report_kv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pnid_report_kv(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PnidReportMapPB::ByteSize() const {
  int total_size = 0;
  
  // repeated .dstream.PnidReportKV pnid_report_kv = 1;
  total_size += 1 * this->pnid_report_kv_size();
  for (int i = 0; i < this->pnid_report_kv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pnid_report_kv(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PnidReportMapPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PnidReportMapPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PnidReportMapPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PnidReportMapPB::MergeFrom(const PnidReportMapPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  pnid_report_kv_.MergeFrom(from.pnid_report_kv_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PnidReportMapPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PnidReportMapPB::CopyFrom(const PnidReportMapPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PnidReportMapPB::IsInitialized() const {
  
  return true;
}

void PnidReportMapPB::Swap(PnidReportMapPB* other) {
  if (other != this) {
    pnid_report_kv_.Swap(&other->pnid_report_kv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PnidReportMapPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PnidReportMapPB_descriptor_;
  metadata.reflection = PnidReportMapPB_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dstream

// @@protoc_insertion_point(global_scope)
