// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "application.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dstream {

namespace {

const ::google::protobuf::Descriptor* User_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  User_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppID_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* Processor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Processor_reflection_ = NULL;
const ::google::protobuf::Descriptor* Publish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Publish_reflection_ = NULL;
const ::google::protobuf::Descriptor* BigpipePub_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BigpipePub_reflection_ = NULL;
const ::google::protobuf::Descriptor* Subscribe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Subscribe_reflection_ = NULL;
const ::google::protobuf::Descriptor* LocalSub_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocalSub_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScribeSub_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScribeSub_reflection_ = NULL;
const ::google::protobuf::Descriptor* BigpipeSub_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BigpipeSub_reflection_ = NULL;
const ::google::protobuf::Descriptor* HdfsSub_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HdfsSub_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProcessorSub_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcessorSub_reflection_ = NULL;
const ::google::protobuf::Descriptor* FakeSub_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FakeSub_reflection_ = NULL;
const ::google::protobuf::Descriptor* Topology_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Topology_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlowControl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlowControl_reflection_ = NULL;
const ::google::protobuf::Descriptor* Application_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Application_reflection_ = NULL;
const ::google::protobuf::Descriptor* BackupPEID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BackupPEID_reflection_ = NULL;
const ::google::protobuf::Descriptor* BackupPE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BackupPE_reflection_ = NULL;
const ::google::protobuf::Descriptor* logConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  logConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProcessorElement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcessorElement_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubPoint_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProcessorRole_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AppStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PEStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_application_2eproto() {
  protobuf_AddDesc_application_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "application.proto");
  GOOGLE_CHECK(file != NULL);
  User_descriptor_ = file->message_type(0);
  static const int User_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, hostip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, version_),
  };
  User_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      User_descriptor_,
      User::default_instance_,
      User_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(User));
  AppID_descriptor_ = file->message_type(1);
  static const int AppID_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppID, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppID, id_),
  };
  AppID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppID_descriptor_,
      AppID::default_instance_,
      AppID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppID));
  FileConfig_descriptor_ = file->message_type(2);
  static const int FileConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileConfig, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileConfig, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileConfig, password_),
  };
  FileConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileConfig_descriptor_,
      FileConfig::default_instance_,
      FileConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileConfig));
  Processor_descriptor_ = file->message_type(3);
  static const int Processor_offsets_[33] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor, descr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor, exec_cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor, resource_require_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor, parallism_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor, backup_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor, publish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor, subscribe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor, status_mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor, tuple_batch_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor, force_forward_tuples_period_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor, dynamic_proto_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor, send_queue_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor, recv_queue_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor, send_watermark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor, recv_watermark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor, fetch_timeout_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor, send_timeout_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor, exec_workers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor, net_workers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor, disk_workers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor, small_tran_buf_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor, small_tran_buf_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor, big_tran_buf_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor, buf_low_mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor, tuple_batch_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor, pn_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor, persist_progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor, cur_revision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor, max_revision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor, flow_control_),
  };
  Processor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Processor_descriptor_,
      Processor::default_instance_,
      Processor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor));
  Publish_descriptor_ = file->message_type(4);
  static const int Publish_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Publish, tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Publish, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Publish, bigpipe_),
  };
  Publish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Publish_descriptor_,
      Publish::default_instance_,
      Publish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Publish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Publish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Publish));
  BigpipePub_descriptor_ = file->message_type(5);
  static const int BigpipePub_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigpipePub, pipe_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigpipePub, pub_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigpipePub, pipelet_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigpipePub, retry_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigpipePub, retry_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigpipePub, pub_user_),
  };
  BigpipePub_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BigpipePub_descriptor_,
      BigpipePub::default_instance_,
      BigpipePub_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigpipePub, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigpipePub, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BigpipePub));
  Subscribe_descriptor_ = file->message_type(6);
  static const int Subscribe_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscribe, bigpipe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscribe, hdfs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscribe, processor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscribe, localfile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscribe, scribe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscribe, fake_),
  };
  Subscribe_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Subscribe_descriptor_,
      Subscribe::default_instance_,
      Subscribe_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscribe, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscribe, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Subscribe));
  LocalSub_descriptor_ = file->message_type(7);
  static const int LocalSub_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalSub, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalSub, sub_point_),
  };
  LocalSub_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LocalSub_descriptor_,
      LocalSub::default_instance_,
      LocalSub_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalSub, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalSub, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LocalSub));
  ScribeSub_descriptor_ = file->message_type(8);
  static const int ScribeSub_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScribeSub, buffersize_),
  };
  ScribeSub_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScribeSub_descriptor_,
      ScribeSub::default_instance_,
      ScribeSub_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScribeSub, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScribeSub, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScribeSub));
  BigpipeSub_descriptor_ = file->message_type(9);
  static const int BigpipeSub_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigpipeSub, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigpipeSub, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigpipeSub, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigpipeSub, pipelet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigpipeSub, pipelet_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigpipeSub, pipelet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigpipeSub, sub_point_),
  };
  BigpipeSub_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BigpipeSub_descriptor_,
      BigpipeSub::default_instance_,
      BigpipeSub_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigpipeSub, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigpipeSub, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BigpipeSub));
  HdfsSub_descriptor_ = file->message_type(10);
  static const int HdfsSub_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HdfsSub, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HdfsSub, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HdfsSub, password_),
  };
  HdfsSub_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HdfsSub_descriptor_,
      HdfsSub::default_instance_,
      HdfsSub_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HdfsSub, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HdfsSub, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HdfsSub));
  ProcessorSub_descriptor_ = file->message_type(11);
  static const int ProcessorSub_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorSub, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorSub, tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorSub, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorSub, password_),
  };
  ProcessorSub_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProcessorSub_descriptor_,
      ProcessorSub::default_instance_,
      ProcessorSub_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorSub, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorSub, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProcessorSub));
  FakeSub_descriptor_ = file->message_type(12);
  static const int FakeSub_offsets_[1] = {
  };
  FakeSub_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FakeSub_descriptor_,
      FakeSub::default_instance_,
      FakeSub_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FakeSub, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FakeSub, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FakeSub));
  Topology_descriptor_ = file->message_type(13);
  static const int Topology_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Topology, processor_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Topology, processors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Topology, importer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Topology, exporter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Topology, upstream_bigpipe_num_),
  };
  Topology_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Topology_descriptor_,
      Topology::default_instance_,
      Topology_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Topology, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Topology, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Topology));
  FlowControl_descriptor_ = file->message_type(14);
  static const int FlowControl_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowControl, qps_limit_),
  };
  FlowControl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlowControl_descriptor_,
      FlowControl::default_instance_,
      FlowControl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowControl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowControl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlowControl));
  Application_descriptor_ = file->message_type(15);
  static const int Application_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Application, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Application, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Application, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Application, descr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Application, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Application, app_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Application, checkpoint_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Application, bigpipe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Application, topology_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Application, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Application, log_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Application, submit_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Application, data_strategy_),
  };
  Application_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Application_descriptor_,
      Application::default_instance_,
      Application_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Application, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Application, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Application));
  BackupPEID_descriptor_ = file->message_type(16);
  static const int BackupPEID_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupPEID, id_),
  };
  BackupPEID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BackupPEID_descriptor_,
      BackupPEID::default_instance_,
      BackupPEID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupPEID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupPEID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BackupPEID));
  BackupPE_descriptor_ = file->message_type(17);
  static const int BackupPE_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupPE, backup_pe_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupPE, pn_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupPE, last_assignment_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupPE, pe_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupPE, last_fail_pn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupPE, fail_number_),
  };
  BackupPE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BackupPE_descriptor_,
      BackupPE::default_instance_,
      BackupPE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupPE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupPE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BackupPE));
  logConfig_descriptor_ = file->message_type(18);
  static const int logConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logConfig, bigpipe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logConfig, pipe_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logConfig, pipelet_),
  };
  logConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      logConfig_descriptor_,
      logConfig::default_instance_,
      logConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(logConfig));
  ProcessorElement_descriptor_ = file->message_type(19);
  static const int ProcessorElement_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorElement, app_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorElement, processor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorElement, pe_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorElement, serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorElement, log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorElement, backups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorElement, primary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorElement, processor_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorElement, resource_),
  };
  ProcessorElement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProcessorElement_descriptor_,
      ProcessorElement::default_instance_,
      ProcessorElement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorElement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorElement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProcessorElement));
  SubPoint_descriptor_ = file->message_type(20);
  static const int SubPoint_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubPoint, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubPoint, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubPoint, seq_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubPoint, pipelet_),
  };
  SubPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubPoint_descriptor_,
      SubPoint::default_instance_,
      SubPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubPoint));
  ProcessorRole_descriptor_ = file->enum_type(0);
  AppStatus_descriptor_ = file->enum_type(1);
  PEStatus_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_application_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    User_descriptor_, &User::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppID_descriptor_, &AppID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileConfig_descriptor_, &FileConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_descriptor_, &Processor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Publish_descriptor_, &Publish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BigpipePub_descriptor_, &BigpipePub::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Subscribe_descriptor_, &Subscribe::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LocalSub_descriptor_, &LocalSub::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScribeSub_descriptor_, &ScribeSub::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BigpipeSub_descriptor_, &BigpipeSub::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HdfsSub_descriptor_, &HdfsSub::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProcessorSub_descriptor_, &ProcessorSub::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FakeSub_descriptor_, &FakeSub::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Topology_descriptor_, &Topology::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlowControl_descriptor_, &FlowControl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Application_descriptor_, &Application::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BackupPEID_descriptor_, &BackupPEID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BackupPE_descriptor_, &BackupPE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    logConfig_descriptor_, &logConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProcessorElement_descriptor_, &ProcessorElement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubPoint_descriptor_, &SubPoint::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_application_2eproto() {
  delete User::default_instance_;
  delete User_reflection_;
  delete AppID::default_instance_;
  delete AppID_reflection_;
  delete FileConfig::default_instance_;
  delete FileConfig_reflection_;
  delete Processor::default_instance_;
  delete Processor_reflection_;
  delete Publish::default_instance_;
  delete Publish_reflection_;
  delete BigpipePub::default_instance_;
  delete BigpipePub_reflection_;
  delete Subscribe::default_instance_;
  delete Subscribe_reflection_;
  delete LocalSub::default_instance_;
  delete LocalSub_reflection_;
  delete ScribeSub::default_instance_;
  delete ScribeSub_reflection_;
  delete BigpipeSub::default_instance_;
  delete BigpipeSub_reflection_;
  delete HdfsSub::default_instance_;
  delete HdfsSub_reflection_;
  delete ProcessorSub::default_instance_;
  delete ProcessorSub_reflection_;
  delete FakeSub::default_instance_;
  delete FakeSub_reflection_;
  delete Topology::default_instance_;
  delete Topology_reflection_;
  delete FlowControl::default_instance_;
  delete FlowControl_reflection_;
  delete Application::default_instance_;
  delete Application_reflection_;
  delete BackupPEID::default_instance_;
  delete BackupPEID_reflection_;
  delete BackupPE::default_instance_;
  delete BackupPE_reflection_;
  delete logConfig::default_instance_;
  delete logConfig_reflection_;
  delete ProcessorElement::default_instance_;
  delete ProcessorElement_reflection_;
  delete SubPoint::default_instance_;
  delete SubPoint_reflection_;
}

void protobuf_AddDesc_application_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::dstream::protobuf_AddDesc_dstream_5fproto_5fcommon_2eproto();
  ::dstream::protobuf_AddDesc_pn_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021application.proto\022\007dstream\032\032dstream_pr"
    "oto_common.proto\032\010pn.proto\"q\n\004User\022\022\n\nse"
    "ssion_id\030\001 \001(\006\022\020\n\010username\030\002 \001(\t\022\020\n\010pass"
    "word\030\003 \001(\t\022\020\n\010hostname\030\004 \001(\t\022\016\n\006hostip\030\005"
    " \001(\t\022\017\n\007version\030\006 \001(\t\"\'\n\005AppID\022\022\n\nsessio"
    "n_id\030\001 \001(\006\022\n\n\002id\030\002 \001(\006\">\n\nFileConfig\022\014\n\004"
    "path\030\001 \001(\t\022\020\n\010username\030\002 \001(\t\022\020\n\010password"
    "\030\003 \001(\t\"\360\006\n\tProcessor\022\014\n\004name\030\001 \001(\t\022\r\n\005de"
    "scr\030\002 \001(\t\022 \n\002id\030\003 \001(\0132\024.dstream.Processo"
    "rID\022$\n\004role\030\004 \001(\0162\026.dstream.ProcessorRol"
    "e\022\020\n\010exec_cmd\030\005 \001(\t\022+\n\020resource_require\030"
    "\007 \001(\0132\021.dstream.Resource\022\021\n\tparallism\030\010 "
    "\001(\007\022\022\n\nbackup_num\030\t \001(\007\022!\n\007publish\030\n \001(\013"
    "2\020.dstream.Publish\022%\n\tsubscribe\030\013 \001(\0132\022."
    "dstream.Subscribe\022\023\n\013status_mark\030\014 \001(\t\022\031"
    "\n\021tuple_batch_count\030\r \001(\006\022&\n\036force_forwa"
    "rd_tuples_period_ms\030\016 \001(\006\022\031\n\021dynamic_pro"
    "to_dir\030\017 \001(\t\022\027\n\017send_queue_size\030\020 \001(\006\022\027\n"
    "\017recv_queue_size\030\021 \001(\006\022\026\n\016send_watermark"
    "\030\022 \001(\002\022\026\n\016recv_watermark\030\023 \001(\002\022\030\n\020fetch_"
    "timeout_ms\030\024 \001(\006\022\027\n\017send_timeout_ms\030\025 \001("
    "\006\022\024\n\014exec_workers\030\026 \001(\007\022\023\n\013net_workers\030\027"
    " \001(\007\022\024\n\014disk_workers\030\030 \001(\007\022\032\n\022small_tran"
    "_buf_num\030\031 \001(\006\022\033\n\023small_tran_buf_size\030\032 "
    "\001(\006\022\030\n\020big_tran_buf_num\030\033 \001(\006\022\024\n\014buf_low"
    "_mark\030\034 \001(\002\022\030\n\020tuple_batch_size\030\035 \001(\006\022\020\n"
    "\010pn_group\030\036 \001(\t\022\030\n\020persist_progress\030\037 \001("
    "\t\022\024\n\014cur_revision\030  \001(\r\022\024\n\014max_revision\030"
    "! \001(\r\022*\n\014flow_control\030\" \001(\0132\024.dstream.Fl"
    "owControl\"K\n\007Publish\022\014\n\004tags\030\001 \003(\t\022\014\n\004ty"
    "pe\030\002 \001(\t\022$\n\007bigpipe\030\003 \001(\0132\023.dstream.Bigp"
    "ipePub\"\205\001\n\nBigpipePub\022\021\n\tpipe_name\030\001 \001(\t"
    "\022\021\n\tpub_token\030\002 \001(\t\022\023\n\013pipelet_num\030\003 \001(\007"
    "\022\022\n\nretry_time\030\004 \001(\007\022\026\n\016retry_interval\030\005"
    " \001(\007\022\020\n\010pub_user\030\006 \001(\t\"\345\001\n\tSubscribe\022$\n\007"
    "bigpipe\030\001 \003(\0132\023.dstream.BigpipeSub\022\036\n\004hd"
    "fs\030\002 \003(\0132\020.dstream.HdfsSub\022(\n\tprocessor\030"
    "\003 \003(\0132\025.dstream.ProcessorSub\022$\n\tlocalfil"
    "e\030\004 \003(\0132\021.dstream.LocalSub\022\"\n\006scribe\030\005 \003"
    "(\0132\022.dstream.ScribeSub\022\036\n\004fake\030\006 \003(\0132\020.d"
    "stream.FakeSub\"+\n\010LocalSub\022\014\n\004path\030\001 \001(\t"
    "\022\021\n\tsub_point\030\002 \001(\006\"\037\n\tScribeSub\022\022\n\nbuff"
    "ersize\030\001 \001(\007\"\213\001\n\nBigpipeSub\022\014\n\004name\030\001 \001("
    "\t\022\020\n\010username\030\002 \001(\t\022\020\n\010password\030\003 \001(\t\022\017\n"
    "\007pipelet\030\004 \001(\t\022\023\n\013pipelet_num\030\005 \001(\007\022\022\n\np"
    "ipelet_id\030\006 \003(\007\022\021\n\tsub_point\030\007 \001(\006\";\n\007Hd"
    "fsSub\022\014\n\004path\030\001 \001(\t\022\020\n\010username\030\002 \001(\t\022\020\n"
    "\010password\030\003 \001(\t\"N\n\014ProcessorSub\022\014\n\004name\030"
    "\001 \001(\t\022\014\n\004tags\030\002 \001(\t\022\020\n\010username\030\003 \001(\t\022\020\n"
    "\010password\030\004 \001(\t\"\t\n\007FakeSub\"\275\001\n\010Topology\022"
    "\025\n\rprocessor_num\030\001 \001(\007\022&\n\nprocessors\030\002 \003"
    "(\0132\022.dstream.Processor\022)\n\013importer_id\030\003 "
    "\003(\0132\024.dstream.ProcessorID\022)\n\013exporter_id"
    "\030\004 \003(\0132\024.dstream.ProcessorID\022\034\n\024upstream"
    "_bigpipe_num\030\005 \001(\007\"$\n\013FlowControl\022\025\n\tqps"
    "_limit\030\001 \001(\005:\002-1\"\216\003\n\013Application\022\022\n\nsess"
    "ion_id\030\001 \001(\006\022\032\n\002id\030\002 \001(\0132\016.dstream.AppID"
    "\022\014\n\004name\030\003 \001(\t\022\r\n\005descr\030\004 \001(\t\022\033\n\004user\030\005 "
    "\001(\0132\r.dstream.User\022%\n\010app_path\030\006 \001(\0132\023.d"
    "stream.FileConfig\022,\n\017checkpoint_path\030\007 \001"
    "(\0132\023.dstream.FileConfig\022$\n\007bigpipe\030\010 \001(\013"
    "2\023.dstream.BigpipeSub\022#\n\010topology\030\t \001(\0132"
    "\021.dstream.Topology\022\"\n\006status\030\n \001(\0162\022.dst"
    "ream.AppStatus\022%\n\010log_path\030\013 \001(\0132\023.dstre"
    "am.FileConfig\022\023\n\013submit_time\030\014 \001(\006\022\025\n\rda"
    "ta_strategy\030\016 \001(\007\"\030\n\nBackupPEID\022\n\n\002id\030\001 "
    "\001(\006\"\302\001\n\010BackupPE\022)\n\014backup_pe_id\030\001 \001(\0132\023"
    ".dstream.BackupPEID\022\034\n\005pn_id\030\002 \001(\0132\r.dst"
    "ream.PNID\022\034\n\024last_assignment_time\030\003 \001(\006\022"
    "$\n\tpe_status\030\004 \001(\0162\021.dstream.PEStatus\022\024\n"
    "\014last_fail_pn\030\005 \001(\t\022\023\n\013fail_number\030\006 \001(\007"
    "\"U\n\tlogConfig\022$\n\007bigpipe\030\001 \001(\0132\023.dstream"
    ".BigpipeSub\022\021\n\tpipe_name\030\002 \001(\t\022\017\n\007pipele"
    "t\030\003 \001(\007\"\256\002\n\020ProcessorElement\022\033\n\003app\030\001 \001("
    "\0132\016.dstream.AppID\022\'\n\tprocessor\030\002 \001(\0132\024.d"
    "stream.ProcessorID\022\034\n\005pe_id\030\003 \001(\0132\r.dstr"
    "eam.PEID\022\016\n\006serial\030\004 \001(\006\022\037\n\003log\030\005 \001(\0132\022."
    "dstream.logConfig\022\"\n\007backups\030\006 \003(\0132\021.dst"
    "ream.BackupPE\022$\n\007primary\030\007 \003(\0132\023.dstream"
    ".BackupPEID\022\026\n\016processor_name\030\010 \001(\t\022#\n\010r"
    "esource\030\t \001(\0132\021.dstream.Resource\"V\n\010SubP"
    "oint\022\031\n\002id\030\001 \001(\0132\r.dstream.PEID\022\016\n\006msg_i"
    "d\030\002 \001(\003\022\016\n\006seq_id\030\003 \001(\006\022\017\n\007pipelet\030\004 \001(\007"
    "*\?\n\rProcessorRole\022\014\n\010IMPORTER\020\000\022\014\n\010EXPOR"
    "TER\020\001\022\022\n\016WORK_PROCESSOR\020\002*P\n\tAppStatus\022\n"
    "\n\006SUBMIT\020\000\022\007\n\003RUN\020\001\022\010\n\004KILL\020\002\022\013\n\007ADDTOPO"
    "\020\003\022\013\n\007DELTOPO\020\004\022\n\n\006UPPARA\020\005*:\n\010PEStatus\022"
    "\n\n\006CREATE\020\000\022\014\n\010SCHEDULE\020\001\022\013\n\007RUNNING\020\002\022\007"
    "\n\003DEL\020\003", 3527);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "application.proto", &protobuf_RegisterTypes);
  User::default_instance_ = new User();
  AppID::default_instance_ = new AppID();
  FileConfig::default_instance_ = new FileConfig();
  Processor::default_instance_ = new Processor();
  Publish::default_instance_ = new Publish();
  BigpipePub::default_instance_ = new BigpipePub();
  Subscribe::default_instance_ = new Subscribe();
  LocalSub::default_instance_ = new LocalSub();
  ScribeSub::default_instance_ = new ScribeSub();
  BigpipeSub::default_instance_ = new BigpipeSub();
  HdfsSub::default_instance_ = new HdfsSub();
  ProcessorSub::default_instance_ = new ProcessorSub();
  FakeSub::default_instance_ = new FakeSub();
  Topology::default_instance_ = new Topology();
  FlowControl::default_instance_ = new FlowControl();
  Application::default_instance_ = new Application();
  BackupPEID::default_instance_ = new BackupPEID();
  BackupPE::default_instance_ = new BackupPE();
  logConfig::default_instance_ = new logConfig();
  ProcessorElement::default_instance_ = new ProcessorElement();
  SubPoint::default_instance_ = new SubPoint();
  User::default_instance_->InitAsDefaultInstance();
  AppID::default_instance_->InitAsDefaultInstance();
  FileConfig::default_instance_->InitAsDefaultInstance();
  Processor::default_instance_->InitAsDefaultInstance();
  Publish::default_instance_->InitAsDefaultInstance();
  BigpipePub::default_instance_->InitAsDefaultInstance();
  Subscribe::default_instance_->InitAsDefaultInstance();
  LocalSub::default_instance_->InitAsDefaultInstance();
  ScribeSub::default_instance_->InitAsDefaultInstance();
  BigpipeSub::default_instance_->InitAsDefaultInstance();
  HdfsSub::default_instance_->InitAsDefaultInstance();
  ProcessorSub::default_instance_->InitAsDefaultInstance();
  FakeSub::default_instance_->InitAsDefaultInstance();
  Topology::default_instance_->InitAsDefaultInstance();
  FlowControl::default_instance_->InitAsDefaultInstance();
  Application::default_instance_->InitAsDefaultInstance();
  BackupPEID::default_instance_->InitAsDefaultInstance();
  BackupPE::default_instance_->InitAsDefaultInstance();
  logConfig::default_instance_->InitAsDefaultInstance();
  ProcessorElement::default_instance_->InitAsDefaultInstance();
  SubPoint::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_application_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_application_2eproto {
  StaticDescriptorInitializer_application_2eproto() {
    protobuf_AddDesc_application_2eproto();
  }
} static_descriptor_initializer_application_2eproto_;

const ::google::protobuf::EnumDescriptor* ProcessorRole_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessorRole_descriptor_;
}
bool ProcessorRole_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AppStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppStatus_descriptor_;
}
bool AppStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PEStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PEStatus_descriptor_;
}
bool PEStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int User::kSessionIdFieldNumber;
const int User::kUsernameFieldNumber;
const int User::kPasswordFieldNumber;
const int User::kHostnameFieldNumber;
const int User::kHostipFieldNumber;
const int User::kVersionFieldNumber;
#endif  // !_MSC_VER

User::User()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void User::InitAsDefaultInstance() {
}

User::User(const User& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void User::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = GOOGLE_ULONGLONG(0);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hostip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

User::~User() {
  SharedDtor();
}

void User::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (hostip_ != &::google::protobuf::internal::kEmptyString) {
    delete hostip_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* User::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return User_descriptor_;
}

const User& User::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_application_2eproto();  return *default_instance_;
}

User* User::default_instance_ = NULL;

User* User::New() const {
  return new User;
}

void User::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = GOOGLE_ULONGLONG(0);
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    if (has_hostip()) {
      if (hostip_ != &::google::protobuf::internal::kEmptyString) {
        hostip_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }
      
      // optional string username = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }
      
      // optional string password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_hostname;
        break;
      }
      
      // optional string hostname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_hostip;
        break;
      }
      
      // optional string hostip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hostip().data(), this->hostip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_version;
        break;
      }
      
      // optional string version = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 session_id = 1;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->session_id(), output);
  }
  
  // optional string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->username(), output);
  }
  
  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }
  
  // optional string hostname = 4;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->hostname(), output);
  }
  
  // optional string hostip = 5;
  if (has_hostip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostip().data(), this->hostip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->hostip(), output);
  }
  
  // optional string version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* User::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 session_id = 1;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->session_id(), target);
  }
  
  // optional string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }
  
  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }
  
  // optional string hostname = 4;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->hostname(), target);
  }
  
  // optional string hostip = 5;
  if (has_hostip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostip().data(), this->hostip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->hostip(), target);
  }
  
  // optional string version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int User::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 session_id = 1;
    if (has_session_id()) {
      total_size += 1 + 8;
    }
    
    // optional string username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // optional string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
    // optional string hostname = 4;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }
    
    // optional string hostip = 5;
    if (has_hostip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostip());
    }
    
    // optional string version = 6;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void User::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const User* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const User*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void User::MergeFrom(const User& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_hostip()) {
      set_hostip(from.hostip());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void User::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User::CopyFrom(const User& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {
  
  return true;
}

void User::Swap(User* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(hostname_, other->hostname_);
    std::swap(hostip_, other->hostip_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata User::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = User_descriptor_;
  metadata.reflection = User_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppID::kSessionIdFieldNumber;
const int AppID::kIdFieldNumber;
#endif  // !_MSC_VER

AppID::AppID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AppID::InitAsDefaultInstance() {
}

AppID::AppID(const AppID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AppID::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = GOOGLE_ULONGLONG(0);
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppID::~AppID() {
  SharedDtor();
}

void AppID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppID_descriptor_;
}

const AppID& AppID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_application_2eproto();  return *default_instance_;
}

AppID* AppID::default_instance_ = NULL;

AppID* AppID::New() const {
  return new AppID;
}

void AppID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = GOOGLE_ULONGLONG(0);
    id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_id;
        break;
      }
      
      // optional fixed64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AppID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 session_id = 1;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->session_id(), output);
  }
  
  // optional fixed64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AppID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 session_id = 1;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->session_id(), target);
  }
  
  // optional fixed64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AppID::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 session_id = 1;
    if (has_session_id()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 id = 2;
    if (has_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppID::MergeFrom(const AppID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppID::CopyFrom(const AppID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppID::IsInitialized() const {
  
  return true;
}

void AppID::Swap(AppID* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppID_descriptor_;
  metadata.reflection = AppID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileConfig::kPathFieldNumber;
const int FileConfig::kUsernameFieldNumber;
const int FileConfig::kPasswordFieldNumber;
#endif  // !_MSC_VER

FileConfig::FileConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileConfig::InitAsDefaultInstance() {
}

FileConfig::FileConfig(const FileConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileConfig::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileConfig::~FileConfig() {
  SharedDtor();
}

void FileConfig::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void FileConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileConfig_descriptor_;
}

const FileConfig& FileConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_application_2eproto();  return *default_instance_;
}

FileConfig* FileConfig::default_instance_ = NULL;

FileConfig* FileConfig::New() const {
  return new FileConfig;
}

void FileConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }
      
      // optional string username = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }
      
      // optional string password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }
  
  // optional string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->username(), output);
  }
  
  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }
  
  // optional string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }
  
  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileConfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
    // optional string username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // optional string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileConfig::MergeFrom(const FileConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileConfig::CopyFrom(const FileConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileConfig::IsInitialized() const {
  
  return true;
}

void FileConfig::Swap(FileConfig* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileConfig_descriptor_;
  metadata.reflection = FileConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor::kNameFieldNumber;
const int Processor::kDescrFieldNumber;
const int Processor::kIdFieldNumber;
const int Processor::kRoleFieldNumber;
const int Processor::kExecCmdFieldNumber;
const int Processor::kResourceRequireFieldNumber;
const int Processor::kParallismFieldNumber;
const int Processor::kBackupNumFieldNumber;
const int Processor::kPublishFieldNumber;
const int Processor::kSubscribeFieldNumber;
const int Processor::kStatusMarkFieldNumber;
const int Processor::kTupleBatchCountFieldNumber;
const int Processor::kForceForwardTuplesPeriodMsFieldNumber;
const int Processor::kDynamicProtoDirFieldNumber;
const int Processor::kSendQueueSizeFieldNumber;
const int Processor::kRecvQueueSizeFieldNumber;
const int Processor::kSendWatermarkFieldNumber;
const int Processor::kRecvWatermarkFieldNumber;
const int Processor::kFetchTimeoutMsFieldNumber;
const int Processor::kSendTimeoutMsFieldNumber;
const int Processor::kExecWorkersFieldNumber;
const int Processor::kNetWorkersFieldNumber;
const int Processor::kDiskWorkersFieldNumber;
const int Processor::kSmallTranBufNumFieldNumber;
const int Processor::kSmallTranBufSizeFieldNumber;
const int Processor::kBigTranBufNumFieldNumber;
const int Processor::kBufLowMarkFieldNumber;
const int Processor::kTupleBatchSizeFieldNumber;
const int Processor::kPnGroupFieldNumber;
const int Processor::kPersistProgressFieldNumber;
const int Processor::kCurRevisionFieldNumber;
const int Processor::kMaxRevisionFieldNumber;
const int Processor::kFlowControlFieldNumber;
#endif  // !_MSC_VER

Processor::Processor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Processor::InitAsDefaultInstance() {
  id_ = const_cast< ::dstream::ProcessorID*>(&::dstream::ProcessorID::default_instance());
  resource_require_ = const_cast< ::dstream::Resource*>(&::dstream::Resource::default_instance());
  publish_ = const_cast< ::dstream::Publish*>(&::dstream::Publish::default_instance());
  subscribe_ = const_cast< ::dstream::Subscribe*>(&::dstream::Subscribe::default_instance());
  flow_control_ = const_cast< ::dstream::FlowControl*>(&::dstream::FlowControl::default_instance());
}

Processor::Processor(const Processor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Processor::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  descr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = NULL;
  role_ = 0;
  exec_cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resource_require_ = NULL;
  parallism_ = 0u;
  backup_num_ = 0u;
  publish_ = NULL;
  subscribe_ = NULL;
  status_mark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tuple_batch_count_ = GOOGLE_ULONGLONG(0);
  force_forward_tuples_period_ms_ = GOOGLE_ULONGLONG(0);
  dynamic_proto_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  send_queue_size_ = GOOGLE_ULONGLONG(0);
  recv_queue_size_ = GOOGLE_ULONGLONG(0);
  send_watermark_ = 0;
  recv_watermark_ = 0;
  fetch_timeout_ms_ = GOOGLE_ULONGLONG(0);
  send_timeout_ms_ = GOOGLE_ULONGLONG(0);
  exec_workers_ = 0u;
  net_workers_ = 0u;
  disk_workers_ = 0u;
  small_tran_buf_num_ = GOOGLE_ULONGLONG(0);
  small_tran_buf_size_ = GOOGLE_ULONGLONG(0);
  big_tran_buf_num_ = GOOGLE_ULONGLONG(0);
  buf_low_mark_ = 0;
  tuple_batch_size_ = GOOGLE_ULONGLONG(0);
  pn_group_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  persist_progress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cur_revision_ = 0u;
  max_revision_ = 0u;
  flow_control_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor::~Processor() {
  SharedDtor();
}

void Processor::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (descr_ != &::google::protobuf::internal::kEmptyString) {
    delete descr_;
  }
  if (exec_cmd_ != &::google::protobuf::internal::kEmptyString) {
    delete exec_cmd_;
  }
  if (status_mark_ != &::google::protobuf::internal::kEmptyString) {
    delete status_mark_;
  }
  if (dynamic_proto_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete dynamic_proto_dir_;
  }
  if (pn_group_ != &::google::protobuf::internal::kEmptyString) {
    delete pn_group_;
  }
  if (persist_progress_ != &::google::protobuf::internal::kEmptyString) {
    delete persist_progress_;
  }
  if (this != default_instance_) {
    delete id_;
    delete resource_require_;
    delete publish_;
    delete subscribe_;
    delete flow_control_;
  }
}

void Processor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Processor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_descriptor_;
}

const Processor& Processor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_application_2eproto();  return *default_instance_;
}

Processor* Processor::default_instance_ = NULL;

Processor* Processor::New() const {
  return new Processor;
}

void Processor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_descr()) {
      if (descr_ != &::google::protobuf::internal::kEmptyString) {
        descr_->clear();
      }
    }
    if (has_id()) {
      if (id_ != NULL) id_->::dstream::ProcessorID::Clear();
    }
    role_ = 0;
    if (has_exec_cmd()) {
      if (exec_cmd_ != &::google::protobuf::internal::kEmptyString) {
        exec_cmd_->clear();
      }
    }
    if (has_resource_require()) {
      if (resource_require_ != NULL) resource_require_->::dstream::Resource::Clear();
    }
    parallism_ = 0u;
    backup_num_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_publish()) {
      if (publish_ != NULL) publish_->::dstream::Publish::Clear();
    }
    if (has_subscribe()) {
      if (subscribe_ != NULL) subscribe_->::dstream::Subscribe::Clear();
    }
    if (has_status_mark()) {
      if (status_mark_ != &::google::protobuf::internal::kEmptyString) {
        status_mark_->clear();
      }
    }
    tuple_batch_count_ = GOOGLE_ULONGLONG(0);
    force_forward_tuples_period_ms_ = GOOGLE_ULONGLONG(0);
    if (has_dynamic_proto_dir()) {
      if (dynamic_proto_dir_ != &::google::protobuf::internal::kEmptyString) {
        dynamic_proto_dir_->clear();
      }
    }
    send_queue_size_ = GOOGLE_ULONGLONG(0);
    recv_queue_size_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    send_watermark_ = 0;
    recv_watermark_ = 0;
    fetch_timeout_ms_ = GOOGLE_ULONGLONG(0);
    send_timeout_ms_ = GOOGLE_ULONGLONG(0);
    exec_workers_ = 0u;
    net_workers_ = 0u;
    disk_workers_ = 0u;
    small_tran_buf_num_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    small_tran_buf_size_ = GOOGLE_ULONGLONG(0);
    big_tran_buf_num_ = GOOGLE_ULONGLONG(0);
    buf_low_mark_ = 0;
    tuple_batch_size_ = GOOGLE_ULONGLONG(0);
    if (has_pn_group()) {
      if (pn_group_ != &::google::protobuf::internal::kEmptyString) {
        pn_group_->clear();
      }
    }
    if (has_persist_progress()) {
      if (persist_progress_ != &::google::protobuf::internal::kEmptyString) {
        persist_progress_->clear();
      }
    }
    cur_revision_ = 0u;
    max_revision_ = 0u;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_flow_control()) {
      if (flow_control_ != NULL) flow_control_->::dstream::FlowControl::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_descr;
        break;
      }
      
      // optional string descr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_descr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_descr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->descr().data(), this->descr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_id;
        break;
      }
      
      // optional .dstream.ProcessorID id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_role;
        break;
      }
      
      // optional .dstream.ProcessorRole role = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (dstream::ProcessorRole_IsValid(value)) {
            set_role(static_cast< dstream::ProcessorRole >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_exec_cmd;
        break;
      }
      
      // optional string exec_cmd = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exec_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exec_cmd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exec_cmd().data(), this->exec_cmd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_resource_require;
        break;
      }
      
      // optional .dstream.Resource resource_require = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource_require:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource_require()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_parallism;
        break;
      }
      
      // optional fixed32 parallism = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_parallism:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &parallism_)));
          set_has_parallism();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_backup_num;
        break;
      }
      
      // optional fixed32 backup_num = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_backup_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &backup_num_)));
          set_has_backup_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_publish;
        break;
      }
      
      // optional .dstream.Publish publish = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_publish:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_publish()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_subscribe;
        break;
      }
      
      // optional .dstream.Subscribe subscribe = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subscribe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subscribe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_status_mark;
        break;
      }
      
      // optional string status_mark = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status_mark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status_mark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->status_mark().data(), this->status_mark().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_tuple_batch_count;
        break;
      }
      
      // optional fixed64 tuple_batch_count = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_tuple_batch_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &tuple_batch_count_)));
          set_has_tuple_batch_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_force_forward_tuples_period_ms;
        break;
      }
      
      // optional fixed64 force_forward_tuples_period_ms = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_force_forward_tuples_period_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &force_forward_tuples_period_ms_)));
          set_has_force_forward_tuples_period_ms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_dynamic_proto_dir;
        break;
      }
      
      // optional string dynamic_proto_dir = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dynamic_proto_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dynamic_proto_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dynamic_proto_dir().data(), this->dynamic_proto_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_send_queue_size;
        break;
      }
      
      // optional fixed64 send_queue_size = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_send_queue_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &send_queue_size_)));
          set_has_send_queue_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_recv_queue_size;
        break;
      }
      
      // optional fixed64 recv_queue_size = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_recv_queue_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &recv_queue_size_)));
          set_has_recv_queue_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_send_watermark;
        break;
      }
      
      // optional float send_watermark = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_send_watermark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &send_watermark_)));
          set_has_send_watermark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_recv_watermark;
        break;
      }
      
      // optional float recv_watermark = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_recv_watermark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &recv_watermark_)));
          set_has_recv_watermark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_fetch_timeout_ms;
        break;
      }
      
      // optional fixed64 fetch_timeout_ms = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_fetch_timeout_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &fetch_timeout_ms_)));
          set_has_fetch_timeout_ms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_send_timeout_ms;
        break;
      }
      
      // optional fixed64 send_timeout_ms = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_send_timeout_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &send_timeout_ms_)));
          set_has_send_timeout_ms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(181)) goto parse_exec_workers;
        break;
      }
      
      // optional fixed32 exec_workers = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_exec_workers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &exec_workers_)));
          set_has_exec_workers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(189)) goto parse_net_workers;
        break;
      }
      
      // optional fixed32 net_workers = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_net_workers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &net_workers_)));
          set_has_net_workers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(197)) goto parse_disk_workers;
        break;
      }
      
      // optional fixed32 disk_workers = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_disk_workers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &disk_workers_)));
          set_has_disk_workers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(201)) goto parse_small_tran_buf_num;
        break;
      }
      
      // optional fixed64 small_tran_buf_num = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_small_tran_buf_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &small_tran_buf_num_)));
          set_has_small_tran_buf_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(209)) goto parse_small_tran_buf_size;
        break;
      }
      
      // optional fixed64 small_tran_buf_size = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_small_tran_buf_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &small_tran_buf_size_)));
          set_has_small_tran_buf_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(217)) goto parse_big_tran_buf_num;
        break;
      }
      
      // optional fixed64 big_tran_buf_num = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_big_tran_buf_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &big_tran_buf_num_)));
          set_has_big_tran_buf_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(229)) goto parse_buf_low_mark;
        break;
      }
      
      // optional float buf_low_mark = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_buf_low_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &buf_low_mark_)));
          set_has_buf_low_mark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(233)) goto parse_tuple_batch_size;
        break;
      }
      
      // optional fixed64 tuple_batch_size = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_tuple_batch_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &tuple_batch_size_)));
          set_has_tuple_batch_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_pn_group;
        break;
      }
      
      // optional string pn_group = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pn_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pn_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pn_group().data(), this->pn_group().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_persist_progress;
        break;
      }
      
      // optional string persist_progress = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_persist_progress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persist_progress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->persist_progress().data(), this->persist_progress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_cur_revision;
        break;
      }
      
      // optional uint32 cur_revision = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_revision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_revision_)));
          set_has_cur_revision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_max_revision;
        break;
      }
      
      // optional uint32 max_revision = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_revision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_revision_)));
          set_has_max_revision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_flow_control;
        break;
      }
      
      // optional .dstream.FlowControl flow_control = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flow_control:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flow_control()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Processor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional string descr = 2;
  if (has_descr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->descr().data(), this->descr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->descr(), output);
  }
  
  // optional .dstream.ProcessorID id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->id(), output);
  }
  
  // optional .dstream.ProcessorRole role = 4;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->role(), output);
  }
  
  // optional string exec_cmd = 5;
  if (has_exec_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exec_cmd().data(), this->exec_cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->exec_cmd(), output);
  }
  
  // optional .dstream.Resource resource_require = 7;
  if (has_resource_require()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->resource_require(), output);
  }
  
  // optional fixed32 parallism = 8;
  if (has_parallism()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->parallism(), output);
  }
  
  // optional fixed32 backup_num = 9;
  if (has_backup_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(9, this->backup_num(), output);
  }
  
  // optional .dstream.Publish publish = 10;
  if (has_publish()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->publish(), output);
  }
  
  // optional .dstream.Subscribe subscribe = 11;
  if (has_subscribe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->subscribe(), output);
  }
  
  // optional string status_mark = 12;
  if (has_status_mark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->status_mark().data(), this->status_mark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->status_mark(), output);
  }
  
  // optional fixed64 tuple_batch_count = 13;
  if (has_tuple_batch_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(13, this->tuple_batch_count(), output);
  }
  
  // optional fixed64 force_forward_tuples_period_ms = 14;
  if (has_force_forward_tuples_period_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(14, this->force_forward_tuples_period_ms(), output);
  }
  
  // optional string dynamic_proto_dir = 15;
  if (has_dynamic_proto_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dynamic_proto_dir().data(), this->dynamic_proto_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->dynamic_proto_dir(), output);
  }
  
  // optional fixed64 send_queue_size = 16;
  if (has_send_queue_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(16, this->send_queue_size(), output);
  }
  
  // optional fixed64 recv_queue_size = 17;
  if (has_recv_queue_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(17, this->recv_queue_size(), output);
  }
  
  // optional float send_watermark = 18;
  if (has_send_watermark()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->send_watermark(), output);
  }
  
  // optional float recv_watermark = 19;
  if (has_recv_watermark()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->recv_watermark(), output);
  }
  
  // optional fixed64 fetch_timeout_ms = 20;
  if (has_fetch_timeout_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(20, this->fetch_timeout_ms(), output);
  }
  
  // optional fixed64 send_timeout_ms = 21;
  if (has_send_timeout_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(21, this->send_timeout_ms(), output);
  }
  
  // optional fixed32 exec_workers = 22;
  if (has_exec_workers()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(22, this->exec_workers(), output);
  }
  
  // optional fixed32 net_workers = 23;
  if (has_net_workers()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(23, this->net_workers(), output);
  }
  
  // optional fixed32 disk_workers = 24;
  if (has_disk_workers()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(24, this->disk_workers(), output);
  }
  
  // optional fixed64 small_tran_buf_num = 25;
  if (has_small_tran_buf_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(25, this->small_tran_buf_num(), output);
  }
  
  // optional fixed64 small_tran_buf_size = 26;
  if (has_small_tran_buf_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(26, this->small_tran_buf_size(), output);
  }
  
  // optional fixed64 big_tran_buf_num = 27;
  if (has_big_tran_buf_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(27, this->big_tran_buf_num(), output);
  }
  
  // optional float buf_low_mark = 28;
  if (has_buf_low_mark()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->buf_low_mark(), output);
  }
  
  // optional fixed64 tuple_batch_size = 29;
  if (has_tuple_batch_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(29, this->tuple_batch_size(), output);
  }
  
  // optional string pn_group = 30;
  if (has_pn_group()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pn_group().data(), this->pn_group().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->pn_group(), output);
  }
  
  // optional string persist_progress = 31;
  if (has_persist_progress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->persist_progress().data(), this->persist_progress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->persist_progress(), output);
  }
  
  // optional uint32 cur_revision = 32;
  if (has_cur_revision()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->cur_revision(), output);
  }
  
  // optional uint32 max_revision = 33;
  if (has_max_revision()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->max_revision(), output);
  }
  
  // optional .dstream.FlowControl flow_control = 34;
  if (has_flow_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->flow_control(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Processor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional string descr = 2;
  if (has_descr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->descr().data(), this->descr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->descr(), target);
  }
  
  // optional .dstream.ProcessorID id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->id(), target);
  }
  
  // optional .dstream.ProcessorRole role = 4;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->role(), target);
  }
  
  // optional string exec_cmd = 5;
  if (has_exec_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exec_cmd().data(), this->exec_cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->exec_cmd(), target);
  }
  
  // optional .dstream.Resource resource_require = 7;
  if (has_resource_require()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->resource_require(), target);
  }
  
  // optional fixed32 parallism = 8;
  if (has_parallism()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->parallism(), target);
  }
  
  // optional fixed32 backup_num = 9;
  if (has_backup_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(9, this->backup_num(), target);
  }
  
  // optional .dstream.Publish publish = 10;
  if (has_publish()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->publish(), target);
  }
  
  // optional .dstream.Subscribe subscribe = 11;
  if (has_subscribe()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->subscribe(), target);
  }
  
  // optional string status_mark = 12;
  if (has_status_mark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->status_mark().data(), this->status_mark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->status_mark(), target);
  }
  
  // optional fixed64 tuple_batch_count = 13;
  if (has_tuple_batch_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(13, this->tuple_batch_count(), target);
  }
  
  // optional fixed64 force_forward_tuples_period_ms = 14;
  if (has_force_forward_tuples_period_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(14, this->force_forward_tuples_period_ms(), target);
  }
  
  // optional string dynamic_proto_dir = 15;
  if (has_dynamic_proto_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dynamic_proto_dir().data(), this->dynamic_proto_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->dynamic_proto_dir(), target);
  }
  
  // optional fixed64 send_queue_size = 16;
  if (has_send_queue_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(16, this->send_queue_size(), target);
  }
  
  // optional fixed64 recv_queue_size = 17;
  if (has_recv_queue_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(17, this->recv_queue_size(), target);
  }
  
  // optional float send_watermark = 18;
  if (has_send_watermark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->send_watermark(), target);
  }
  
  // optional float recv_watermark = 19;
  if (has_recv_watermark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->recv_watermark(), target);
  }
  
  // optional fixed64 fetch_timeout_ms = 20;
  if (has_fetch_timeout_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(20, this->fetch_timeout_ms(), target);
  }
  
  // optional fixed64 send_timeout_ms = 21;
  if (has_send_timeout_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(21, this->send_timeout_ms(), target);
  }
  
  // optional fixed32 exec_workers = 22;
  if (has_exec_workers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(22, this->exec_workers(), target);
  }
  
  // optional fixed32 net_workers = 23;
  if (has_net_workers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(23, this->net_workers(), target);
  }
  
  // optional fixed32 disk_workers = 24;
  if (has_disk_workers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(24, this->disk_workers(), target);
  }
  
  // optional fixed64 small_tran_buf_num = 25;
  if (has_small_tran_buf_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(25, this->small_tran_buf_num(), target);
  }
  
  // optional fixed64 small_tran_buf_size = 26;
  if (has_small_tran_buf_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(26, this->small_tran_buf_size(), target);
  }
  
  // optional fixed64 big_tran_buf_num = 27;
  if (has_big_tran_buf_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(27, this->big_tran_buf_num(), target);
  }
  
  // optional float buf_low_mark = 28;
  if (has_buf_low_mark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(28, this->buf_low_mark(), target);
  }
  
  // optional fixed64 tuple_batch_size = 29;
  if (has_tuple_batch_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(29, this->tuple_batch_size(), target);
  }
  
  // optional string pn_group = 30;
  if (has_pn_group()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pn_group().data(), this->pn_group().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->pn_group(), target);
  }
  
  // optional string persist_progress = 31;
  if (has_persist_progress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->persist_progress().data(), this->persist_progress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->persist_progress(), target);
  }
  
  // optional uint32 cur_revision = 32;
  if (has_cur_revision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->cur_revision(), target);
  }
  
  // optional uint32 max_revision = 33;
  if (has_max_revision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->max_revision(), target);
  }
  
  // optional .dstream.FlowControl flow_control = 34;
  if (has_flow_control()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->flow_control(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Processor::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string descr = 2;
    if (has_descr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->descr());
    }
    
    // optional .dstream.ProcessorID id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }
    
    // optional .dstream.ProcessorRole role = 4;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->role());
    }
    
    // optional string exec_cmd = 5;
    if (has_exec_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exec_cmd());
    }
    
    // optional .dstream.Resource resource_require = 7;
    if (has_resource_require()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resource_require());
    }
    
    // optional fixed32 parallism = 8;
    if (has_parallism()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 backup_num = 9;
    if (has_backup_num()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .dstream.Publish publish = 10;
    if (has_publish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->publish());
    }
    
    // optional .dstream.Subscribe subscribe = 11;
    if (has_subscribe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->subscribe());
    }
    
    // optional string status_mark = 12;
    if (has_status_mark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->status_mark());
    }
    
    // optional fixed64 tuple_batch_count = 13;
    if (has_tuple_batch_count()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 force_forward_tuples_period_ms = 14;
    if (has_force_forward_tuples_period_ms()) {
      total_size += 1 + 8;
    }
    
    // optional string dynamic_proto_dir = 15;
    if (has_dynamic_proto_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dynamic_proto_dir());
    }
    
    // optional fixed64 send_queue_size = 16;
    if (has_send_queue_size()) {
      total_size += 2 + 8;
    }
    
    // optional fixed64 recv_queue_size = 17;
    if (has_recv_queue_size()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float send_watermark = 18;
    if (has_send_watermark()) {
      total_size += 2 + 4;
    }
    
    // optional float recv_watermark = 19;
    if (has_recv_watermark()) {
      total_size += 2 + 4;
    }
    
    // optional fixed64 fetch_timeout_ms = 20;
    if (has_fetch_timeout_ms()) {
      total_size += 2 + 8;
    }
    
    // optional fixed64 send_timeout_ms = 21;
    if (has_send_timeout_ms()) {
      total_size += 2 + 8;
    }
    
    // optional fixed32 exec_workers = 22;
    if (has_exec_workers()) {
      total_size += 2 + 4;
    }
    
    // optional fixed32 net_workers = 23;
    if (has_net_workers()) {
      total_size += 2 + 4;
    }
    
    // optional fixed32 disk_workers = 24;
    if (has_disk_workers()) {
      total_size += 2 + 4;
    }
    
    // optional fixed64 small_tran_buf_num = 25;
    if (has_small_tran_buf_num()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional fixed64 small_tran_buf_size = 26;
    if (has_small_tran_buf_size()) {
      total_size += 2 + 8;
    }
    
    // optional fixed64 big_tran_buf_num = 27;
    if (has_big_tran_buf_num()) {
      total_size += 2 + 8;
    }
    
    // optional float buf_low_mark = 28;
    if (has_buf_low_mark()) {
      total_size += 2 + 4;
    }
    
    // optional fixed64 tuple_batch_size = 29;
    if (has_tuple_batch_size()) {
      total_size += 2 + 8;
    }
    
    // optional string pn_group = 30;
    if (has_pn_group()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pn_group());
    }
    
    // optional string persist_progress = 31;
    if (has_persist_progress()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persist_progress());
    }
    
    // optional uint32 cur_revision = 32;
    if (has_cur_revision()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_revision());
    }
    
    // optional uint32 max_revision = 33;
    if (has_max_revision()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_revision());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .dstream.FlowControl flow_control = 34;
    if (has_flow_control()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flow_control());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Processor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor::MergeFrom(const Processor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_descr()) {
      set_descr(from.descr());
    }
    if (from.has_id()) {
      mutable_id()->::dstream::ProcessorID::MergeFrom(from.id());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
    if (from.has_exec_cmd()) {
      set_exec_cmd(from.exec_cmd());
    }
    if (from.has_resource_require()) {
      mutable_resource_require()->::dstream::Resource::MergeFrom(from.resource_require());
    }
    if (from.has_parallism()) {
      set_parallism(from.parallism());
    }
    if (from.has_backup_num()) {
      set_backup_num(from.backup_num());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_publish()) {
      mutable_publish()->::dstream::Publish::MergeFrom(from.publish());
    }
    if (from.has_subscribe()) {
      mutable_subscribe()->::dstream::Subscribe::MergeFrom(from.subscribe());
    }
    if (from.has_status_mark()) {
      set_status_mark(from.status_mark());
    }
    if (from.has_tuple_batch_count()) {
      set_tuple_batch_count(from.tuple_batch_count());
    }
    if (from.has_force_forward_tuples_period_ms()) {
      set_force_forward_tuples_period_ms(from.force_forward_tuples_period_ms());
    }
    if (from.has_dynamic_proto_dir()) {
      set_dynamic_proto_dir(from.dynamic_proto_dir());
    }
    if (from.has_send_queue_size()) {
      set_send_queue_size(from.send_queue_size());
    }
    if (from.has_recv_queue_size()) {
      set_recv_queue_size(from.recv_queue_size());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_send_watermark()) {
      set_send_watermark(from.send_watermark());
    }
    if (from.has_recv_watermark()) {
      set_recv_watermark(from.recv_watermark());
    }
    if (from.has_fetch_timeout_ms()) {
      set_fetch_timeout_ms(from.fetch_timeout_ms());
    }
    if (from.has_send_timeout_ms()) {
      set_send_timeout_ms(from.send_timeout_ms());
    }
    if (from.has_exec_workers()) {
      set_exec_workers(from.exec_workers());
    }
    if (from.has_net_workers()) {
      set_net_workers(from.net_workers());
    }
    if (from.has_disk_workers()) {
      set_disk_workers(from.disk_workers());
    }
    if (from.has_small_tran_buf_num()) {
      set_small_tran_buf_num(from.small_tran_buf_num());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_small_tran_buf_size()) {
      set_small_tran_buf_size(from.small_tran_buf_size());
    }
    if (from.has_big_tran_buf_num()) {
      set_big_tran_buf_num(from.big_tran_buf_num());
    }
    if (from.has_buf_low_mark()) {
      set_buf_low_mark(from.buf_low_mark());
    }
    if (from.has_tuple_batch_size()) {
      set_tuple_batch_size(from.tuple_batch_size());
    }
    if (from.has_pn_group()) {
      set_pn_group(from.pn_group());
    }
    if (from.has_persist_progress()) {
      set_persist_progress(from.persist_progress());
    }
    if (from.has_cur_revision()) {
      set_cur_revision(from.cur_revision());
    }
    if (from.has_max_revision()) {
      set_max_revision(from.max_revision());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_flow_control()) {
      mutable_flow_control()->::dstream::FlowControl::MergeFrom(from.flow_control());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor::CopyFrom(const Processor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor::IsInitialized() const {
  
  return true;
}

void Processor::Swap(Processor* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(descr_, other->descr_);
    std::swap(id_, other->id_);
    std::swap(role_, other->role_);
    std::swap(exec_cmd_, other->exec_cmd_);
    std::swap(resource_require_, other->resource_require_);
    std::swap(parallism_, other->parallism_);
    std::swap(backup_num_, other->backup_num_);
    std::swap(publish_, other->publish_);
    std::swap(subscribe_, other->subscribe_);
    std::swap(status_mark_, other->status_mark_);
    std::swap(tuple_batch_count_, other->tuple_batch_count_);
    std::swap(force_forward_tuples_period_ms_, other->force_forward_tuples_period_ms_);
    std::swap(dynamic_proto_dir_, other->dynamic_proto_dir_);
    std::swap(send_queue_size_, other->send_queue_size_);
    std::swap(recv_queue_size_, other->recv_queue_size_);
    std::swap(send_watermark_, other->send_watermark_);
    std::swap(recv_watermark_, other->recv_watermark_);
    std::swap(fetch_timeout_ms_, other->fetch_timeout_ms_);
    std::swap(send_timeout_ms_, other->send_timeout_ms_);
    std::swap(exec_workers_, other->exec_workers_);
    std::swap(net_workers_, other->net_workers_);
    std::swap(disk_workers_, other->disk_workers_);
    std::swap(small_tran_buf_num_, other->small_tran_buf_num_);
    std::swap(small_tran_buf_size_, other->small_tran_buf_size_);
    std::swap(big_tran_buf_num_, other->big_tran_buf_num_);
    std::swap(buf_low_mark_, other->buf_low_mark_);
    std::swap(tuple_batch_size_, other->tuple_batch_size_);
    std::swap(pn_group_, other->pn_group_);
    std::swap(persist_progress_, other->persist_progress_);
    std::swap(cur_revision_, other->cur_revision_);
    std::swap(max_revision_, other->max_revision_);
    std::swap(flow_control_, other->flow_control_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Processor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Processor_descriptor_;
  metadata.reflection = Processor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Publish::kTagsFieldNumber;
const int Publish::kTypeFieldNumber;
const int Publish::kBigpipeFieldNumber;
#endif  // !_MSC_VER

Publish::Publish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Publish::InitAsDefaultInstance() {
  bigpipe_ = const_cast< ::dstream::BigpipePub*>(&::dstream::BigpipePub::default_instance());
}

Publish::Publish(const Publish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Publish::SharedCtor() {
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bigpipe_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Publish::~Publish() {
  SharedDtor();
}

void Publish::SharedDtor() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (this != default_instance_) {
    delete bigpipe_;
  }
}

void Publish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Publish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Publish_descriptor_;
}

const Publish& Publish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_application_2eproto();  return *default_instance_;
}

Publish* Publish::default_instance_ = NULL;

Publish* Publish::New() const {
  return new Publish;
}

void Publish::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has_bigpipe()) {
      if (bigpipe_ != NULL) bigpipe_->::dstream::BigpipePub::Clear();
    }
  }
  tags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Publish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string tags = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tags(0).data(), this->tags(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_tags;
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }
      
      // optional string type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bigpipe;
        break;
      }
      
      // optional .dstream.BigpipePub bigpipe = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bigpipe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bigpipe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Publish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string tags = 1;
  for (int i = 0; i < this->tags_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->tags(i).data(), this->tags(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->tags(i), output);
  }
  
  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }
  
  // optional .dstream.BigpipePub bigpipe = 3;
  if (has_bigpipe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->bigpipe(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Publish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string tags = 1;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->tags(i), target);
  }
  
  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }
  
  // optional .dstream.BigpipePub bigpipe = 3;
  if (has_bigpipe()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->bigpipe(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Publish::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }
    
    // optional .dstream.BigpipePub bigpipe = 3;
    if (has_bigpipe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bigpipe());
    }
    
  }
  // repeated string tags = 1;
  total_size += 1 * this->tags_size();
  for (int i = 0; i < this->tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Publish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Publish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Publish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Publish::MergeFrom(const Publish& from) {
  GOOGLE_CHECK_NE(&from, this);
  tags_.MergeFrom(from.tags_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_bigpipe()) {
      mutable_bigpipe()->::dstream::BigpipePub::MergeFrom(from.bigpipe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Publish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Publish::CopyFrom(const Publish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Publish::IsInitialized() const {
  
  return true;
}

void Publish::Swap(Publish* other) {
  if (other != this) {
    tags_.Swap(&other->tags_);
    std::swap(type_, other->type_);
    std::swap(bigpipe_, other->bigpipe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Publish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Publish_descriptor_;
  metadata.reflection = Publish_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BigpipePub::kPipeNameFieldNumber;
const int BigpipePub::kPubTokenFieldNumber;
const int BigpipePub::kPipeletNumFieldNumber;
const int BigpipePub::kRetryTimeFieldNumber;
const int BigpipePub::kRetryIntervalFieldNumber;
const int BigpipePub::kPubUserFieldNumber;
#endif  // !_MSC_VER

BigpipePub::BigpipePub()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BigpipePub::InitAsDefaultInstance() {
}

BigpipePub::BigpipePub(const BigpipePub& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BigpipePub::SharedCtor() {
  _cached_size_ = 0;
  pipe_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pub_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pipelet_num_ = 0u;
  retry_time_ = 0u;
  retry_interval_ = 0u;
  pub_user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BigpipePub::~BigpipePub() {
  SharedDtor();
}

void BigpipePub::SharedDtor() {
  if (pipe_name_ != &::google::protobuf::internal::kEmptyString) {
    delete pipe_name_;
  }
  if (pub_token_ != &::google::protobuf::internal::kEmptyString) {
    delete pub_token_;
  }
  if (pub_user_ != &::google::protobuf::internal::kEmptyString) {
    delete pub_user_;
  }
  if (this != default_instance_) {
  }
}

void BigpipePub::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BigpipePub::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BigpipePub_descriptor_;
}

const BigpipePub& BigpipePub::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_application_2eproto();  return *default_instance_;
}

BigpipePub* BigpipePub::default_instance_ = NULL;

BigpipePub* BigpipePub::New() const {
  return new BigpipePub;
}

void BigpipePub::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pipe_name()) {
      if (pipe_name_ != &::google::protobuf::internal::kEmptyString) {
        pipe_name_->clear();
      }
    }
    if (has_pub_token()) {
      if (pub_token_ != &::google::protobuf::internal::kEmptyString) {
        pub_token_->clear();
      }
    }
    pipelet_num_ = 0u;
    retry_time_ = 0u;
    retry_interval_ = 0u;
    if (has_pub_user()) {
      if (pub_user_ != &::google::protobuf::internal::kEmptyString) {
        pub_user_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BigpipePub::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string pipe_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pipe_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pipe_name().data(), this->pipe_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pub_token;
        break;
      }
      
      // optional string pub_token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pub_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pub_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pub_token().data(), this->pub_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_pipelet_num;
        break;
      }
      
      // optional fixed32 pipelet_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pipelet_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &pipelet_num_)));
          set_has_pipelet_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_retry_time;
        break;
      }
      
      // optional fixed32 retry_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_retry_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &retry_time_)));
          set_has_retry_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_retry_interval;
        break;
      }
      
      // optional fixed32 retry_interval = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_retry_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &retry_interval_)));
          set_has_retry_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_pub_user;
        break;
      }
      
      // optional string pub_user = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pub_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pub_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pub_user().data(), this->pub_user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BigpipePub::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string pipe_name = 1;
  if (has_pipe_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pipe_name().data(), this->pipe_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->pipe_name(), output);
  }
  
  // optional string pub_token = 2;
  if (has_pub_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pub_token().data(), this->pub_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pub_token(), output);
  }
  
  // optional fixed32 pipelet_num = 3;
  if (has_pipelet_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->pipelet_num(), output);
  }
  
  // optional fixed32 retry_time = 4;
  if (has_retry_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->retry_time(), output);
  }
  
  // optional fixed32 retry_interval = 5;
  if (has_retry_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->retry_interval(), output);
  }
  
  // optional string pub_user = 6;
  if (has_pub_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pub_user().data(), this->pub_user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->pub_user(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BigpipePub::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string pipe_name = 1;
  if (has_pipe_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pipe_name().data(), this->pipe_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pipe_name(), target);
  }
  
  // optional string pub_token = 2;
  if (has_pub_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pub_token().data(), this->pub_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pub_token(), target);
  }
  
  // optional fixed32 pipelet_num = 3;
  if (has_pipelet_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->pipelet_num(), target);
  }
  
  // optional fixed32 retry_time = 4;
  if (has_retry_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->retry_time(), target);
  }
  
  // optional fixed32 retry_interval = 5;
  if (has_retry_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->retry_interval(), target);
  }
  
  // optional string pub_user = 6;
  if (has_pub_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pub_user().data(), this->pub_user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->pub_user(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BigpipePub::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string pipe_name = 1;
    if (has_pipe_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pipe_name());
    }
    
    // optional string pub_token = 2;
    if (has_pub_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pub_token());
    }
    
    // optional fixed32 pipelet_num = 3;
    if (has_pipelet_num()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 retry_time = 4;
    if (has_retry_time()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 retry_interval = 5;
    if (has_retry_interval()) {
      total_size += 1 + 4;
    }
    
    // optional string pub_user = 6;
    if (has_pub_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pub_user());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BigpipePub::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BigpipePub* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BigpipePub*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BigpipePub::MergeFrom(const BigpipePub& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pipe_name()) {
      set_pipe_name(from.pipe_name());
    }
    if (from.has_pub_token()) {
      set_pub_token(from.pub_token());
    }
    if (from.has_pipelet_num()) {
      set_pipelet_num(from.pipelet_num());
    }
    if (from.has_retry_time()) {
      set_retry_time(from.retry_time());
    }
    if (from.has_retry_interval()) {
      set_retry_interval(from.retry_interval());
    }
    if (from.has_pub_user()) {
      set_pub_user(from.pub_user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BigpipePub::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BigpipePub::CopyFrom(const BigpipePub& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigpipePub::IsInitialized() const {
  
  return true;
}

void BigpipePub::Swap(BigpipePub* other) {
  if (other != this) {
    std::swap(pipe_name_, other->pipe_name_);
    std::swap(pub_token_, other->pub_token_);
    std::swap(pipelet_num_, other->pipelet_num_);
    std::swap(retry_time_, other->retry_time_);
    std::swap(retry_interval_, other->retry_interval_);
    std::swap(pub_user_, other->pub_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BigpipePub::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BigpipePub_descriptor_;
  metadata.reflection = BigpipePub_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Subscribe::kBigpipeFieldNumber;
const int Subscribe::kHdfsFieldNumber;
const int Subscribe::kProcessorFieldNumber;
const int Subscribe::kLocalfileFieldNumber;
const int Subscribe::kScribeFieldNumber;
const int Subscribe::kFakeFieldNumber;
#endif  // !_MSC_VER

Subscribe::Subscribe()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Subscribe::InitAsDefaultInstance() {
}

Subscribe::Subscribe(const Subscribe& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Subscribe::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Subscribe::~Subscribe() {
  SharedDtor();
}

void Subscribe::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Subscribe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Subscribe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Subscribe_descriptor_;
}

const Subscribe& Subscribe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_application_2eproto();  return *default_instance_;
}

Subscribe* Subscribe::default_instance_ = NULL;

Subscribe* Subscribe::New() const {
  return new Subscribe;
}

void Subscribe::Clear() {
  bigpipe_.Clear();
  hdfs_.Clear();
  processor_.Clear();
  localfile_.Clear();
  scribe_.Clear();
  fake_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Subscribe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dstream.BigpipeSub bigpipe = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bigpipe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bigpipe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_bigpipe;
        if (input->ExpectTag(18)) goto parse_hdfs;
        break;
      }
      
      // repeated .dstream.HdfsSub hdfs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hdfs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hdfs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hdfs;
        if (input->ExpectTag(26)) goto parse_processor;
        break;
      }
      
      // repeated .dstream.ProcessorSub processor = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_processor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_processor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_processor;
        if (input->ExpectTag(34)) goto parse_localfile;
        break;
      }
      
      // repeated .dstream.LocalSub localfile = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_localfile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_localfile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_localfile;
        if (input->ExpectTag(42)) goto parse_scribe;
        break;
      }
      
      // repeated .dstream.ScribeSub scribe = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scribe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_scribe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_scribe;
        if (input->ExpectTag(50)) goto parse_fake;
        break;
      }
      
      // repeated .dstream.FakeSub fake = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fake:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fake()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_fake;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Subscribe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .dstream.BigpipeSub bigpipe = 1;
  for (int i = 0; i < this->bigpipe_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bigpipe(i), output);
  }
  
  // repeated .dstream.HdfsSub hdfs = 2;
  for (int i = 0; i < this->hdfs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hdfs(i), output);
  }
  
  // repeated .dstream.ProcessorSub processor = 3;
  for (int i = 0; i < this->processor_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->processor(i), output);
  }
  
  // repeated .dstream.LocalSub localfile = 4;
  for (int i = 0; i < this->localfile_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->localfile(i), output);
  }
  
  // repeated .dstream.ScribeSub scribe = 5;
  for (int i = 0; i < this->scribe_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->scribe(i), output);
  }
  
  // repeated .dstream.FakeSub fake = 6;
  for (int i = 0; i < this->fake_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->fake(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Subscribe::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .dstream.BigpipeSub bigpipe = 1;
  for (int i = 0; i < this->bigpipe_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bigpipe(i), target);
  }
  
  // repeated .dstream.HdfsSub hdfs = 2;
  for (int i = 0; i < this->hdfs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->hdfs(i), target);
  }
  
  // repeated .dstream.ProcessorSub processor = 3;
  for (int i = 0; i < this->processor_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->processor(i), target);
  }
  
  // repeated .dstream.LocalSub localfile = 4;
  for (int i = 0; i < this->localfile_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->localfile(i), target);
  }
  
  // repeated .dstream.ScribeSub scribe = 5;
  for (int i = 0; i < this->scribe_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->scribe(i), target);
  }
  
  // repeated .dstream.FakeSub fake = 6;
  for (int i = 0; i < this->fake_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->fake(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Subscribe::ByteSize() const {
  int total_size = 0;
  
  // repeated .dstream.BigpipeSub bigpipe = 1;
  total_size += 1 * this->bigpipe_size();
  for (int i = 0; i < this->bigpipe_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bigpipe(i));
  }
  
  // repeated .dstream.HdfsSub hdfs = 2;
  total_size += 1 * this->hdfs_size();
  for (int i = 0; i < this->hdfs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hdfs(i));
  }
  
  // repeated .dstream.ProcessorSub processor = 3;
  total_size += 1 * this->processor_size();
  for (int i = 0; i < this->processor_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->processor(i));
  }
  
  // repeated .dstream.LocalSub localfile = 4;
  total_size += 1 * this->localfile_size();
  for (int i = 0; i < this->localfile_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->localfile(i));
  }
  
  // repeated .dstream.ScribeSub scribe = 5;
  total_size += 1 * this->scribe_size();
  for (int i = 0; i < this->scribe_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->scribe(i));
  }
  
  // repeated .dstream.FakeSub fake = 6;
  total_size += 1 * this->fake_size();
  for (int i = 0; i < this->fake_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fake(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Subscribe::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Subscribe* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Subscribe*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Subscribe::MergeFrom(const Subscribe& from) {
  GOOGLE_CHECK_NE(&from, this);
  bigpipe_.MergeFrom(from.bigpipe_);
  hdfs_.MergeFrom(from.hdfs_);
  processor_.MergeFrom(from.processor_);
  localfile_.MergeFrom(from.localfile_);
  scribe_.MergeFrom(from.scribe_);
  fake_.MergeFrom(from.fake_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Subscribe::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Subscribe::CopyFrom(const Subscribe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Subscribe::IsInitialized() const {
  
  return true;
}

void Subscribe::Swap(Subscribe* other) {
  if (other != this) {
    bigpipe_.Swap(&other->bigpipe_);
    hdfs_.Swap(&other->hdfs_);
    processor_.Swap(&other->processor_);
    localfile_.Swap(&other->localfile_);
    scribe_.Swap(&other->scribe_);
    fake_.Swap(&other->fake_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Subscribe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Subscribe_descriptor_;
  metadata.reflection = Subscribe_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LocalSub::kPathFieldNumber;
const int LocalSub::kSubPointFieldNumber;
#endif  // !_MSC_VER

LocalSub::LocalSub()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LocalSub::InitAsDefaultInstance() {
}

LocalSub::LocalSub(const LocalSub& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LocalSub::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sub_point_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocalSub::~LocalSub() {
  SharedDtor();
}

void LocalSub::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void LocalSub::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalSub::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalSub_descriptor_;
}

const LocalSub& LocalSub::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_application_2eproto();  return *default_instance_;
}

LocalSub* LocalSub::default_instance_ = NULL;

LocalSub* LocalSub::New() const {
  return new LocalSub;
}

void LocalSub::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    sub_point_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LocalSub::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_sub_point;
        break;
      }
      
      // optional fixed64 sub_point = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sub_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sub_point_)));
          set_has_sub_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LocalSub::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }
  
  // optional fixed64 sub_point = 2;
  if (has_sub_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->sub_point(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LocalSub::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }
  
  // optional fixed64 sub_point = 2;
  if (has_sub_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->sub_point(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LocalSub::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
    // optional fixed64 sub_point = 2;
    if (has_sub_point()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalSub::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LocalSub* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LocalSub*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LocalSub::MergeFrom(const LocalSub& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_sub_point()) {
      set_sub_point(from.sub_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LocalSub::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalSub::CopyFrom(const LocalSub& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalSub::IsInitialized() const {
  
  return true;
}

void LocalSub::Swap(LocalSub* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(sub_point_, other->sub_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LocalSub::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocalSub_descriptor_;
  metadata.reflection = LocalSub_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScribeSub::kBuffersizeFieldNumber;
#endif  // !_MSC_VER

ScribeSub::ScribeSub()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScribeSub::InitAsDefaultInstance() {
}

ScribeSub::ScribeSub(const ScribeSub& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScribeSub::SharedCtor() {
  _cached_size_ = 0;
  buffersize_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScribeSub::~ScribeSub() {
  SharedDtor();
}

void ScribeSub::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScribeSub::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScribeSub::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScribeSub_descriptor_;
}

const ScribeSub& ScribeSub::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_application_2eproto();  return *default_instance_;
}

ScribeSub* ScribeSub::default_instance_ = NULL;

ScribeSub* ScribeSub::New() const {
  return new ScribeSub;
}

void ScribeSub::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buffersize_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScribeSub::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 buffersize = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &buffersize_)));
          set_has_buffersize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScribeSub::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 buffersize = 1;
  if (has_buffersize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->buffersize(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScribeSub::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 buffersize = 1;
  if (has_buffersize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->buffersize(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScribeSub::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 buffersize = 1;
    if (has_buffersize()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScribeSub::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScribeSub* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScribeSub*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScribeSub::MergeFrom(const ScribeSub& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buffersize()) {
      set_buffersize(from.buffersize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScribeSub::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScribeSub::CopyFrom(const ScribeSub& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScribeSub::IsInitialized() const {
  
  return true;
}

void ScribeSub::Swap(ScribeSub* other) {
  if (other != this) {
    std::swap(buffersize_, other->buffersize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScribeSub::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScribeSub_descriptor_;
  metadata.reflection = ScribeSub_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BigpipeSub::kNameFieldNumber;
const int BigpipeSub::kUsernameFieldNumber;
const int BigpipeSub::kPasswordFieldNumber;
const int BigpipeSub::kPipeletFieldNumber;
const int BigpipeSub::kPipeletNumFieldNumber;
const int BigpipeSub::kPipeletIdFieldNumber;
const int BigpipeSub::kSubPointFieldNumber;
#endif  // !_MSC_VER

BigpipeSub::BigpipeSub()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BigpipeSub::InitAsDefaultInstance() {
}

BigpipeSub::BigpipeSub(const BigpipeSub& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BigpipeSub::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pipelet_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pipelet_num_ = 0u;
  sub_point_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BigpipeSub::~BigpipeSub() {
  SharedDtor();
}

void BigpipeSub::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (pipelet_ != &::google::protobuf::internal::kEmptyString) {
    delete pipelet_;
  }
  if (this != default_instance_) {
  }
}

void BigpipeSub::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BigpipeSub::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BigpipeSub_descriptor_;
}

const BigpipeSub& BigpipeSub::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_application_2eproto();  return *default_instance_;
}

BigpipeSub* BigpipeSub::default_instance_ = NULL;

BigpipeSub* BigpipeSub::New() const {
  return new BigpipeSub;
}

void BigpipeSub::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_pipelet()) {
      if (pipelet_ != &::google::protobuf::internal::kEmptyString) {
        pipelet_->clear();
      }
    }
    pipelet_num_ = 0u;
    sub_point_ = GOOGLE_ULONGLONG(0);
  }
  pipelet_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BigpipeSub::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }
      
      // optional string username = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }
      
      // optional string password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pipelet;
        break;
      }
      
      // optional string pipelet = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pipelet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pipelet()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pipelet().data(), this->pipelet().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_pipelet_num;
        break;
      }
      
      // optional fixed32 pipelet_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pipelet_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &pipelet_num_)));
          set_has_pipelet_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_pipelet_id;
        break;
      }
      
      // repeated fixed32 pipelet_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pipelet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 53, input, this->mutable_pipelet_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_pipelet_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_pipelet_id;
        if (input->ExpectTag(57)) goto parse_sub_point;
        break;
      }
      
      // optional fixed64 sub_point = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sub_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sub_point_)));
          set_has_sub_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BigpipeSub::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->username(), output);
  }
  
  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }
  
  // optional string pipelet = 4;
  if (has_pipelet()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pipelet().data(), this->pipelet().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->pipelet(), output);
  }
  
  // optional fixed32 pipelet_num = 5;
  if (has_pipelet_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->pipelet_num(), output);
  }
  
  // repeated fixed32 pipelet_id = 6;
  for (int i = 0; i < this->pipelet_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      6, this->pipelet_id(i), output);
  }
  
  // optional fixed64 sub_point = 7;
  if (has_sub_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->sub_point(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BigpipeSub::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }
  
  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }
  
  // optional string pipelet = 4;
  if (has_pipelet()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pipelet().data(), this->pipelet().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pipelet(), target);
  }
  
  // optional fixed32 pipelet_num = 5;
  if (has_pipelet_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->pipelet_num(), target);
  }
  
  // repeated fixed32 pipelet_id = 6;
  for (int i = 0; i < this->pipelet_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(6, this->pipelet_id(i), target);
  }
  
  // optional fixed64 sub_point = 7;
  if (has_sub_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->sub_point(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BigpipeSub::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // optional string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
    // optional string pipelet = 4;
    if (has_pipelet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pipelet());
    }
    
    // optional fixed32 pipelet_num = 5;
    if (has_pipelet_num()) {
      total_size += 1 + 4;
    }
    
    // optional fixed64 sub_point = 7;
    if (has_sub_point()) {
      total_size += 1 + 8;
    }
    
  }
  // repeated fixed32 pipelet_id = 6;
  {
    int data_size = 0;
    data_size = 4 * this->pipelet_id_size();
    total_size += 1 * this->pipelet_id_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BigpipeSub::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BigpipeSub* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BigpipeSub*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BigpipeSub::MergeFrom(const BigpipeSub& from) {
  GOOGLE_CHECK_NE(&from, this);
  pipelet_id_.MergeFrom(from.pipelet_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_pipelet()) {
      set_pipelet(from.pipelet());
    }
    if (from.has_pipelet_num()) {
      set_pipelet_num(from.pipelet_num());
    }
    if (from.has_sub_point()) {
      set_sub_point(from.sub_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BigpipeSub::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BigpipeSub::CopyFrom(const BigpipeSub& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigpipeSub::IsInitialized() const {
  
  return true;
}

void BigpipeSub::Swap(BigpipeSub* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(pipelet_, other->pipelet_);
    std::swap(pipelet_num_, other->pipelet_num_);
    pipelet_id_.Swap(&other->pipelet_id_);
    std::swap(sub_point_, other->sub_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BigpipeSub::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BigpipeSub_descriptor_;
  metadata.reflection = BigpipeSub_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HdfsSub::kPathFieldNumber;
const int HdfsSub::kUsernameFieldNumber;
const int HdfsSub::kPasswordFieldNumber;
#endif  // !_MSC_VER

HdfsSub::HdfsSub()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HdfsSub::InitAsDefaultInstance() {
}

HdfsSub::HdfsSub(const HdfsSub& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HdfsSub::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HdfsSub::~HdfsSub() {
  SharedDtor();
}

void HdfsSub::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void HdfsSub::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HdfsSub::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HdfsSub_descriptor_;
}

const HdfsSub& HdfsSub::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_application_2eproto();  return *default_instance_;
}

HdfsSub* HdfsSub::default_instance_ = NULL;

HdfsSub* HdfsSub::New() const {
  return new HdfsSub;
}

void HdfsSub::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HdfsSub::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }
      
      // optional string username = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }
      
      // optional string password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HdfsSub::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }
  
  // optional string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->username(), output);
  }
  
  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HdfsSub::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }
  
  // optional string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }
  
  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HdfsSub::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
    // optional string username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // optional string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HdfsSub::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HdfsSub* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HdfsSub*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HdfsSub::MergeFrom(const HdfsSub& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HdfsSub::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HdfsSub::CopyFrom(const HdfsSub& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HdfsSub::IsInitialized() const {
  
  return true;
}

void HdfsSub::Swap(HdfsSub* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HdfsSub::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HdfsSub_descriptor_;
  metadata.reflection = HdfsSub_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProcessorSub::kNameFieldNumber;
const int ProcessorSub::kTagsFieldNumber;
const int ProcessorSub::kUsernameFieldNumber;
const int ProcessorSub::kPasswordFieldNumber;
#endif  // !_MSC_VER

ProcessorSub::ProcessorSub()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProcessorSub::InitAsDefaultInstance() {
}

ProcessorSub::ProcessorSub(const ProcessorSub& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProcessorSub::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tags_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProcessorSub::~ProcessorSub() {
  SharedDtor();
}

void ProcessorSub::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (tags_ != &::google::protobuf::internal::kEmptyString) {
    delete tags_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void ProcessorSub::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessorSub::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessorSub_descriptor_;
}

const ProcessorSub& ProcessorSub::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_application_2eproto();  return *default_instance_;
}

ProcessorSub* ProcessorSub::default_instance_ = NULL;

ProcessorSub* ProcessorSub::New() const {
  return new ProcessorSub;
}

void ProcessorSub::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_tags()) {
      if (tags_ != &::google::protobuf::internal::kEmptyString) {
        tags_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProcessorSub::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tags;
        break;
      }
      
      // optional string tags = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tags().data(), this->tags().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_username;
        break;
      }
      
      // optional string username = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_password;
        break;
      }
      
      // optional string password = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProcessorSub::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional string tags = 2;
  if (has_tags()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tags().data(), this->tags().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tags(), output);
  }
  
  // optional string username = 3;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->username(), output);
  }
  
  // optional string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->password(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProcessorSub::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional string tags = 2;
  if (has_tags()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tags().data(), this->tags().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tags(), target);
  }
  
  // optional string username = 3;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }
  
  // optional string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->password(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProcessorSub::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string tags = 2;
    if (has_tags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tags());
    }
    
    // optional string username = 3;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // optional string password = 4;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessorSub::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProcessorSub* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProcessorSub*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProcessorSub::MergeFrom(const ProcessorSub& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_tags()) {
      set_tags(from.tags());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProcessorSub::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessorSub::CopyFrom(const ProcessorSub& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessorSub::IsInitialized() const {
  
  return true;
}

void ProcessorSub::Swap(ProcessorSub* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(tags_, other->tags_);
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProcessorSub::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcessorSub_descriptor_;
  metadata.reflection = ProcessorSub_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

FakeSub::FakeSub()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FakeSub::InitAsDefaultInstance() {
}

FakeSub::FakeSub(const FakeSub& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FakeSub::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FakeSub::~FakeSub() {
  SharedDtor();
}

void FakeSub::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FakeSub::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FakeSub::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FakeSub_descriptor_;
}

const FakeSub& FakeSub::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_application_2eproto();  return *default_instance_;
}

FakeSub* FakeSub::default_instance_ = NULL;

FakeSub* FakeSub::New() const {
  return new FakeSub;
}

void FakeSub::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FakeSub::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void FakeSub::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FakeSub::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FakeSub::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FakeSub::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FakeSub* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FakeSub*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FakeSub::MergeFrom(const FakeSub& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FakeSub::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FakeSub::CopyFrom(const FakeSub& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FakeSub::IsInitialized() const {
  
  return true;
}

void FakeSub::Swap(FakeSub* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FakeSub::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FakeSub_descriptor_;
  metadata.reflection = FakeSub_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Topology::kProcessorNumFieldNumber;
const int Topology::kProcessorsFieldNumber;
const int Topology::kImporterIdFieldNumber;
const int Topology::kExporterIdFieldNumber;
const int Topology::kUpstreamBigpipeNumFieldNumber;
#endif  // !_MSC_VER

Topology::Topology()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Topology::InitAsDefaultInstance() {
}

Topology::Topology(const Topology& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Topology::SharedCtor() {
  _cached_size_ = 0;
  processor_num_ = 0u;
  upstream_bigpipe_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Topology::~Topology() {
  SharedDtor();
}

void Topology::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Topology::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Topology::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Topology_descriptor_;
}

const Topology& Topology::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_application_2eproto();  return *default_instance_;
}

Topology* Topology::default_instance_ = NULL;

Topology* Topology::New() const {
  return new Topology;
}

void Topology::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    processor_num_ = 0u;
    upstream_bigpipe_num_ = 0u;
  }
  processors_.Clear();
  importer_id_.Clear();
  exporter_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Topology::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 processor_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &processor_num_)));
          set_has_processor_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_processors;
        break;
      }
      
      // repeated .dstream.Processor processors = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_processors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_processors()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_processors;
        if (input->ExpectTag(26)) goto parse_importer_id;
        break;
      }
      
      // repeated .dstream.ProcessorID importer_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_importer_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_importer_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_importer_id;
        if (input->ExpectTag(34)) goto parse_exporter_id;
        break;
      }
      
      // repeated .dstream.ProcessorID exporter_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exporter_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_exporter_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_exporter_id;
        if (input->ExpectTag(45)) goto parse_upstream_bigpipe_num;
        break;
      }
      
      // optional fixed32 upstream_bigpipe_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_upstream_bigpipe_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &upstream_bigpipe_num_)));
          set_has_upstream_bigpipe_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Topology::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 processor_num = 1;
  if (has_processor_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->processor_num(), output);
  }
  
  // repeated .dstream.Processor processors = 2;
  for (int i = 0; i < this->processors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->processors(i), output);
  }
  
  // repeated .dstream.ProcessorID importer_id = 3;
  for (int i = 0; i < this->importer_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->importer_id(i), output);
  }
  
  // repeated .dstream.ProcessorID exporter_id = 4;
  for (int i = 0; i < this->exporter_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->exporter_id(i), output);
  }
  
  // optional fixed32 upstream_bigpipe_num = 5;
  if (has_upstream_bigpipe_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->upstream_bigpipe_num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Topology::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 processor_num = 1;
  if (has_processor_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->processor_num(), target);
  }
  
  // repeated .dstream.Processor processors = 2;
  for (int i = 0; i < this->processors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->processors(i), target);
  }
  
  // repeated .dstream.ProcessorID importer_id = 3;
  for (int i = 0; i < this->importer_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->importer_id(i), target);
  }
  
  // repeated .dstream.ProcessorID exporter_id = 4;
  for (int i = 0; i < this->exporter_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->exporter_id(i), target);
  }
  
  // optional fixed32 upstream_bigpipe_num = 5;
  if (has_upstream_bigpipe_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->upstream_bigpipe_num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Topology::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 processor_num = 1;
    if (has_processor_num()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 upstream_bigpipe_num = 5;
    if (has_upstream_bigpipe_num()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated .dstream.Processor processors = 2;
  total_size += 1 * this->processors_size();
  for (int i = 0; i < this->processors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->processors(i));
  }
  
  // repeated .dstream.ProcessorID importer_id = 3;
  total_size += 1 * this->importer_id_size();
  for (int i = 0; i < this->importer_id_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->importer_id(i));
  }
  
  // repeated .dstream.ProcessorID exporter_id = 4;
  total_size += 1 * this->exporter_id_size();
  for (int i = 0; i < this->exporter_id_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exporter_id(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Topology::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Topology* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Topology*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Topology::MergeFrom(const Topology& from) {
  GOOGLE_CHECK_NE(&from, this);
  processors_.MergeFrom(from.processors_);
  importer_id_.MergeFrom(from.importer_id_);
  exporter_id_.MergeFrom(from.exporter_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_processor_num()) {
      set_processor_num(from.processor_num());
    }
    if (from.has_upstream_bigpipe_num()) {
      set_upstream_bigpipe_num(from.upstream_bigpipe_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Topology::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Topology::CopyFrom(const Topology& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Topology::IsInitialized() const {
  
  return true;
}

void Topology::Swap(Topology* other) {
  if (other != this) {
    std::swap(processor_num_, other->processor_num_);
    processors_.Swap(&other->processors_);
    importer_id_.Swap(&other->importer_id_);
    exporter_id_.Swap(&other->exporter_id_);
    std::swap(upstream_bigpipe_num_, other->upstream_bigpipe_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Topology::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Topology_descriptor_;
  metadata.reflection = Topology_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FlowControl::kQpsLimitFieldNumber;
#endif  // !_MSC_VER

FlowControl::FlowControl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlowControl::InitAsDefaultInstance() {
}

FlowControl::FlowControl(const FlowControl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlowControl::SharedCtor() {
  _cached_size_ = 0;
  qps_limit_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlowControl::~FlowControl() {
  SharedDtor();
}

void FlowControl::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FlowControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlowControl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlowControl_descriptor_;
}

const FlowControl& FlowControl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_application_2eproto();  return *default_instance_;
}

FlowControl* FlowControl::default_instance_ = NULL;

FlowControl* FlowControl::New() const {
  return new FlowControl;
}

void FlowControl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    qps_limit_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlowControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 qps_limit = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qps_limit_)));
          set_has_qps_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlowControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 qps_limit = 1 [default = -1];
  if (has_qps_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->qps_limit(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlowControl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 qps_limit = 1 [default = -1];
  if (has_qps_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->qps_limit(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlowControl::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 qps_limit = 1 [default = -1];
    if (has_qps_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qps_limit());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlowControl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlowControl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlowControl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlowControl::MergeFrom(const FlowControl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_qps_limit()) {
      set_qps_limit(from.qps_limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlowControl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowControl::CopyFrom(const FlowControl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowControl::IsInitialized() const {
  
  return true;
}

void FlowControl::Swap(FlowControl* other) {
  if (other != this) {
    std::swap(qps_limit_, other->qps_limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlowControl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlowControl_descriptor_;
  metadata.reflection = FlowControl_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Application::kSessionIdFieldNumber;
const int Application::kIdFieldNumber;
const int Application::kNameFieldNumber;
const int Application::kDescrFieldNumber;
const int Application::kUserFieldNumber;
const int Application::kAppPathFieldNumber;
const int Application::kCheckpointPathFieldNumber;
const int Application::kBigpipeFieldNumber;
const int Application::kTopologyFieldNumber;
const int Application::kStatusFieldNumber;
const int Application::kLogPathFieldNumber;
const int Application::kSubmitTimeFieldNumber;
const int Application::kDataStrategyFieldNumber;
#endif  // !_MSC_VER

Application::Application()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Application::InitAsDefaultInstance() {
  id_ = const_cast< ::dstream::AppID*>(&::dstream::AppID::default_instance());
  user_ = const_cast< ::dstream::User*>(&::dstream::User::default_instance());
  app_path_ = const_cast< ::dstream::FileConfig*>(&::dstream::FileConfig::default_instance());
  checkpoint_path_ = const_cast< ::dstream::FileConfig*>(&::dstream::FileConfig::default_instance());
  bigpipe_ = const_cast< ::dstream::BigpipeSub*>(&::dstream::BigpipeSub::default_instance());
  topology_ = const_cast< ::dstream::Topology*>(&::dstream::Topology::default_instance());
  log_path_ = const_cast< ::dstream::FileConfig*>(&::dstream::FileConfig::default_instance());
}

Application::Application(const Application& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Application::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = GOOGLE_ULONGLONG(0);
  id_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  descr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_ = NULL;
  app_path_ = NULL;
  checkpoint_path_ = NULL;
  bigpipe_ = NULL;
  topology_ = NULL;
  status_ = 0;
  log_path_ = NULL;
  submit_time_ = GOOGLE_ULONGLONG(0);
  data_strategy_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Application::~Application() {
  SharedDtor();
}

void Application::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (descr_ != &::google::protobuf::internal::kEmptyString) {
    delete descr_;
  }
  if (this != default_instance_) {
    delete id_;
    delete user_;
    delete app_path_;
    delete checkpoint_path_;
    delete bigpipe_;
    delete topology_;
    delete log_path_;
  }
}

void Application::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Application::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Application_descriptor_;
}

const Application& Application::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_application_2eproto();  return *default_instance_;
}

Application* Application::default_instance_ = NULL;

Application* Application::New() const {
  return new Application;
}

void Application::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = GOOGLE_ULONGLONG(0);
    if (has_id()) {
      if (id_ != NULL) id_->::dstream::AppID::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_descr()) {
      if (descr_ != &::google::protobuf::internal::kEmptyString) {
        descr_->clear();
      }
    }
    if (has_user()) {
      if (user_ != NULL) user_->::dstream::User::Clear();
    }
    if (has_app_path()) {
      if (app_path_ != NULL) app_path_->::dstream::FileConfig::Clear();
    }
    if (has_checkpoint_path()) {
      if (checkpoint_path_ != NULL) checkpoint_path_->::dstream::FileConfig::Clear();
    }
    if (has_bigpipe()) {
      if (bigpipe_ != NULL) bigpipe_->::dstream::BigpipeSub::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_topology()) {
      if (topology_ != NULL) topology_->::dstream::Topology::Clear();
    }
    status_ = 0;
    if (has_log_path()) {
      if (log_path_ != NULL) log_path_->::dstream::FileConfig::Clear();
    }
    submit_time_ = GOOGLE_ULONGLONG(0);
    data_strategy_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Application::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }
      
      // optional .dstream.AppID id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_descr;
        break;
      }
      
      // optional string descr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_descr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_descr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->descr().data(), this->descr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_user;
        break;
      }
      
      // optional .dstream.User user = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_app_path;
        break;
      }
      
      // optional .dstream.FileConfig app_path = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_checkpoint_path;
        break;
      }
      
      // optional .dstream.FileConfig checkpoint_path = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_checkpoint_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_checkpoint_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_bigpipe;
        break;
      }
      
      // optional .dstream.BigpipeSub bigpipe = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bigpipe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bigpipe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_topology;
        break;
      }
      
      // optional .dstream.Topology topology = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topology:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topology()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_status;
        break;
      }
      
      // optional .dstream.AppStatus status = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (dstream::AppStatus_IsValid(value)) {
            set_status(static_cast< dstream::AppStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_log_path;
        break;
      }
      
      // optional .dstream.FileConfig log_path = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_log_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_submit_time;
        break;
      }
      
      // optional fixed64 submit_time = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_submit_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &submit_time_)));
          set_has_submit_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_data_strategy;
        break;
      }
      
      // optional fixed32 data_strategy = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_data_strategy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &data_strategy_)));
          set_has_data_strategy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Application::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 session_id = 1;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->session_id(), output);
  }
  
  // optional .dstream.AppID id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->id(), output);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  // optional string descr = 4;
  if (has_descr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->descr().data(), this->descr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->descr(), output);
  }
  
  // optional .dstream.User user = 5;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->user(), output);
  }
  
  // optional .dstream.FileConfig app_path = 6;
  if (has_app_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->app_path(), output);
  }
  
  // optional .dstream.FileConfig checkpoint_path = 7;
  if (has_checkpoint_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->checkpoint_path(), output);
  }
  
  // optional .dstream.BigpipeSub bigpipe = 8;
  if (has_bigpipe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->bigpipe(), output);
  }
  
  // optional .dstream.Topology topology = 9;
  if (has_topology()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->topology(), output);
  }
  
  // optional .dstream.AppStatus status = 10;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->status(), output);
  }
  
  // optional .dstream.FileConfig log_path = 11;
  if (has_log_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->log_path(), output);
  }
  
  // optional fixed64 submit_time = 12;
  if (has_submit_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(12, this->submit_time(), output);
  }
  
  // optional fixed32 data_strategy = 14;
  if (has_data_strategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(14, this->data_strategy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Application::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 session_id = 1;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->session_id(), target);
  }
  
  // optional .dstream.AppID id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->id(), target);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  // optional string descr = 4;
  if (has_descr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->descr().data(), this->descr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->descr(), target);
  }
  
  // optional .dstream.User user = 5;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->user(), target);
  }
  
  // optional .dstream.FileConfig app_path = 6;
  if (has_app_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->app_path(), target);
  }
  
  // optional .dstream.FileConfig checkpoint_path = 7;
  if (has_checkpoint_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->checkpoint_path(), target);
  }
  
  // optional .dstream.BigpipeSub bigpipe = 8;
  if (has_bigpipe()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->bigpipe(), target);
  }
  
  // optional .dstream.Topology topology = 9;
  if (has_topology()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->topology(), target);
  }
  
  // optional .dstream.AppStatus status = 10;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->status(), target);
  }
  
  // optional .dstream.FileConfig log_path = 11;
  if (has_log_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->log_path(), target);
  }
  
  // optional fixed64 submit_time = 12;
  if (has_submit_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(12, this->submit_time(), target);
  }
  
  // optional fixed32 data_strategy = 14;
  if (has_data_strategy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(14, this->data_strategy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Application::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 session_id = 1;
    if (has_session_id()) {
      total_size += 1 + 8;
    }
    
    // optional .dstream.AppID id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }
    
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string descr = 4;
    if (has_descr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->descr());
    }
    
    // optional .dstream.User user = 5;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }
    
    // optional .dstream.FileConfig app_path = 6;
    if (has_app_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->app_path());
    }
    
    // optional .dstream.FileConfig checkpoint_path = 7;
    if (has_checkpoint_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->checkpoint_path());
    }
    
    // optional .dstream.BigpipeSub bigpipe = 8;
    if (has_bigpipe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bigpipe());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .dstream.Topology topology = 9;
    if (has_topology()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->topology());
    }
    
    // optional .dstream.AppStatus status = 10;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }
    
    // optional .dstream.FileConfig log_path = 11;
    if (has_log_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->log_path());
    }
    
    // optional fixed64 submit_time = 12;
    if (has_submit_time()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 data_strategy = 14;
    if (has_data_strategy()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Application::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Application* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Application*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Application::MergeFrom(const Application& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_id()) {
      mutable_id()->::dstream::AppID::MergeFrom(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_descr()) {
      set_descr(from.descr());
    }
    if (from.has_user()) {
      mutable_user()->::dstream::User::MergeFrom(from.user());
    }
    if (from.has_app_path()) {
      mutable_app_path()->::dstream::FileConfig::MergeFrom(from.app_path());
    }
    if (from.has_checkpoint_path()) {
      mutable_checkpoint_path()->::dstream::FileConfig::MergeFrom(from.checkpoint_path());
    }
    if (from.has_bigpipe()) {
      mutable_bigpipe()->::dstream::BigpipeSub::MergeFrom(from.bigpipe());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_topology()) {
      mutable_topology()->::dstream::Topology::MergeFrom(from.topology());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_log_path()) {
      mutable_log_path()->::dstream::FileConfig::MergeFrom(from.log_path());
    }
    if (from.has_submit_time()) {
      set_submit_time(from.submit_time());
    }
    if (from.has_data_strategy()) {
      set_data_strategy(from.data_strategy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Application::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Application::CopyFrom(const Application& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Application::IsInitialized() const {
  
  return true;
}

void Application::Swap(Application* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(descr_, other->descr_);
    std::swap(user_, other->user_);
    std::swap(app_path_, other->app_path_);
    std::swap(checkpoint_path_, other->checkpoint_path_);
    std::swap(bigpipe_, other->bigpipe_);
    std::swap(topology_, other->topology_);
    std::swap(status_, other->status_);
    std::swap(log_path_, other->log_path_);
    std::swap(submit_time_, other->submit_time_);
    std::swap(data_strategy_, other->data_strategy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Application::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Application_descriptor_;
  metadata.reflection = Application_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BackupPEID::kIdFieldNumber;
#endif  // !_MSC_VER

BackupPEID::BackupPEID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BackupPEID::InitAsDefaultInstance() {
}

BackupPEID::BackupPEID(const BackupPEID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BackupPEID::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BackupPEID::~BackupPEID() {
  SharedDtor();
}

void BackupPEID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BackupPEID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BackupPEID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BackupPEID_descriptor_;
}

const BackupPEID& BackupPEID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_application_2eproto();  return *default_instance_;
}

BackupPEID* BackupPEID::default_instance_ = NULL;

BackupPEID* BackupPEID::New() const {
  return new BackupPEID;
}

void BackupPEID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BackupPEID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BackupPEID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BackupPEID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BackupPEID::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 id = 1;
    if (has_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BackupPEID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BackupPEID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BackupPEID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BackupPEID::MergeFrom(const BackupPEID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BackupPEID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackupPEID::CopyFrom(const BackupPEID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackupPEID::IsInitialized() const {
  
  return true;
}

void BackupPEID::Swap(BackupPEID* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BackupPEID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BackupPEID_descriptor_;
  metadata.reflection = BackupPEID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BackupPE::kBackupPeIdFieldNumber;
const int BackupPE::kPnIdFieldNumber;
const int BackupPE::kLastAssignmentTimeFieldNumber;
const int BackupPE::kPeStatusFieldNumber;
const int BackupPE::kLastFailPnFieldNumber;
const int BackupPE::kFailNumberFieldNumber;
#endif  // !_MSC_VER

BackupPE::BackupPE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BackupPE::InitAsDefaultInstance() {
  backup_pe_id_ = const_cast< ::dstream::BackupPEID*>(&::dstream::BackupPEID::default_instance());
  pn_id_ = const_cast< ::dstream::PNID*>(&::dstream::PNID::default_instance());
}

BackupPE::BackupPE(const BackupPE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BackupPE::SharedCtor() {
  _cached_size_ = 0;
  backup_pe_id_ = NULL;
  pn_id_ = NULL;
  last_assignment_time_ = GOOGLE_ULONGLONG(0);
  pe_status_ = 0;
  last_fail_pn_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fail_number_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BackupPE::~BackupPE() {
  SharedDtor();
}

void BackupPE::SharedDtor() {
  if (last_fail_pn_ != &::google::protobuf::internal::kEmptyString) {
    delete last_fail_pn_;
  }
  if (this != default_instance_) {
    delete backup_pe_id_;
    delete pn_id_;
  }
}

void BackupPE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BackupPE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BackupPE_descriptor_;
}

const BackupPE& BackupPE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_application_2eproto();  return *default_instance_;
}

BackupPE* BackupPE::default_instance_ = NULL;

BackupPE* BackupPE::New() const {
  return new BackupPE;
}

void BackupPE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_backup_pe_id()) {
      if (backup_pe_id_ != NULL) backup_pe_id_->::dstream::BackupPEID::Clear();
    }
    if (has_pn_id()) {
      if (pn_id_ != NULL) pn_id_->::dstream::PNID::Clear();
    }
    last_assignment_time_ = GOOGLE_ULONGLONG(0);
    pe_status_ = 0;
    if (has_last_fail_pn()) {
      if (last_fail_pn_ != &::google::protobuf::internal::kEmptyString) {
        last_fail_pn_->clear();
      }
    }
    fail_number_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BackupPE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dstream.BackupPEID backup_pe_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_backup_pe_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pn_id;
        break;
      }
      
      // optional .dstream.PNID pn_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pn_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pn_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_last_assignment_time;
        break;
      }
      
      // optional fixed64 last_assignment_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_last_assignment_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &last_assignment_time_)));
          set_has_last_assignment_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pe_status;
        break;
      }
      
      // optional .dstream.PEStatus pe_status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pe_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (dstream::PEStatus_IsValid(value)) {
            set_pe_status(static_cast< dstream::PEStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_last_fail_pn;
        break;
      }
      
      // optional string last_fail_pn = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last_fail_pn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_fail_pn()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->last_fail_pn().data(), this->last_fail_pn().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_fail_number;
        break;
      }
      
      // optional fixed32 fail_number = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fail_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &fail_number_)));
          set_has_fail_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BackupPE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dstream.BackupPEID backup_pe_id = 1;
  if (has_backup_pe_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->backup_pe_id(), output);
  }
  
  // optional .dstream.PNID pn_id = 2;
  if (has_pn_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pn_id(), output);
  }
  
  // optional fixed64 last_assignment_time = 3;
  if (has_last_assignment_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->last_assignment_time(), output);
  }
  
  // optional .dstream.PEStatus pe_status = 4;
  if (has_pe_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->pe_status(), output);
  }
  
  // optional string last_fail_pn = 5;
  if (has_last_fail_pn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->last_fail_pn().data(), this->last_fail_pn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->last_fail_pn(), output);
  }
  
  // optional fixed32 fail_number = 6;
  if (has_fail_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->fail_number(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BackupPE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dstream.BackupPEID backup_pe_id = 1;
  if (has_backup_pe_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->backup_pe_id(), target);
  }
  
  // optional .dstream.PNID pn_id = 2;
  if (has_pn_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pn_id(), target);
  }
  
  // optional fixed64 last_assignment_time = 3;
  if (has_last_assignment_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->last_assignment_time(), target);
  }
  
  // optional .dstream.PEStatus pe_status = 4;
  if (has_pe_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->pe_status(), target);
  }
  
  // optional string last_fail_pn = 5;
  if (has_last_fail_pn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->last_fail_pn().data(), this->last_fail_pn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->last_fail_pn(), target);
  }
  
  // optional fixed32 fail_number = 6;
  if (has_fail_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(6, this->fail_number(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BackupPE::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dstream.BackupPEID backup_pe_id = 1;
    if (has_backup_pe_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->backup_pe_id());
    }
    
    // optional .dstream.PNID pn_id = 2;
    if (has_pn_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pn_id());
    }
    
    // optional fixed64 last_assignment_time = 3;
    if (has_last_assignment_time()) {
      total_size += 1 + 8;
    }
    
    // optional .dstream.PEStatus pe_status = 4;
    if (has_pe_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pe_status());
    }
    
    // optional string last_fail_pn = 5;
    if (has_last_fail_pn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_fail_pn());
    }
    
    // optional fixed32 fail_number = 6;
    if (has_fail_number()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BackupPE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BackupPE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BackupPE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BackupPE::MergeFrom(const BackupPE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_backup_pe_id()) {
      mutable_backup_pe_id()->::dstream::BackupPEID::MergeFrom(from.backup_pe_id());
    }
    if (from.has_pn_id()) {
      mutable_pn_id()->::dstream::PNID::MergeFrom(from.pn_id());
    }
    if (from.has_last_assignment_time()) {
      set_last_assignment_time(from.last_assignment_time());
    }
    if (from.has_pe_status()) {
      set_pe_status(from.pe_status());
    }
    if (from.has_last_fail_pn()) {
      set_last_fail_pn(from.last_fail_pn());
    }
    if (from.has_fail_number()) {
      set_fail_number(from.fail_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BackupPE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackupPE::CopyFrom(const BackupPE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackupPE::IsInitialized() const {
  
  return true;
}

void BackupPE::Swap(BackupPE* other) {
  if (other != this) {
    std::swap(backup_pe_id_, other->backup_pe_id_);
    std::swap(pn_id_, other->pn_id_);
    std::swap(last_assignment_time_, other->last_assignment_time_);
    std::swap(pe_status_, other->pe_status_);
    std::swap(last_fail_pn_, other->last_fail_pn_);
    std::swap(fail_number_, other->fail_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BackupPE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BackupPE_descriptor_;
  metadata.reflection = BackupPE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int logConfig::kBigpipeFieldNumber;
const int logConfig::kPipeNameFieldNumber;
const int logConfig::kPipeletFieldNumber;
#endif  // !_MSC_VER

logConfig::logConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void logConfig::InitAsDefaultInstance() {
  bigpipe_ = const_cast< ::dstream::BigpipeSub*>(&::dstream::BigpipeSub::default_instance());
}

logConfig::logConfig(const logConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void logConfig::SharedCtor() {
  _cached_size_ = 0;
  bigpipe_ = NULL;
  pipe_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pipelet_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

logConfig::~logConfig() {
  SharedDtor();
}

void logConfig::SharedDtor() {
  if (pipe_name_ != &::google::protobuf::internal::kEmptyString) {
    delete pipe_name_;
  }
  if (this != default_instance_) {
    delete bigpipe_;
  }
}

void logConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* logConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return logConfig_descriptor_;
}

const logConfig& logConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_application_2eproto();  return *default_instance_;
}

logConfig* logConfig::default_instance_ = NULL;

logConfig* logConfig::New() const {
  return new logConfig;
}

void logConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_bigpipe()) {
      if (bigpipe_ != NULL) bigpipe_->::dstream::BigpipeSub::Clear();
    }
    if (has_pipe_name()) {
      if (pipe_name_ != &::google::protobuf::internal::kEmptyString) {
        pipe_name_->clear();
      }
    }
    pipelet_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool logConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dstream.BigpipeSub bigpipe = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bigpipe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pipe_name;
        break;
      }
      
      // optional string pipe_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pipe_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pipe_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pipe_name().data(), this->pipe_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_pipelet;
        break;
      }
      
      // optional fixed32 pipelet = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pipelet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &pipelet_)));
          set_has_pipelet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void logConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dstream.BigpipeSub bigpipe = 1;
  if (has_bigpipe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bigpipe(), output);
  }
  
  // optional string pipe_name = 2;
  if (has_pipe_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pipe_name().data(), this->pipe_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pipe_name(), output);
  }
  
  // optional fixed32 pipelet = 3;
  if (has_pipelet()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->pipelet(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* logConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dstream.BigpipeSub bigpipe = 1;
  if (has_bigpipe()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bigpipe(), target);
  }
  
  // optional string pipe_name = 2;
  if (has_pipe_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pipe_name().data(), this->pipe_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pipe_name(), target);
  }
  
  // optional fixed32 pipelet = 3;
  if (has_pipelet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->pipelet(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int logConfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dstream.BigpipeSub bigpipe = 1;
    if (has_bigpipe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bigpipe());
    }
    
    // optional string pipe_name = 2;
    if (has_pipe_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pipe_name());
    }
    
    // optional fixed32 pipelet = 3;
    if (has_pipelet()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void logConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const logConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const logConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void logConfig::MergeFrom(const logConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bigpipe()) {
      mutable_bigpipe()->::dstream::BigpipeSub::MergeFrom(from.bigpipe());
    }
    if (from.has_pipe_name()) {
      set_pipe_name(from.pipe_name());
    }
    if (from.has_pipelet()) {
      set_pipelet(from.pipelet());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void logConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void logConfig::CopyFrom(const logConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool logConfig::IsInitialized() const {
  
  return true;
}

void logConfig::Swap(logConfig* other) {
  if (other != this) {
    std::swap(bigpipe_, other->bigpipe_);
    std::swap(pipe_name_, other->pipe_name_);
    std::swap(pipelet_, other->pipelet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata logConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = logConfig_descriptor_;
  metadata.reflection = logConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProcessorElement::kAppFieldNumber;
const int ProcessorElement::kProcessorFieldNumber;
const int ProcessorElement::kPeIdFieldNumber;
const int ProcessorElement::kSerialFieldNumber;
const int ProcessorElement::kLogFieldNumber;
const int ProcessorElement::kBackupsFieldNumber;
const int ProcessorElement::kPrimaryFieldNumber;
const int ProcessorElement::kProcessorNameFieldNumber;
const int ProcessorElement::kResourceFieldNumber;
#endif  // !_MSC_VER

ProcessorElement::ProcessorElement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProcessorElement::InitAsDefaultInstance() {
  app_ = const_cast< ::dstream::AppID*>(&::dstream::AppID::default_instance());
  processor_ = const_cast< ::dstream::ProcessorID*>(&::dstream::ProcessorID::default_instance());
  pe_id_ = const_cast< ::dstream::PEID*>(&::dstream::PEID::default_instance());
  log_ = const_cast< ::dstream::logConfig*>(&::dstream::logConfig::default_instance());
  resource_ = const_cast< ::dstream::Resource*>(&::dstream::Resource::default_instance());
}

ProcessorElement::ProcessorElement(const ProcessorElement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProcessorElement::SharedCtor() {
  _cached_size_ = 0;
  app_ = NULL;
  processor_ = NULL;
  pe_id_ = NULL;
  serial_ = GOOGLE_ULONGLONG(0);
  log_ = NULL;
  processor_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resource_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProcessorElement::~ProcessorElement() {
  SharedDtor();
}

void ProcessorElement::SharedDtor() {
  if (processor_name_ != &::google::protobuf::internal::kEmptyString) {
    delete processor_name_;
  }
  if (this != default_instance_) {
    delete app_;
    delete processor_;
    delete pe_id_;
    delete log_;
    delete resource_;
  }
}

void ProcessorElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessorElement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessorElement_descriptor_;
}

const ProcessorElement& ProcessorElement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_application_2eproto();  return *default_instance_;
}

ProcessorElement* ProcessorElement::default_instance_ = NULL;

ProcessorElement* ProcessorElement::New() const {
  return new ProcessorElement;
}

void ProcessorElement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_app()) {
      if (app_ != NULL) app_->::dstream::AppID::Clear();
    }
    if (has_processor()) {
      if (processor_ != NULL) processor_->::dstream::ProcessorID::Clear();
    }
    if (has_pe_id()) {
      if (pe_id_ != NULL) pe_id_->::dstream::PEID::Clear();
    }
    serial_ = GOOGLE_ULONGLONG(0);
    if (has_log()) {
      if (log_ != NULL) log_->::dstream::logConfig::Clear();
    }
    if (has_processor_name()) {
      if (processor_name_ != &::google::protobuf::internal::kEmptyString) {
        processor_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_resource()) {
      if (resource_ != NULL) resource_->::dstream::Resource::Clear();
    }
  }
  backups_.Clear();
  primary_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProcessorElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dstream.AppID app = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_processor;
        break;
      }
      
      // optional .dstream.ProcessorID processor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_processor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_processor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pe_id;
        break;
      }
      
      // optional .dstream.PEID pe_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pe_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pe_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_serial;
        break;
      }
      
      // optional fixed64 serial = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_serial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &serial_)));
          set_has_serial();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_log;
        break;
      }
      
      // optional .dstream.logConfig log = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_log()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_backups;
        break;
      }
      
      // repeated .dstream.BackupPE backups = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_backups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_backups()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_backups;
        if (input->ExpectTag(58)) goto parse_primary;
        break;
      }
      
      // repeated .dstream.BackupPEID primary = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_primary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_primary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_primary;
        if (input->ExpectTag(66)) goto parse_processor_name;
        break;
      }
      
      // optional string processor_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_processor_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_processor_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->processor_name().data(), this->processor_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_resource;
        break;
      }
      
      // optional .dstream.Resource resource = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProcessorElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dstream.AppID app = 1;
  if (has_app()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->app(), output);
  }
  
  // optional .dstream.ProcessorID processor = 2;
  if (has_processor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->processor(), output);
  }
  
  // optional .dstream.PEID pe_id = 3;
  if (has_pe_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pe_id(), output);
  }
  
  // optional fixed64 serial = 4;
  if (has_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->serial(), output);
  }
  
  // optional .dstream.logConfig log = 5;
  if (has_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->log(), output);
  }
  
  // repeated .dstream.BackupPE backups = 6;
  for (int i = 0; i < this->backups_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->backups(i), output);
  }
  
  // repeated .dstream.BackupPEID primary = 7;
  for (int i = 0; i < this->primary_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->primary(i), output);
  }
  
  // optional string processor_name = 8;
  if (has_processor_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->processor_name().data(), this->processor_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->processor_name(), output);
  }
  
  // optional .dstream.Resource resource = 9;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->resource(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProcessorElement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dstream.AppID app = 1;
  if (has_app()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->app(), target);
  }
  
  // optional .dstream.ProcessorID processor = 2;
  if (has_processor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->processor(), target);
  }
  
  // optional .dstream.PEID pe_id = 3;
  if (has_pe_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pe_id(), target);
  }
  
  // optional fixed64 serial = 4;
  if (has_serial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->serial(), target);
  }
  
  // optional .dstream.logConfig log = 5;
  if (has_log()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->log(), target);
  }
  
  // repeated .dstream.BackupPE backups = 6;
  for (int i = 0; i < this->backups_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->backups(i), target);
  }
  
  // repeated .dstream.BackupPEID primary = 7;
  for (int i = 0; i < this->primary_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->primary(i), target);
  }
  
  // optional string processor_name = 8;
  if (has_processor_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->processor_name().data(), this->processor_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->processor_name(), target);
  }
  
  // optional .dstream.Resource resource = 9;
  if (has_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->resource(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProcessorElement::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dstream.AppID app = 1;
    if (has_app()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->app());
    }
    
    // optional .dstream.ProcessorID processor = 2;
    if (has_processor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->processor());
    }
    
    // optional .dstream.PEID pe_id = 3;
    if (has_pe_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pe_id());
    }
    
    // optional fixed64 serial = 4;
    if (has_serial()) {
      total_size += 1 + 8;
    }
    
    // optional .dstream.logConfig log = 5;
    if (has_log()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->log());
    }
    
    // optional string processor_name = 8;
    if (has_processor_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->processor_name());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .dstream.Resource resource = 9;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resource());
    }
    
  }
  // repeated .dstream.BackupPE backups = 6;
  total_size += 1 * this->backups_size();
  for (int i = 0; i < this->backups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->backups(i));
  }
  
  // repeated .dstream.BackupPEID primary = 7;
  total_size += 1 * this->primary_size();
  for (int i = 0; i < this->primary_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->primary(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessorElement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProcessorElement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProcessorElement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProcessorElement::MergeFrom(const ProcessorElement& from) {
  GOOGLE_CHECK_NE(&from, this);
  backups_.MergeFrom(from.backups_);
  primary_.MergeFrom(from.primary_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app()) {
      mutable_app()->::dstream::AppID::MergeFrom(from.app());
    }
    if (from.has_processor()) {
      mutable_processor()->::dstream::ProcessorID::MergeFrom(from.processor());
    }
    if (from.has_pe_id()) {
      mutable_pe_id()->::dstream::PEID::MergeFrom(from.pe_id());
    }
    if (from.has_serial()) {
      set_serial(from.serial());
    }
    if (from.has_log()) {
      mutable_log()->::dstream::logConfig::MergeFrom(from.log());
    }
    if (from.has_processor_name()) {
      set_processor_name(from.processor_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_resource()) {
      mutable_resource()->::dstream::Resource::MergeFrom(from.resource());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProcessorElement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessorElement::CopyFrom(const ProcessorElement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessorElement::IsInitialized() const {
  
  return true;
}

void ProcessorElement::Swap(ProcessorElement* other) {
  if (other != this) {
    std::swap(app_, other->app_);
    std::swap(processor_, other->processor_);
    std::swap(pe_id_, other->pe_id_);
    std::swap(serial_, other->serial_);
    std::swap(log_, other->log_);
    backups_.Swap(&other->backups_);
    primary_.Swap(&other->primary_);
    std::swap(processor_name_, other->processor_name_);
    std::swap(resource_, other->resource_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProcessorElement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcessorElement_descriptor_;
  metadata.reflection = ProcessorElement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubPoint::kIdFieldNumber;
const int SubPoint::kMsgIdFieldNumber;
const int SubPoint::kSeqIdFieldNumber;
const int SubPoint::kPipeletFieldNumber;
#endif  // !_MSC_VER

SubPoint::SubPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubPoint::InitAsDefaultInstance() {
  id_ = const_cast< ::dstream::PEID*>(&::dstream::PEID::default_instance());
}

SubPoint::SubPoint(const SubPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubPoint::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  msg_id_ = GOOGLE_LONGLONG(0);
  seq_id_ = GOOGLE_ULONGLONG(0);
  pipelet_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubPoint::~SubPoint() {
  SharedDtor();
}

void SubPoint::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
  }
}

void SubPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubPoint_descriptor_;
}

const SubPoint& SubPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_application_2eproto();  return *default_instance_;
}

SubPoint* SubPoint::default_instance_ = NULL;

SubPoint* SubPoint::New() const {
  return new SubPoint;
}

void SubPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != NULL) id_->::dstream::PEID::Clear();
    }
    msg_id_ = GOOGLE_LONGLONG(0);
    seq_id_ = GOOGLE_ULONGLONG(0);
    pipelet_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dstream.PEID id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_msg_id;
        break;
      }
      
      // optional int64 msg_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_seq_id;
        break;
      }
      
      // optional fixed64 seq_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_seq_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &seq_id_)));
          set_has_seq_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_pipelet;
        break;
      }
      
      // optional fixed32 pipelet = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pipelet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &pipelet_)));
          set_has_pipelet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dstream.PEID id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }
  
  // optional int64 msg_id = 2;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->msg_id(), output);
  }
  
  // optional fixed64 seq_id = 3;
  if (has_seq_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->seq_id(), output);
  }
  
  // optional fixed32 pipelet = 4;
  if (has_pipelet()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->pipelet(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dstream.PEID id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }
  
  // optional int64 msg_id = 2;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->msg_id(), target);
  }
  
  // optional fixed64 seq_id = 3;
  if (has_seq_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->seq_id(), target);
  }
  
  // optional fixed32 pipelet = 4;
  if (has_pipelet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->pipelet(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubPoint::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dstream.PEID id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }
    
    // optional int64 msg_id = 2;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->msg_id());
    }
    
    // optional fixed64 seq_id = 3;
    if (has_seq_id()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 pipelet = 4;
    if (has_pipelet()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubPoint::MergeFrom(const SubPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::dstream::PEID::MergeFrom(from.id());
    }
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_seq_id()) {
      set_seq_id(from.seq_id());
    }
    if (from.has_pipelet()) {
      set_pipelet(from.pipelet());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubPoint::CopyFrom(const SubPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubPoint::IsInitialized() const {
  
  return true;
}

void SubPoint::Swap(SubPoint* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(msg_id_, other->msg_id_);
    std::swap(seq_id_, other->seq_id_);
    std::swap(pipelet_, other->pipelet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubPoint_descriptor_;
  metadata.reflection = SubPoint_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dstream

// @@protoc_insertion_point(global_scope)
