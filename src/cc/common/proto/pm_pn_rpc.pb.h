// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pm_pn_rpc.proto

#ifndef PROTOBUF_pm_5fpn_5frpc_2eproto__INCLUDED
#define PROTOBUF_pm_5fpn_5frpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "application.pb.h"
#include "dstream_proto_common.pb.h"
#include "pn.pb.h"
// @@protoc_insertion_point(includes)

namespace dstream {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_pm_5fpn_5frpc_2eproto();
void protobuf_AssignDesc_pm_5fpn_5frpc_2eproto();
void protobuf_ShutdownFile_pm_5fpn_5frpc_2eproto();

class CreatePEMessage;
class CreatePEResult;
class PEOperationMessage;
class PEOperationResult;
class BackupPEStatus;
class FailPE;
class TupleQueue;
class PNReport;
class ReportResponse;

enum PEOperationMessage_OperationType {
  PEOperationMessage_OperationType_KILL = 0,
  PEOperationMessage_OperationType_SETPRIMARY = 1,
  PEOperationMessage_OperationType_QUERY = 2,
  PEOperationMessage_OperationType_RESTART = 3
};
bool PEOperationMessage_OperationType_IsValid(int value);
const PEOperationMessage_OperationType PEOperationMessage_OperationType_OperationType_MIN = PEOperationMessage_OperationType_KILL;
const PEOperationMessage_OperationType PEOperationMessage_OperationType_OperationType_MAX = PEOperationMessage_OperationType_RESTART;
const int PEOperationMessage_OperationType_OperationType_ARRAYSIZE = PEOperationMessage_OperationType_OperationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PEOperationMessage_OperationType_descriptor();
inline const ::std::string& PEOperationMessage_OperationType_Name(PEOperationMessage_OperationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PEOperationMessage_OperationType_descriptor(), value);
}
inline bool PEOperationMessage_OperationType_Parse(
    const ::std::string& name, PEOperationMessage_OperationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PEOperationMessage_OperationType>(
    PEOperationMessage_OperationType_descriptor(), name, value);
}
// ===================================================================

class CreatePEMessage : public ::google::protobuf::Message {
 public:
  CreatePEMessage();
  virtual ~CreatePEMessage();
  
  CreatePEMessage(const CreatePEMessage& from);
  
  inline CreatePEMessage& operator=(const CreatePEMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreatePEMessage& default_instance();
  
  void Swap(CreatePEMessage* other);
  
  // implements Message ----------------------------------------------
  
  CreatePEMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreatePEMessage& from);
  void MergeFrom(const CreatePEMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .dstream.AppID app_id = 1;
  inline bool has_app_id() const;
  inline void clear_app_id();
  static const int kAppIdFieldNumber = 1;
  inline const ::dstream::AppID& app_id() const;
  inline ::dstream::AppID* mutable_app_id();
  inline ::dstream::AppID* release_app_id();
  
  // optional .dstream.PEID pe_id = 2;
  inline bool has_pe_id() const;
  inline void clear_pe_id();
  static const int kPeIdFieldNumber = 2;
  inline const ::dstream::PEID& pe_id() const;
  inline ::dstream::PEID* mutable_pe_id();
  inline ::dstream::PEID* release_pe_id();
  
  // optional .dstream.Processor processor = 3;
  inline bool has_processor() const;
  inline void clear_processor();
  static const int kProcessorFieldNumber = 3;
  inline const ::dstream::Processor& processor() const;
  inline ::dstream::Processor* mutable_processor();
  inline ::dstream::Processor* release_processor();
  
  // optional .dstream.BackupPEID backup_id = 4;
  inline bool has_backup_id() const;
  inline void clear_backup_id();
  static const int kBackupIdFieldNumber = 4;
  inline const ::dstream::BackupPEID& backup_id() const;
  inline ::dstream::BackupPEID* mutable_backup_id();
  inline ::dstream::BackupPEID* release_backup_id();
  
  // optional fixed64 last_assign_time = 5;
  inline bool has_last_assign_time() const;
  inline void clear_last_assign_time();
  static const int kLastAssignTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 last_assign_time() const;
  inline void set_last_assign_time(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:dstream.CreatePEMessage)
 private:
  inline void set_has_app_id();
  inline void clear_has_app_id();
  inline void set_has_pe_id();
  inline void clear_has_pe_id();
  inline void set_has_processor();
  inline void clear_has_processor();
  inline void set_has_backup_id();
  inline void clear_has_backup_id();
  inline void set_has_last_assign_time();
  inline void clear_has_last_assign_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::dstream::AppID* app_id_;
  ::dstream::PEID* pe_id_;
  ::dstream::Processor* processor_;
  ::dstream::BackupPEID* backup_id_;
  ::google::protobuf::uint64 last_assign_time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_pm_5fpn_5frpc_2eproto();
  friend void protobuf_AssignDesc_pm_5fpn_5frpc_2eproto();
  friend void protobuf_ShutdownFile_pm_5fpn_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static CreatePEMessage* default_instance_;
};
// -------------------------------------------------------------------

class CreatePEResult : public ::google::protobuf::Message {
 public:
  CreatePEResult();
  virtual ~CreatePEResult();
  
  CreatePEResult(const CreatePEResult& from);
  
  inline CreatePEResult& operator=(const CreatePEResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreatePEResult& default_instance();
  
  void Swap(CreatePEResult* other);
  
  // implements Message ----------------------------------------------
  
  CreatePEResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreatePEResult& from);
  void MergeFrom(const CreatePEResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .dstream.PNID id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::dstream::PNID& id() const;
  inline ::dstream::PNID* mutable_id();
  inline ::dstream::PNID* release_id();
  
  // optional .dstream.AppID app_id = 2;
  inline bool has_app_id() const;
  inline void clear_app_id();
  static const int kAppIdFieldNumber = 2;
  inline const ::dstream::AppID& app_id() const;
  inline ::dstream::AppID* mutable_app_id();
  inline ::dstream::AppID* release_app_id();
  
  // optional .dstream.PEID pe_id = 3;
  inline bool has_pe_id() const;
  inline void clear_pe_id();
  static const int kPeIdFieldNumber = 3;
  inline const ::dstream::PEID& pe_id() const;
  inline ::dstream::PEID* mutable_pe_id();
  inline ::dstream::PEID* release_pe_id();
  
  // optional .dstream.BackupPEID backup_id = 4;
  inline bool has_backup_id() const;
  inline void clear_backup_id();
  static const int kBackupIdFieldNumber = 4;
  inline const ::dstream::BackupPEID& backup_id() const;
  inline ::dstream::BackupPEID* mutable_backup_id();
  inline ::dstream::BackupPEID* release_backup_id();
  
  // optional int32 res = 5;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 5;
  inline ::google::protobuf::int32 res() const;
  inline void set_res(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:dstream.CreatePEResult)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_app_id();
  inline void clear_has_app_id();
  inline void set_has_pe_id();
  inline void clear_has_pe_id();
  inline void set_has_backup_id();
  inline void clear_has_backup_id();
  inline void set_has_res();
  inline void clear_has_res();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::dstream::PNID* id_;
  ::dstream::AppID* app_id_;
  ::dstream::PEID* pe_id_;
  ::dstream::BackupPEID* backup_id_;
  ::google::protobuf::int32 res_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_pm_5fpn_5frpc_2eproto();
  friend void protobuf_AssignDesc_pm_5fpn_5frpc_2eproto();
  friend void protobuf_ShutdownFile_pm_5fpn_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static CreatePEResult* default_instance_;
};
// -------------------------------------------------------------------

class PEOperationMessage : public ::google::protobuf::Message {
 public:
  PEOperationMessage();
  virtual ~PEOperationMessage();
  
  PEOperationMessage(const PEOperationMessage& from);
  
  inline PEOperationMessage& operator=(const PEOperationMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PEOperationMessage& default_instance();
  
  void Swap(PEOperationMessage* other);
  
  // implements Message ----------------------------------------------
  
  PEOperationMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PEOperationMessage& from);
  void MergeFrom(const PEOperationMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef PEOperationMessage_OperationType OperationType;
  static const OperationType KILL = PEOperationMessage_OperationType_KILL;
  static const OperationType SETPRIMARY = PEOperationMessage_OperationType_SETPRIMARY;
  static const OperationType QUERY = PEOperationMessage_OperationType_QUERY;
  static const OperationType RESTART = PEOperationMessage_OperationType_RESTART;
  static inline bool OperationType_IsValid(int value) {
    return PEOperationMessage_OperationType_IsValid(value);
  }
  static const OperationType OperationType_MIN =
    PEOperationMessage_OperationType_OperationType_MIN;
  static const OperationType OperationType_MAX =
    PEOperationMessage_OperationType_OperationType_MAX;
  static const int OperationType_ARRAYSIZE =
    PEOperationMessage_OperationType_OperationType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OperationType_descriptor() {
    return PEOperationMessage_OperationType_descriptor();
  }
  static inline const ::std::string& OperationType_Name(OperationType value) {
    return PEOperationMessage_OperationType_Name(value);
  }
  static inline bool OperationType_Parse(const ::std::string& name,
      OperationType* value) {
    return PEOperationMessage_OperationType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .dstream.PEOperationMessage.OperationType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::dstream::PEOperationMessage_OperationType type() const;
  inline void set_type(::dstream::PEOperationMessage_OperationType value);
  
  // optional .dstream.AppID app_id = 2;
  inline bool has_app_id() const;
  inline void clear_app_id();
  static const int kAppIdFieldNumber = 2;
  inline const ::dstream::AppID& app_id() const;
  inline ::dstream::AppID* mutable_app_id();
  inline ::dstream::AppID* release_app_id();
  
  // optional .dstream.PEID pe_id = 3;
  inline bool has_pe_id() const;
  inline void clear_pe_id();
  static const int kPeIdFieldNumber = 3;
  inline const ::dstream::PEID& pe_id() const;
  inline ::dstream::PEID* mutable_pe_id();
  inline ::dstream::PEID* release_pe_id();
  
  // optional .dstream.BackupPEID backup_pe_id = 4;
  inline bool has_backup_pe_id() const;
  inline void clear_backup_pe_id();
  static const int kBackupPeIdFieldNumber = 4;
  inline const ::dstream::BackupPEID& backup_pe_id() const;
  inline ::dstream::BackupPEID* mutable_backup_pe_id();
  inline ::dstream::BackupPEID* release_backup_pe_id();
  
  // optional uint32 revision = 5;
  inline bool has_revision() const;
  inline void clear_revision();
  static const int kRevisionFieldNumber = 5;
  inline ::google::protobuf::uint32 revision() const;
  inline void set_revision(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:dstream.PEOperationMessage)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_app_id();
  inline void clear_has_app_id();
  inline void set_has_pe_id();
  inline void clear_has_pe_id();
  inline void set_has_backup_pe_id();
  inline void clear_has_backup_pe_id();
  inline void set_has_revision();
  inline void clear_has_revision();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::dstream::AppID* app_id_;
  ::dstream::PEID* pe_id_;
  int type_;
  ::google::protobuf::uint32 revision_;
  ::dstream::BackupPEID* backup_pe_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_pm_5fpn_5frpc_2eproto();
  friend void protobuf_AssignDesc_pm_5fpn_5frpc_2eproto();
  friend void protobuf_ShutdownFile_pm_5fpn_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static PEOperationMessage* default_instance_;
};
// -------------------------------------------------------------------

class PEOperationResult : public ::google::protobuf::Message {
 public:
  PEOperationResult();
  virtual ~PEOperationResult();
  
  PEOperationResult(const PEOperationResult& from);
  
  inline PEOperationResult& operator=(const PEOperationResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PEOperationResult& default_instance();
  
  void Swap(PEOperationResult* other);
  
  // implements Message ----------------------------------------------
  
  PEOperationResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PEOperationResult& from);
  void MergeFrom(const PEOperationResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .dstream.PNID id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::dstream::PNID& id() const;
  inline ::dstream::PNID* mutable_id();
  inline ::dstream::PNID* release_id();
  
  // optional .dstream.AppID app_id = 2;
  inline bool has_app_id() const;
  inline void clear_app_id();
  static const int kAppIdFieldNumber = 2;
  inline const ::dstream::AppID& app_id() const;
  inline ::dstream::AppID* mutable_app_id();
  inline ::dstream::AppID* release_app_id();
  
  // optional .dstream.PEID pe_id = 3;
  inline bool has_pe_id() const;
  inline void clear_pe_id();
  static const int kPeIdFieldNumber = 3;
  inline const ::dstream::PEID& pe_id() const;
  inline ::dstream::PEID* mutable_pe_id();
  inline ::dstream::PEID* release_pe_id();
  
  // optional .dstream.BackupPEID backup_id = 4;
  inline bool has_backup_id() const;
  inline void clear_backup_id();
  static const int kBackupIdFieldNumber = 4;
  inline const ::dstream::BackupPEID& backup_id() const;
  inline ::dstream::BackupPEID* mutable_backup_id();
  inline ::dstream::BackupPEID* release_backup_id();
  
  // optional int32 res = 5;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 5;
  inline ::google::protobuf::int32 res() const;
  inline void set_res(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:dstream.PEOperationResult)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_app_id();
  inline void clear_has_app_id();
  inline void set_has_pe_id();
  inline void clear_has_pe_id();
  inline void set_has_backup_id();
  inline void clear_has_backup_id();
  inline void set_has_res();
  inline void clear_has_res();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::dstream::PNID* id_;
  ::dstream::AppID* app_id_;
  ::dstream::PEID* pe_id_;
  ::dstream::BackupPEID* backup_id_;
  ::google::protobuf::int32 res_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_pm_5fpn_5frpc_2eproto();
  friend void protobuf_AssignDesc_pm_5fpn_5frpc_2eproto();
  friend void protobuf_ShutdownFile_pm_5fpn_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static PEOperationResult* default_instance_;
};
// -------------------------------------------------------------------

class BackupPEStatus : public ::google::protobuf::Message {
 public:
  BackupPEStatus();
  virtual ~BackupPEStatus();
  
  BackupPEStatus(const BackupPEStatus& from);
  
  inline BackupPEStatus& operator=(const BackupPEStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BackupPEStatus& default_instance();
  
  void Swap(BackupPEStatus* other);
  
  // implements Message ----------------------------------------------
  
  BackupPEStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BackupPEStatus& from);
  void MergeFrom(const BackupPEStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .dstream.AppID app_id = 1;
  inline bool has_app_id() const;
  inline void clear_app_id();
  static const int kAppIdFieldNumber = 1;
  inline const ::dstream::AppID& app_id() const;
  inline ::dstream::AppID* mutable_app_id();
  inline ::dstream::AppID* release_app_id();
  
  // optional .dstream.PEID pe_id = 2;
  inline bool has_pe_id() const;
  inline void clear_pe_id();
  static const int kPeIdFieldNumber = 2;
  inline const ::dstream::PEID& pe_id() const;
  inline ::dstream::PEID* mutable_pe_id();
  inline ::dstream::PEID* release_pe_id();
  
  // optional .dstream.BackupPEID backup_pd_id = 3;
  inline bool has_backup_pd_id() const;
  inline void clear_backup_pd_id();
  static const int kBackupPdIdFieldNumber = 3;
  inline const ::dstream::BackupPEID& backup_pd_id() const;
  inline ::dstream::BackupPEID* mutable_backup_pd_id();
  inline ::dstream::BackupPEID* release_backup_pd_id();
  
  // optional float cpu_used = 4;
  inline bool has_cpu_used() const;
  inline void clear_cpu_used();
  static const int kCpuUsedFieldNumber = 4;
  inline float cpu_used() const;
  inline void set_cpu_used(float value);
  
  // optional uint32 memory_used = 5;
  inline bool has_memory_used() const;
  inline void clear_memory_used();
  static const int kMemoryUsedFieldNumber = 5;
  inline ::google::protobuf::uint32 memory_used() const;
  inline void set_memory_used(::google::protobuf::uint32 value);
  
  // optional uint32 network_used = 6;
  inline bool has_network_used() const;
  inline void clear_network_used();
  static const int kNetworkUsedFieldNumber = 6;
  inline ::google::protobuf::uint32 network_used() const;
  inline void set_network_used(::google::protobuf::uint32 value);
  
  // optional uint32 disk_used = 7;
  inline bool has_disk_used() const;
  inline void clear_disk_used();
  static const int kDiskUsedFieldNumber = 7;
  inline ::google::protobuf::uint32 disk_used() const;
  inline void set_disk_used(::google::protobuf::uint32 value);
  
  // optional uint64 tuples_processed = 8;
  inline bool has_tuples_processed() const;
  inline void clear_tuples_processed();
  static const int kTuplesProcessedFieldNumber = 8;
  inline ::google::protobuf::uint64 tuples_processed() const;
  inline void set_tuples_processed(::google::protobuf::uint64 value);
  
  // repeated string metric_name = 9;
  inline int metric_name_size() const;
  inline void clear_metric_name();
  static const int kMetricNameFieldNumber = 9;
  inline const ::std::string& metric_name(int index) const;
  inline ::std::string* mutable_metric_name(int index);
  inline void set_metric_name(int index, const ::std::string& value);
  inline void set_metric_name(int index, const char* value);
  inline void set_metric_name(int index, const char* value, size_t size);
  inline ::std::string* add_metric_name();
  inline void add_metric_name(const ::std::string& value);
  inline void add_metric_name(const char* value);
  inline void add_metric_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& metric_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_metric_name();
  
  // repeated string metric_value = 10;
  inline int metric_value_size() const;
  inline void clear_metric_value();
  static const int kMetricValueFieldNumber = 10;
  inline const ::std::string& metric_value(int index) const;
  inline ::std::string* mutable_metric_value(int index);
  inline void set_metric_value(int index, const ::std::string& value);
  inline void set_metric_value(int index, const char* value);
  inline void set_metric_value(int index, const char* value, size_t size);
  inline ::std::string* add_metric_value();
  inline void add_metric_value(const ::std::string& value);
  inline void add_metric_value(const char* value);
  inline void add_metric_value(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& metric_value() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_metric_value();
  
  // optional uint32 revision = 11;
  inline bool has_revision() const;
  inline void clear_revision();
  static const int kRevisionFieldNumber = 11;
  inline ::google::protobuf::uint32 revision() const;
  inline void set_revision(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:dstream.BackupPEStatus)
 private:
  inline void set_has_app_id();
  inline void clear_has_app_id();
  inline void set_has_pe_id();
  inline void clear_has_pe_id();
  inline void set_has_backup_pd_id();
  inline void clear_has_backup_pd_id();
  inline void set_has_cpu_used();
  inline void clear_has_cpu_used();
  inline void set_has_memory_used();
  inline void clear_has_memory_used();
  inline void set_has_network_used();
  inline void clear_has_network_used();
  inline void set_has_disk_used();
  inline void clear_has_disk_used();
  inline void set_has_tuples_processed();
  inline void clear_has_tuples_processed();
  inline void set_has_revision();
  inline void clear_has_revision();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::dstream::AppID* app_id_;
  ::dstream::PEID* pe_id_;
  ::dstream::BackupPEID* backup_pd_id_;
  float cpu_used_;
  ::google::protobuf::uint32 memory_used_;
  ::google::protobuf::uint32 network_used_;
  ::google::protobuf::uint32 disk_used_;
  ::google::protobuf::uint64 tuples_processed_;
  ::google::protobuf::RepeatedPtrField< ::std::string> metric_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> metric_value_;
  ::google::protobuf::uint32 revision_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  friend void  protobuf_AddDesc_pm_5fpn_5frpc_2eproto();
  friend void protobuf_AssignDesc_pm_5fpn_5frpc_2eproto();
  friend void protobuf_ShutdownFile_pm_5fpn_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static BackupPEStatus* default_instance_;
};
// -------------------------------------------------------------------

class FailPE : public ::google::protobuf::Message {
 public:
  FailPE();
  virtual ~FailPE();
  
  FailPE(const FailPE& from);
  
  inline FailPE& operator=(const FailPE& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FailPE& default_instance();
  
  void Swap(FailPE* other);
  
  // implements Message ----------------------------------------------
  
  FailPE* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FailPE& from);
  void MergeFrom(const FailPE& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .dstream.AppID app_id = 1;
  inline bool has_app_id() const;
  inline void clear_app_id();
  static const int kAppIdFieldNumber = 1;
  inline const ::dstream::AppID& app_id() const;
  inline ::dstream::AppID* mutable_app_id();
  inline ::dstream::AppID* release_app_id();
  
  // optional .dstream.PEID pe_id = 2;
  inline bool has_pe_id() const;
  inline void clear_pe_id();
  static const int kPeIdFieldNumber = 2;
  inline const ::dstream::PEID& pe_id() const;
  inline ::dstream::PEID* mutable_pe_id();
  inline ::dstream::PEID* release_pe_id();
  
  // optional .dstream.BackupPEID backup_pe_id = 3;
  inline bool has_backup_pe_id() const;
  inline void clear_backup_pe_id();
  static const int kBackupPeIdFieldNumber = 3;
  inline const ::dstream::BackupPEID& backup_pe_id() const;
  inline ::dstream::BackupPEID* mutable_backup_pe_id();
  inline ::dstream::BackupPEID* release_backup_pe_id();
  
  // optional uint32 revision = 4;
  inline bool has_revision() const;
  inline void clear_revision();
  static const int kRevisionFieldNumber = 4;
  inline ::google::protobuf::uint32 revision() const;
  inline void set_revision(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:dstream.FailPE)
 private:
  inline void set_has_app_id();
  inline void clear_has_app_id();
  inline void set_has_pe_id();
  inline void clear_has_pe_id();
  inline void set_has_backup_pe_id();
  inline void clear_has_backup_pe_id();
  inline void set_has_revision();
  inline void clear_has_revision();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::dstream::AppID* app_id_;
  ::dstream::PEID* pe_id_;
  ::dstream::BackupPEID* backup_pe_id_;
  ::google::protobuf::uint32 revision_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_pm_5fpn_5frpc_2eproto();
  friend void protobuf_AssignDesc_pm_5fpn_5frpc_2eproto();
  friend void protobuf_ShutdownFile_pm_5fpn_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static FailPE* default_instance_;
};
// -------------------------------------------------------------------

class TupleQueue : public ::google::protobuf::Message {
 public:
  TupleQueue();
  virtual ~TupleQueue();
  
  TupleQueue(const TupleQueue& from);
  
  inline TupleQueue& operator=(const TupleQueue& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TupleQueue& default_instance();
  
  void Swap(TupleQueue* other);
  
  // implements Message ----------------------------------------------
  
  TupleQueue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TupleQueue& from);
  void MergeFrom(const TupleQueue& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 queue_id = 1;
  inline bool has_queue_id() const;
  inline void clear_queue_id();
  static const int kQueueIdFieldNumber = 1;
  inline ::google::protobuf::uint32 queue_id() const;
  inline void set_queue_id(::google::protobuf::uint32 value);
  
  // optional .dstream.PEID pe_id = 2;
  inline bool has_pe_id() const;
  inline void clear_pe_id();
  static const int kPeIdFieldNumber = 2;
  inline const ::dstream::PEID& pe_id() const;
  inline ::dstream::PEID* mutable_pe_id();
  inline ::dstream::PEID* release_pe_id();
  
  // optional uint32 drop_tuples = 3;
  inline bool has_drop_tuples() const;
  inline void clear_drop_tuples();
  static const int kDropTuplesFieldNumber = 3;
  inline ::google::protobuf::uint32 drop_tuples() const;
  inline void set_drop_tuples(::google::protobuf::uint32 value);
  
  // optional uint32 buffer_tuples = 4;
  inline bool has_buffer_tuples() const;
  inline void clear_buffer_tuples();
  static const int kBufferTuplesFieldNumber = 4;
  inline ::google::protobuf::uint32 buffer_tuples() const;
  inline void set_buffer_tuples(::google::protobuf::uint32 value);
  
  // optional uint32 memory_used = 5;
  inline bool has_memory_used() const;
  inline void clear_memory_used();
  static const int kMemoryUsedFieldNumber = 5;
  inline ::google::protobuf::uint32 memory_used() const;
  inline void set_memory_used(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:dstream.TupleQueue)
 private:
  inline void set_has_queue_id();
  inline void clear_has_queue_id();
  inline void set_has_pe_id();
  inline void clear_has_pe_id();
  inline void set_has_drop_tuples();
  inline void clear_has_drop_tuples();
  inline void set_has_buffer_tuples();
  inline void clear_has_buffer_tuples();
  inline void set_has_memory_used();
  inline void clear_has_memory_used();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::dstream::PEID* pe_id_;
  ::google::protobuf::uint32 queue_id_;
  ::google::protobuf::uint32 drop_tuples_;
  ::google::protobuf::uint32 buffer_tuples_;
  ::google::protobuf::uint32 memory_used_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_pm_5fpn_5frpc_2eproto();
  friend void protobuf_AssignDesc_pm_5fpn_5frpc_2eproto();
  friend void protobuf_ShutdownFile_pm_5fpn_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static TupleQueue* default_instance_;
};
// -------------------------------------------------------------------

class PNReport : public ::google::protobuf::Message {
 public:
  PNReport();
  virtual ~PNReport();
  
  PNReport(const PNReport& from);
  
  inline PNReport& operator=(const PNReport& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PNReport& default_instance();
  
  void Swap(PNReport* other);
  
  // implements Message ----------------------------------------------
  
  PNReport* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PNReport& from);
  void MergeFrom(const PNReport& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .dstream.PNID id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::dstream::PNID& id() const;
  inline ::dstream::PNID* mutable_id();
  inline ::dstream::PNID* release_id();
  
  // optional .dstream.PNResourceStatus resource = 2;
  inline bool has_resource() const;
  inline void clear_resource();
  static const int kResourceFieldNumber = 2;
  inline const ::dstream::PNResourceStatus& resource() const;
  inline ::dstream::PNResourceStatus* mutable_resource();
  inline ::dstream::PNResourceStatus* release_resource();
  
  // repeated .dstream.BackupPEStatus status = 3;
  inline int status_size() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline const ::dstream::BackupPEStatus& status(int index) const;
  inline ::dstream::BackupPEStatus* mutable_status(int index);
  inline ::dstream::BackupPEStatus* add_status();
  inline const ::google::protobuf::RepeatedPtrField< ::dstream::BackupPEStatus >&
      status() const;
  inline ::google::protobuf::RepeatedPtrField< ::dstream::BackupPEStatus >*
      mutable_status();
  
  // repeated .dstream.FailPE fails = 4;
  inline int fails_size() const;
  inline void clear_fails();
  static const int kFailsFieldNumber = 4;
  inline const ::dstream::FailPE& fails(int index) const;
  inline ::dstream::FailPE* mutable_fails(int index);
  inline ::dstream::FailPE* add_fails();
  inline const ::google::protobuf::RepeatedPtrField< ::dstream::FailPE >&
      fails() const;
  inline ::google::protobuf::RepeatedPtrField< ::dstream::FailPE >*
      mutable_fails();
  
  // repeated .dstream.TupleQueue queues = 5;
  inline int queues_size() const;
  inline void clear_queues();
  static const int kQueuesFieldNumber = 5;
  inline const ::dstream::TupleQueue& queues(int index) const;
  inline ::dstream::TupleQueue* mutable_queues(int index);
  inline ::dstream::TupleQueue* add_queues();
  inline const ::google::protobuf::RepeatedPtrField< ::dstream::TupleQueue >&
      queues() const;
  inline ::google::protobuf::RepeatedPtrField< ::dstream::TupleQueue >*
      mutable_queues();
  
  // @@protoc_insertion_point(class_scope:dstream.PNReport)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_resource();
  inline void clear_has_resource();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::dstream::PNID* id_;
  ::dstream::PNResourceStatus* resource_;
  ::google::protobuf::RepeatedPtrField< ::dstream::BackupPEStatus > status_;
  ::google::protobuf::RepeatedPtrField< ::dstream::FailPE > fails_;
  ::google::protobuf::RepeatedPtrField< ::dstream::TupleQueue > queues_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_pm_5fpn_5frpc_2eproto();
  friend void protobuf_AssignDesc_pm_5fpn_5frpc_2eproto();
  friend void protobuf_ShutdownFile_pm_5fpn_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static PNReport* default_instance_;
};
// -------------------------------------------------------------------

class ReportResponse : public ::google::protobuf::Message {
 public:
  ReportResponse();
  virtual ~ReportResponse();
  
  ReportResponse(const ReportResponse& from);
  
  inline ReportResponse& operator=(const ReportResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportResponse& default_instance();
  
  void Swap(ReportResponse* other);
  
  // implements Message ----------------------------------------------
  
  ReportResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportResponse& from);
  void MergeFrom(const ReportResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional fixed32 next_report_interval = 1;
  inline bool has_next_report_interval() const;
  inline void clear_next_report_interval();
  static const int kNextReportIntervalFieldNumber = 1;
  inline ::google::protobuf::uint32 next_report_interval() const;
  inline void set_next_report_interval(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:dstream.ReportResponse)
 private:
  inline void set_has_next_report_interval();
  inline void clear_has_next_report_interval();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 next_report_interval_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_pm_5fpn_5frpc_2eproto();
  friend void protobuf_AssignDesc_pm_5fpn_5frpc_2eproto();
  friend void protobuf_ShutdownFile_pm_5fpn_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static ReportResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// CreatePEMessage

// optional .dstream.AppID app_id = 1;
inline bool CreatePEMessage::has_app_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreatePEMessage::set_has_app_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreatePEMessage::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreatePEMessage::clear_app_id() {
  if (app_id_ != NULL) app_id_->::dstream::AppID::Clear();
  clear_has_app_id();
}
inline const ::dstream::AppID& CreatePEMessage::app_id() const {
  return app_id_ != NULL ? *app_id_ : *default_instance_->app_id_;
}
inline ::dstream::AppID* CreatePEMessage::mutable_app_id() {
  set_has_app_id();
  if (app_id_ == NULL) app_id_ = new ::dstream::AppID;
  return app_id_;
}
inline ::dstream::AppID* CreatePEMessage::release_app_id() {
  clear_has_app_id();
  ::dstream::AppID* temp = app_id_;
  app_id_ = NULL;
  return temp;
}

// optional .dstream.PEID pe_id = 2;
inline bool CreatePEMessage::has_pe_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreatePEMessage::set_has_pe_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreatePEMessage::clear_has_pe_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreatePEMessage::clear_pe_id() {
  if (pe_id_ != NULL) pe_id_->::dstream::PEID::Clear();
  clear_has_pe_id();
}
inline const ::dstream::PEID& CreatePEMessage::pe_id() const {
  return pe_id_ != NULL ? *pe_id_ : *default_instance_->pe_id_;
}
inline ::dstream::PEID* CreatePEMessage::mutable_pe_id() {
  set_has_pe_id();
  if (pe_id_ == NULL) pe_id_ = new ::dstream::PEID;
  return pe_id_;
}
inline ::dstream::PEID* CreatePEMessage::release_pe_id() {
  clear_has_pe_id();
  ::dstream::PEID* temp = pe_id_;
  pe_id_ = NULL;
  return temp;
}

// optional .dstream.Processor processor = 3;
inline bool CreatePEMessage::has_processor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreatePEMessage::set_has_processor() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreatePEMessage::clear_has_processor() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreatePEMessage::clear_processor() {
  if (processor_ != NULL) processor_->::dstream::Processor::Clear();
  clear_has_processor();
}
inline const ::dstream::Processor& CreatePEMessage::processor() const {
  return processor_ != NULL ? *processor_ : *default_instance_->processor_;
}
inline ::dstream::Processor* CreatePEMessage::mutable_processor() {
  set_has_processor();
  if (processor_ == NULL) processor_ = new ::dstream::Processor;
  return processor_;
}
inline ::dstream::Processor* CreatePEMessage::release_processor() {
  clear_has_processor();
  ::dstream::Processor* temp = processor_;
  processor_ = NULL;
  return temp;
}

// optional .dstream.BackupPEID backup_id = 4;
inline bool CreatePEMessage::has_backup_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CreatePEMessage::set_has_backup_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CreatePEMessage::clear_has_backup_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CreatePEMessage::clear_backup_id() {
  if (backup_id_ != NULL) backup_id_->::dstream::BackupPEID::Clear();
  clear_has_backup_id();
}
inline const ::dstream::BackupPEID& CreatePEMessage::backup_id() const {
  return backup_id_ != NULL ? *backup_id_ : *default_instance_->backup_id_;
}
inline ::dstream::BackupPEID* CreatePEMessage::mutable_backup_id() {
  set_has_backup_id();
  if (backup_id_ == NULL) backup_id_ = new ::dstream::BackupPEID;
  return backup_id_;
}
inline ::dstream::BackupPEID* CreatePEMessage::release_backup_id() {
  clear_has_backup_id();
  ::dstream::BackupPEID* temp = backup_id_;
  backup_id_ = NULL;
  return temp;
}

// optional fixed64 last_assign_time = 5;
inline bool CreatePEMessage::has_last_assign_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CreatePEMessage::set_has_last_assign_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CreatePEMessage::clear_has_last_assign_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CreatePEMessage::clear_last_assign_time() {
  last_assign_time_ = GOOGLE_ULONGLONG(0);
  clear_has_last_assign_time();
}
inline ::google::protobuf::uint64 CreatePEMessage::last_assign_time() const {
  return last_assign_time_;
}
inline void CreatePEMessage::set_last_assign_time(::google::protobuf::uint64 value) {
  set_has_last_assign_time();
  last_assign_time_ = value;
}

// -------------------------------------------------------------------

// CreatePEResult

// optional .dstream.PNID id = 1;
inline bool CreatePEResult::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreatePEResult::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreatePEResult::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreatePEResult::clear_id() {
  if (id_ != NULL) id_->::dstream::PNID::Clear();
  clear_has_id();
}
inline const ::dstream::PNID& CreatePEResult::id() const {
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::dstream::PNID* CreatePEResult::mutable_id() {
  set_has_id();
  if (id_ == NULL) id_ = new ::dstream::PNID;
  return id_;
}
inline ::dstream::PNID* CreatePEResult::release_id() {
  clear_has_id();
  ::dstream::PNID* temp = id_;
  id_ = NULL;
  return temp;
}

// optional .dstream.AppID app_id = 2;
inline bool CreatePEResult::has_app_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreatePEResult::set_has_app_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreatePEResult::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreatePEResult::clear_app_id() {
  if (app_id_ != NULL) app_id_->::dstream::AppID::Clear();
  clear_has_app_id();
}
inline const ::dstream::AppID& CreatePEResult::app_id() const {
  return app_id_ != NULL ? *app_id_ : *default_instance_->app_id_;
}
inline ::dstream::AppID* CreatePEResult::mutable_app_id() {
  set_has_app_id();
  if (app_id_ == NULL) app_id_ = new ::dstream::AppID;
  return app_id_;
}
inline ::dstream::AppID* CreatePEResult::release_app_id() {
  clear_has_app_id();
  ::dstream::AppID* temp = app_id_;
  app_id_ = NULL;
  return temp;
}

// optional .dstream.PEID pe_id = 3;
inline bool CreatePEResult::has_pe_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreatePEResult::set_has_pe_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreatePEResult::clear_has_pe_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreatePEResult::clear_pe_id() {
  if (pe_id_ != NULL) pe_id_->::dstream::PEID::Clear();
  clear_has_pe_id();
}
inline const ::dstream::PEID& CreatePEResult::pe_id() const {
  return pe_id_ != NULL ? *pe_id_ : *default_instance_->pe_id_;
}
inline ::dstream::PEID* CreatePEResult::mutable_pe_id() {
  set_has_pe_id();
  if (pe_id_ == NULL) pe_id_ = new ::dstream::PEID;
  return pe_id_;
}
inline ::dstream::PEID* CreatePEResult::release_pe_id() {
  clear_has_pe_id();
  ::dstream::PEID* temp = pe_id_;
  pe_id_ = NULL;
  return temp;
}

// optional .dstream.BackupPEID backup_id = 4;
inline bool CreatePEResult::has_backup_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CreatePEResult::set_has_backup_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CreatePEResult::clear_has_backup_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CreatePEResult::clear_backup_id() {
  if (backup_id_ != NULL) backup_id_->::dstream::BackupPEID::Clear();
  clear_has_backup_id();
}
inline const ::dstream::BackupPEID& CreatePEResult::backup_id() const {
  return backup_id_ != NULL ? *backup_id_ : *default_instance_->backup_id_;
}
inline ::dstream::BackupPEID* CreatePEResult::mutable_backup_id() {
  set_has_backup_id();
  if (backup_id_ == NULL) backup_id_ = new ::dstream::BackupPEID;
  return backup_id_;
}
inline ::dstream::BackupPEID* CreatePEResult::release_backup_id() {
  clear_has_backup_id();
  ::dstream::BackupPEID* temp = backup_id_;
  backup_id_ = NULL;
  return temp;
}

// optional int32 res = 5;
inline bool CreatePEResult::has_res() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CreatePEResult::set_has_res() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CreatePEResult::clear_has_res() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CreatePEResult::clear_res() {
  res_ = 0;
  clear_has_res();
}
inline ::google::protobuf::int32 CreatePEResult::res() const {
  return res_;
}
inline void CreatePEResult::set_res(::google::protobuf::int32 value) {
  set_has_res();
  res_ = value;
}

// -------------------------------------------------------------------

// PEOperationMessage

// optional .dstream.PEOperationMessage.OperationType type = 1;
inline bool PEOperationMessage::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PEOperationMessage::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PEOperationMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PEOperationMessage::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::dstream::PEOperationMessage_OperationType PEOperationMessage::type() const {
  return static_cast< ::dstream::PEOperationMessage_OperationType >(type_);
}
inline void PEOperationMessage::set_type(::dstream::PEOperationMessage_OperationType value) {
  GOOGLE_DCHECK(::dstream::PEOperationMessage_OperationType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .dstream.AppID app_id = 2;
inline bool PEOperationMessage::has_app_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PEOperationMessage::set_has_app_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PEOperationMessage::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PEOperationMessage::clear_app_id() {
  if (app_id_ != NULL) app_id_->::dstream::AppID::Clear();
  clear_has_app_id();
}
inline const ::dstream::AppID& PEOperationMessage::app_id() const {
  return app_id_ != NULL ? *app_id_ : *default_instance_->app_id_;
}
inline ::dstream::AppID* PEOperationMessage::mutable_app_id() {
  set_has_app_id();
  if (app_id_ == NULL) app_id_ = new ::dstream::AppID;
  return app_id_;
}
inline ::dstream::AppID* PEOperationMessage::release_app_id() {
  clear_has_app_id();
  ::dstream::AppID* temp = app_id_;
  app_id_ = NULL;
  return temp;
}

// optional .dstream.PEID pe_id = 3;
inline bool PEOperationMessage::has_pe_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PEOperationMessage::set_has_pe_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PEOperationMessage::clear_has_pe_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PEOperationMessage::clear_pe_id() {
  if (pe_id_ != NULL) pe_id_->::dstream::PEID::Clear();
  clear_has_pe_id();
}
inline const ::dstream::PEID& PEOperationMessage::pe_id() const {
  return pe_id_ != NULL ? *pe_id_ : *default_instance_->pe_id_;
}
inline ::dstream::PEID* PEOperationMessage::mutable_pe_id() {
  set_has_pe_id();
  if (pe_id_ == NULL) pe_id_ = new ::dstream::PEID;
  return pe_id_;
}
inline ::dstream::PEID* PEOperationMessage::release_pe_id() {
  clear_has_pe_id();
  ::dstream::PEID* temp = pe_id_;
  pe_id_ = NULL;
  return temp;
}

// optional .dstream.BackupPEID backup_pe_id = 4;
inline bool PEOperationMessage::has_backup_pe_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PEOperationMessage::set_has_backup_pe_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PEOperationMessage::clear_has_backup_pe_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PEOperationMessage::clear_backup_pe_id() {
  if (backup_pe_id_ != NULL) backup_pe_id_->::dstream::BackupPEID::Clear();
  clear_has_backup_pe_id();
}
inline const ::dstream::BackupPEID& PEOperationMessage::backup_pe_id() const {
  return backup_pe_id_ != NULL ? *backup_pe_id_ : *default_instance_->backup_pe_id_;
}
inline ::dstream::BackupPEID* PEOperationMessage::mutable_backup_pe_id() {
  set_has_backup_pe_id();
  if (backup_pe_id_ == NULL) backup_pe_id_ = new ::dstream::BackupPEID;
  return backup_pe_id_;
}
inline ::dstream::BackupPEID* PEOperationMessage::release_backup_pe_id() {
  clear_has_backup_pe_id();
  ::dstream::BackupPEID* temp = backup_pe_id_;
  backup_pe_id_ = NULL;
  return temp;
}

// optional uint32 revision = 5;
inline bool PEOperationMessage::has_revision() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PEOperationMessage::set_has_revision() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PEOperationMessage::clear_has_revision() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PEOperationMessage::clear_revision() {
  revision_ = 0u;
  clear_has_revision();
}
inline ::google::protobuf::uint32 PEOperationMessage::revision() const {
  return revision_;
}
inline void PEOperationMessage::set_revision(::google::protobuf::uint32 value) {
  set_has_revision();
  revision_ = value;
}

// -------------------------------------------------------------------

// PEOperationResult

// optional .dstream.PNID id = 1;
inline bool PEOperationResult::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PEOperationResult::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PEOperationResult::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PEOperationResult::clear_id() {
  if (id_ != NULL) id_->::dstream::PNID::Clear();
  clear_has_id();
}
inline const ::dstream::PNID& PEOperationResult::id() const {
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::dstream::PNID* PEOperationResult::mutable_id() {
  set_has_id();
  if (id_ == NULL) id_ = new ::dstream::PNID;
  return id_;
}
inline ::dstream::PNID* PEOperationResult::release_id() {
  clear_has_id();
  ::dstream::PNID* temp = id_;
  id_ = NULL;
  return temp;
}

// optional .dstream.AppID app_id = 2;
inline bool PEOperationResult::has_app_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PEOperationResult::set_has_app_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PEOperationResult::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PEOperationResult::clear_app_id() {
  if (app_id_ != NULL) app_id_->::dstream::AppID::Clear();
  clear_has_app_id();
}
inline const ::dstream::AppID& PEOperationResult::app_id() const {
  return app_id_ != NULL ? *app_id_ : *default_instance_->app_id_;
}
inline ::dstream::AppID* PEOperationResult::mutable_app_id() {
  set_has_app_id();
  if (app_id_ == NULL) app_id_ = new ::dstream::AppID;
  return app_id_;
}
inline ::dstream::AppID* PEOperationResult::release_app_id() {
  clear_has_app_id();
  ::dstream::AppID* temp = app_id_;
  app_id_ = NULL;
  return temp;
}

// optional .dstream.PEID pe_id = 3;
inline bool PEOperationResult::has_pe_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PEOperationResult::set_has_pe_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PEOperationResult::clear_has_pe_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PEOperationResult::clear_pe_id() {
  if (pe_id_ != NULL) pe_id_->::dstream::PEID::Clear();
  clear_has_pe_id();
}
inline const ::dstream::PEID& PEOperationResult::pe_id() const {
  return pe_id_ != NULL ? *pe_id_ : *default_instance_->pe_id_;
}
inline ::dstream::PEID* PEOperationResult::mutable_pe_id() {
  set_has_pe_id();
  if (pe_id_ == NULL) pe_id_ = new ::dstream::PEID;
  return pe_id_;
}
inline ::dstream::PEID* PEOperationResult::release_pe_id() {
  clear_has_pe_id();
  ::dstream::PEID* temp = pe_id_;
  pe_id_ = NULL;
  return temp;
}

// optional .dstream.BackupPEID backup_id = 4;
inline bool PEOperationResult::has_backup_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PEOperationResult::set_has_backup_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PEOperationResult::clear_has_backup_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PEOperationResult::clear_backup_id() {
  if (backup_id_ != NULL) backup_id_->::dstream::BackupPEID::Clear();
  clear_has_backup_id();
}
inline const ::dstream::BackupPEID& PEOperationResult::backup_id() const {
  return backup_id_ != NULL ? *backup_id_ : *default_instance_->backup_id_;
}
inline ::dstream::BackupPEID* PEOperationResult::mutable_backup_id() {
  set_has_backup_id();
  if (backup_id_ == NULL) backup_id_ = new ::dstream::BackupPEID;
  return backup_id_;
}
inline ::dstream::BackupPEID* PEOperationResult::release_backup_id() {
  clear_has_backup_id();
  ::dstream::BackupPEID* temp = backup_id_;
  backup_id_ = NULL;
  return temp;
}

// optional int32 res = 5;
inline bool PEOperationResult::has_res() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PEOperationResult::set_has_res() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PEOperationResult::clear_has_res() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PEOperationResult::clear_res() {
  res_ = 0;
  clear_has_res();
}
inline ::google::protobuf::int32 PEOperationResult::res() const {
  return res_;
}
inline void PEOperationResult::set_res(::google::protobuf::int32 value) {
  set_has_res();
  res_ = value;
}

// -------------------------------------------------------------------

// BackupPEStatus

// optional .dstream.AppID app_id = 1;
inline bool BackupPEStatus::has_app_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackupPEStatus::set_has_app_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BackupPEStatus::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BackupPEStatus::clear_app_id() {
  if (app_id_ != NULL) app_id_->::dstream::AppID::Clear();
  clear_has_app_id();
}
inline const ::dstream::AppID& BackupPEStatus::app_id() const {
  return app_id_ != NULL ? *app_id_ : *default_instance_->app_id_;
}
inline ::dstream::AppID* BackupPEStatus::mutable_app_id() {
  set_has_app_id();
  if (app_id_ == NULL) app_id_ = new ::dstream::AppID;
  return app_id_;
}
inline ::dstream::AppID* BackupPEStatus::release_app_id() {
  clear_has_app_id();
  ::dstream::AppID* temp = app_id_;
  app_id_ = NULL;
  return temp;
}

// optional .dstream.PEID pe_id = 2;
inline bool BackupPEStatus::has_pe_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BackupPEStatus::set_has_pe_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BackupPEStatus::clear_has_pe_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BackupPEStatus::clear_pe_id() {
  if (pe_id_ != NULL) pe_id_->::dstream::PEID::Clear();
  clear_has_pe_id();
}
inline const ::dstream::PEID& BackupPEStatus::pe_id() const {
  return pe_id_ != NULL ? *pe_id_ : *default_instance_->pe_id_;
}
inline ::dstream::PEID* BackupPEStatus::mutable_pe_id() {
  set_has_pe_id();
  if (pe_id_ == NULL) pe_id_ = new ::dstream::PEID;
  return pe_id_;
}
inline ::dstream::PEID* BackupPEStatus::release_pe_id() {
  clear_has_pe_id();
  ::dstream::PEID* temp = pe_id_;
  pe_id_ = NULL;
  return temp;
}

// optional .dstream.BackupPEID backup_pd_id = 3;
inline bool BackupPEStatus::has_backup_pd_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BackupPEStatus::set_has_backup_pd_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BackupPEStatus::clear_has_backup_pd_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BackupPEStatus::clear_backup_pd_id() {
  if (backup_pd_id_ != NULL) backup_pd_id_->::dstream::BackupPEID::Clear();
  clear_has_backup_pd_id();
}
inline const ::dstream::BackupPEID& BackupPEStatus::backup_pd_id() const {
  return backup_pd_id_ != NULL ? *backup_pd_id_ : *default_instance_->backup_pd_id_;
}
inline ::dstream::BackupPEID* BackupPEStatus::mutable_backup_pd_id() {
  set_has_backup_pd_id();
  if (backup_pd_id_ == NULL) backup_pd_id_ = new ::dstream::BackupPEID;
  return backup_pd_id_;
}
inline ::dstream::BackupPEID* BackupPEStatus::release_backup_pd_id() {
  clear_has_backup_pd_id();
  ::dstream::BackupPEID* temp = backup_pd_id_;
  backup_pd_id_ = NULL;
  return temp;
}

// optional float cpu_used = 4;
inline bool BackupPEStatus::has_cpu_used() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BackupPEStatus::set_has_cpu_used() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BackupPEStatus::clear_has_cpu_used() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BackupPEStatus::clear_cpu_used() {
  cpu_used_ = 0;
  clear_has_cpu_used();
}
inline float BackupPEStatus::cpu_used() const {
  return cpu_used_;
}
inline void BackupPEStatus::set_cpu_used(float value) {
  set_has_cpu_used();
  cpu_used_ = value;
}

// optional uint32 memory_used = 5;
inline bool BackupPEStatus::has_memory_used() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BackupPEStatus::set_has_memory_used() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BackupPEStatus::clear_has_memory_used() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BackupPEStatus::clear_memory_used() {
  memory_used_ = 0u;
  clear_has_memory_used();
}
inline ::google::protobuf::uint32 BackupPEStatus::memory_used() const {
  return memory_used_;
}
inline void BackupPEStatus::set_memory_used(::google::protobuf::uint32 value) {
  set_has_memory_used();
  memory_used_ = value;
}

// optional uint32 network_used = 6;
inline bool BackupPEStatus::has_network_used() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BackupPEStatus::set_has_network_used() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BackupPEStatus::clear_has_network_used() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BackupPEStatus::clear_network_used() {
  network_used_ = 0u;
  clear_has_network_used();
}
inline ::google::protobuf::uint32 BackupPEStatus::network_used() const {
  return network_used_;
}
inline void BackupPEStatus::set_network_used(::google::protobuf::uint32 value) {
  set_has_network_used();
  network_used_ = value;
}

// optional uint32 disk_used = 7;
inline bool BackupPEStatus::has_disk_used() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BackupPEStatus::set_has_disk_used() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BackupPEStatus::clear_has_disk_used() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BackupPEStatus::clear_disk_used() {
  disk_used_ = 0u;
  clear_has_disk_used();
}
inline ::google::protobuf::uint32 BackupPEStatus::disk_used() const {
  return disk_used_;
}
inline void BackupPEStatus::set_disk_used(::google::protobuf::uint32 value) {
  set_has_disk_used();
  disk_used_ = value;
}

// optional uint64 tuples_processed = 8;
inline bool BackupPEStatus::has_tuples_processed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BackupPEStatus::set_has_tuples_processed() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BackupPEStatus::clear_has_tuples_processed() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BackupPEStatus::clear_tuples_processed() {
  tuples_processed_ = GOOGLE_ULONGLONG(0);
  clear_has_tuples_processed();
}
inline ::google::protobuf::uint64 BackupPEStatus::tuples_processed() const {
  return tuples_processed_;
}
inline void BackupPEStatus::set_tuples_processed(::google::protobuf::uint64 value) {
  set_has_tuples_processed();
  tuples_processed_ = value;
}

// repeated string metric_name = 9;
inline int BackupPEStatus::metric_name_size() const {
  return metric_name_.size();
}
inline void BackupPEStatus::clear_metric_name() {
  metric_name_.Clear();
}
inline const ::std::string& BackupPEStatus::metric_name(int index) const {
  return metric_name_.Get(index);
}
inline ::std::string* BackupPEStatus::mutable_metric_name(int index) {
  return metric_name_.Mutable(index);
}
inline void BackupPEStatus::set_metric_name(int index, const ::std::string& value) {
  metric_name_.Mutable(index)->assign(value);
}
inline void BackupPEStatus::set_metric_name(int index, const char* value) {
  metric_name_.Mutable(index)->assign(value);
}
inline void BackupPEStatus::set_metric_name(int index, const char* value, size_t size) {
  metric_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BackupPEStatus::add_metric_name() {
  return metric_name_.Add();
}
inline void BackupPEStatus::add_metric_name(const ::std::string& value) {
  metric_name_.Add()->assign(value);
}
inline void BackupPEStatus::add_metric_name(const char* value) {
  metric_name_.Add()->assign(value);
}
inline void BackupPEStatus::add_metric_name(const char* value, size_t size) {
  metric_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BackupPEStatus::metric_name() const {
  return metric_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BackupPEStatus::mutable_metric_name() {
  return &metric_name_;
}

// repeated string metric_value = 10;
inline int BackupPEStatus::metric_value_size() const {
  return metric_value_.size();
}
inline void BackupPEStatus::clear_metric_value() {
  metric_value_.Clear();
}
inline const ::std::string& BackupPEStatus::metric_value(int index) const {
  return metric_value_.Get(index);
}
inline ::std::string* BackupPEStatus::mutable_metric_value(int index) {
  return metric_value_.Mutable(index);
}
inline void BackupPEStatus::set_metric_value(int index, const ::std::string& value) {
  metric_value_.Mutable(index)->assign(value);
}
inline void BackupPEStatus::set_metric_value(int index, const char* value) {
  metric_value_.Mutable(index)->assign(value);
}
inline void BackupPEStatus::set_metric_value(int index, const char* value, size_t size) {
  metric_value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BackupPEStatus::add_metric_value() {
  return metric_value_.Add();
}
inline void BackupPEStatus::add_metric_value(const ::std::string& value) {
  metric_value_.Add()->assign(value);
}
inline void BackupPEStatus::add_metric_value(const char* value) {
  metric_value_.Add()->assign(value);
}
inline void BackupPEStatus::add_metric_value(const char* value, size_t size) {
  metric_value_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BackupPEStatus::metric_value() const {
  return metric_value_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BackupPEStatus::mutable_metric_value() {
  return &metric_value_;
}

// optional uint32 revision = 11;
inline bool BackupPEStatus::has_revision() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BackupPEStatus::set_has_revision() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BackupPEStatus::clear_has_revision() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BackupPEStatus::clear_revision() {
  revision_ = 0u;
  clear_has_revision();
}
inline ::google::protobuf::uint32 BackupPEStatus::revision() const {
  return revision_;
}
inline void BackupPEStatus::set_revision(::google::protobuf::uint32 value) {
  set_has_revision();
  revision_ = value;
}

// -------------------------------------------------------------------

// FailPE

// optional .dstream.AppID app_id = 1;
inline bool FailPE::has_app_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FailPE::set_has_app_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FailPE::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FailPE::clear_app_id() {
  if (app_id_ != NULL) app_id_->::dstream::AppID::Clear();
  clear_has_app_id();
}
inline const ::dstream::AppID& FailPE::app_id() const {
  return app_id_ != NULL ? *app_id_ : *default_instance_->app_id_;
}
inline ::dstream::AppID* FailPE::mutable_app_id() {
  set_has_app_id();
  if (app_id_ == NULL) app_id_ = new ::dstream::AppID;
  return app_id_;
}
inline ::dstream::AppID* FailPE::release_app_id() {
  clear_has_app_id();
  ::dstream::AppID* temp = app_id_;
  app_id_ = NULL;
  return temp;
}

// optional .dstream.PEID pe_id = 2;
inline bool FailPE::has_pe_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FailPE::set_has_pe_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FailPE::clear_has_pe_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FailPE::clear_pe_id() {
  if (pe_id_ != NULL) pe_id_->::dstream::PEID::Clear();
  clear_has_pe_id();
}
inline const ::dstream::PEID& FailPE::pe_id() const {
  return pe_id_ != NULL ? *pe_id_ : *default_instance_->pe_id_;
}
inline ::dstream::PEID* FailPE::mutable_pe_id() {
  set_has_pe_id();
  if (pe_id_ == NULL) pe_id_ = new ::dstream::PEID;
  return pe_id_;
}
inline ::dstream::PEID* FailPE::release_pe_id() {
  clear_has_pe_id();
  ::dstream::PEID* temp = pe_id_;
  pe_id_ = NULL;
  return temp;
}

// optional .dstream.BackupPEID backup_pe_id = 3;
inline bool FailPE::has_backup_pe_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FailPE::set_has_backup_pe_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FailPE::clear_has_backup_pe_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FailPE::clear_backup_pe_id() {
  if (backup_pe_id_ != NULL) backup_pe_id_->::dstream::BackupPEID::Clear();
  clear_has_backup_pe_id();
}
inline const ::dstream::BackupPEID& FailPE::backup_pe_id() const {
  return backup_pe_id_ != NULL ? *backup_pe_id_ : *default_instance_->backup_pe_id_;
}
inline ::dstream::BackupPEID* FailPE::mutable_backup_pe_id() {
  set_has_backup_pe_id();
  if (backup_pe_id_ == NULL) backup_pe_id_ = new ::dstream::BackupPEID;
  return backup_pe_id_;
}
inline ::dstream::BackupPEID* FailPE::release_backup_pe_id() {
  clear_has_backup_pe_id();
  ::dstream::BackupPEID* temp = backup_pe_id_;
  backup_pe_id_ = NULL;
  return temp;
}

// optional uint32 revision = 4;
inline bool FailPE::has_revision() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FailPE::set_has_revision() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FailPE::clear_has_revision() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FailPE::clear_revision() {
  revision_ = 0u;
  clear_has_revision();
}
inline ::google::protobuf::uint32 FailPE::revision() const {
  return revision_;
}
inline void FailPE::set_revision(::google::protobuf::uint32 value) {
  set_has_revision();
  revision_ = value;
}

// -------------------------------------------------------------------

// TupleQueue

// optional uint32 queue_id = 1;
inline bool TupleQueue::has_queue_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TupleQueue::set_has_queue_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TupleQueue::clear_has_queue_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TupleQueue::clear_queue_id() {
  queue_id_ = 0u;
  clear_has_queue_id();
}
inline ::google::protobuf::uint32 TupleQueue::queue_id() const {
  return queue_id_;
}
inline void TupleQueue::set_queue_id(::google::protobuf::uint32 value) {
  set_has_queue_id();
  queue_id_ = value;
}

// optional .dstream.PEID pe_id = 2;
inline bool TupleQueue::has_pe_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TupleQueue::set_has_pe_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TupleQueue::clear_has_pe_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TupleQueue::clear_pe_id() {
  if (pe_id_ != NULL) pe_id_->::dstream::PEID::Clear();
  clear_has_pe_id();
}
inline const ::dstream::PEID& TupleQueue::pe_id() const {
  return pe_id_ != NULL ? *pe_id_ : *default_instance_->pe_id_;
}
inline ::dstream::PEID* TupleQueue::mutable_pe_id() {
  set_has_pe_id();
  if (pe_id_ == NULL) pe_id_ = new ::dstream::PEID;
  return pe_id_;
}
inline ::dstream::PEID* TupleQueue::release_pe_id() {
  clear_has_pe_id();
  ::dstream::PEID* temp = pe_id_;
  pe_id_ = NULL;
  return temp;
}

// optional uint32 drop_tuples = 3;
inline bool TupleQueue::has_drop_tuples() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TupleQueue::set_has_drop_tuples() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TupleQueue::clear_has_drop_tuples() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TupleQueue::clear_drop_tuples() {
  drop_tuples_ = 0u;
  clear_has_drop_tuples();
}
inline ::google::protobuf::uint32 TupleQueue::drop_tuples() const {
  return drop_tuples_;
}
inline void TupleQueue::set_drop_tuples(::google::protobuf::uint32 value) {
  set_has_drop_tuples();
  drop_tuples_ = value;
}

// optional uint32 buffer_tuples = 4;
inline bool TupleQueue::has_buffer_tuples() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TupleQueue::set_has_buffer_tuples() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TupleQueue::clear_has_buffer_tuples() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TupleQueue::clear_buffer_tuples() {
  buffer_tuples_ = 0u;
  clear_has_buffer_tuples();
}
inline ::google::protobuf::uint32 TupleQueue::buffer_tuples() const {
  return buffer_tuples_;
}
inline void TupleQueue::set_buffer_tuples(::google::protobuf::uint32 value) {
  set_has_buffer_tuples();
  buffer_tuples_ = value;
}

// optional uint32 memory_used = 5;
inline bool TupleQueue::has_memory_used() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TupleQueue::set_has_memory_used() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TupleQueue::clear_has_memory_used() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TupleQueue::clear_memory_used() {
  memory_used_ = 0u;
  clear_has_memory_used();
}
inline ::google::protobuf::uint32 TupleQueue::memory_used() const {
  return memory_used_;
}
inline void TupleQueue::set_memory_used(::google::protobuf::uint32 value) {
  set_has_memory_used();
  memory_used_ = value;
}

// -------------------------------------------------------------------

// PNReport

// optional .dstream.PNID id = 1;
inline bool PNReport::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PNReport::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PNReport::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PNReport::clear_id() {
  if (id_ != NULL) id_->::dstream::PNID::Clear();
  clear_has_id();
}
inline const ::dstream::PNID& PNReport::id() const {
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::dstream::PNID* PNReport::mutable_id() {
  set_has_id();
  if (id_ == NULL) id_ = new ::dstream::PNID;
  return id_;
}
inline ::dstream::PNID* PNReport::release_id() {
  clear_has_id();
  ::dstream::PNID* temp = id_;
  id_ = NULL;
  return temp;
}

// optional .dstream.PNResourceStatus resource = 2;
inline bool PNReport::has_resource() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PNReport::set_has_resource() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PNReport::clear_has_resource() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PNReport::clear_resource() {
  if (resource_ != NULL) resource_->::dstream::PNResourceStatus::Clear();
  clear_has_resource();
}
inline const ::dstream::PNResourceStatus& PNReport::resource() const {
  return resource_ != NULL ? *resource_ : *default_instance_->resource_;
}
inline ::dstream::PNResourceStatus* PNReport::mutable_resource() {
  set_has_resource();
  if (resource_ == NULL) resource_ = new ::dstream::PNResourceStatus;
  return resource_;
}
inline ::dstream::PNResourceStatus* PNReport::release_resource() {
  clear_has_resource();
  ::dstream::PNResourceStatus* temp = resource_;
  resource_ = NULL;
  return temp;
}

// repeated .dstream.BackupPEStatus status = 3;
inline int PNReport::status_size() const {
  return status_.size();
}
inline void PNReport::clear_status() {
  status_.Clear();
}
inline const ::dstream::BackupPEStatus& PNReport::status(int index) const {
  return status_.Get(index);
}
inline ::dstream::BackupPEStatus* PNReport::mutable_status(int index) {
  return status_.Mutable(index);
}
inline ::dstream::BackupPEStatus* PNReport::add_status() {
  return status_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dstream::BackupPEStatus >&
PNReport::status() const {
  return status_;
}
inline ::google::protobuf::RepeatedPtrField< ::dstream::BackupPEStatus >*
PNReport::mutable_status() {
  return &status_;
}

// repeated .dstream.FailPE fails = 4;
inline int PNReport::fails_size() const {
  return fails_.size();
}
inline void PNReport::clear_fails() {
  fails_.Clear();
}
inline const ::dstream::FailPE& PNReport::fails(int index) const {
  return fails_.Get(index);
}
inline ::dstream::FailPE* PNReport::mutable_fails(int index) {
  return fails_.Mutable(index);
}
inline ::dstream::FailPE* PNReport::add_fails() {
  return fails_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dstream::FailPE >&
PNReport::fails() const {
  return fails_;
}
inline ::google::protobuf::RepeatedPtrField< ::dstream::FailPE >*
PNReport::mutable_fails() {
  return &fails_;
}

// repeated .dstream.TupleQueue queues = 5;
inline int PNReport::queues_size() const {
  return queues_.size();
}
inline void PNReport::clear_queues() {
  queues_.Clear();
}
inline const ::dstream::TupleQueue& PNReport::queues(int index) const {
  return queues_.Get(index);
}
inline ::dstream::TupleQueue* PNReport::mutable_queues(int index) {
  return queues_.Mutable(index);
}
inline ::dstream::TupleQueue* PNReport::add_queues() {
  return queues_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dstream::TupleQueue >&
PNReport::queues() const {
  return queues_;
}
inline ::google::protobuf::RepeatedPtrField< ::dstream::TupleQueue >*
PNReport::mutable_queues() {
  return &queues_;
}

// -------------------------------------------------------------------

// ReportResponse

// optional fixed32 next_report_interval = 1;
inline bool ReportResponse::has_next_report_interval() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportResponse::set_has_next_report_interval() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportResponse::clear_has_next_report_interval() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportResponse::clear_next_report_interval() {
  next_report_interval_ = 0u;
  clear_has_next_report_interval();
}
inline ::google::protobuf::uint32 ReportResponse::next_report_interval() const {
  return next_report_interval_;
}
inline void ReportResponse::set_next_report_interval(::google::protobuf::uint32 value) {
  set_has_next_report_interval();
  next_report_interval_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dstream

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dstream::PEOperationMessage_OperationType>() {
  return ::dstream::PEOperationMessage_OperationType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pm_5fpn_5frpc_2eproto__INCLUDED
