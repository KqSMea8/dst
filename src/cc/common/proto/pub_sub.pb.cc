// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pub_sub.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dstream {

namespace {

const ::google::protobuf::Descriptor* ImporterTuple_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImporterTuple_reflection_ = NULL;
const ::google::protobuf::Descriptor* PipeID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PipeID_reflection_ = NULL;
const ::google::protobuf::Descriptor* DebugPNRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DebugPNRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DebugPNACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DebugPNACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadyACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadyACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* DoCheckpointRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DoCheckpointRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DoCheckpointACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DoCheckpointACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* UploadCheckpointRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UploadCheckpointRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UploadCheckpointACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UploadCheckpointACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplayRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplayRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplayACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplayACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeImporterRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeImporterRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeImporterACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeImporterACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartbeatRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartbeatRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartbeatACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartbeatACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* TupleMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TupleMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* Log_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Log_reflection_ = NULL;
const ::google::protobuf::Descriptor* FetchLogRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FetchLogRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FetchLogACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FetchLogACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForwardLogRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForwardLogRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForwardLogACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForwardLogACK_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pub_5fsub_2eproto() {
  protobuf_AddDesc_pub_5fsub_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pub_sub.proto");
  GOOGLE_CHECK(file != NULL);
  ImporterTuple_descriptor_ = file->message_type(0);
  static const int ImporterTuple_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImporterTuple, raw_),
  };
  ImporterTuple_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImporterTuple_descriptor_,
      ImporterTuple::default_instance_,
      ImporterTuple_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImporterTuple, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImporterTuple, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImporterTuple));
  PipeID_descriptor_ = file->message_type(1);
  static const int PipeID_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PipeID, id_),
  };
  PipeID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PipeID_descriptor_,
      PipeID::default_instance_,
      PipeID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PipeID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PipeID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PipeID));
  DebugPNRequest_descriptor_ = file->message_type(2);
  static const int DebugPNRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugPNRequest, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugPNRequest, args_),
  };
  DebugPNRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DebugPNRequest_descriptor_,
      DebugPNRequest::default_instance_,
      DebugPNRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugPNRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugPNRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DebugPNRequest));
  DebugPNACK_descriptor_ = file->message_type(3);
  static const int DebugPNACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugPNACK, debug_info_),
  };
  DebugPNACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DebugPNACK_descriptor_,
      DebugPNACK::default_instance_,
      DebugPNACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugPNACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugPNACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DebugPNACK));
  ReadyRequest_descriptor_ = file->message_type(4);
  static const int ReadyRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyRequest, peid_),
  };
  ReadyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadyRequest_descriptor_,
      ReadyRequest::default_instance_,
      ReadyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadyRequest));
  ReadyACK_descriptor_ = file->message_type(5);
  static const int ReadyACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyACK, status_),
  };
  ReadyACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadyACK_descriptor_,
      ReadyACK::default_instance_,
      ReadyACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadyACK));
  DoCheckpointRequest_descriptor_ = file->message_type(6);
  static const int DoCheckpointRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoCheckpointRequest, peid_),
  };
  DoCheckpointRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DoCheckpointRequest_descriptor_,
      DoCheckpointRequest::default_instance_,
      DoCheckpointRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoCheckpointRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoCheckpointRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DoCheckpointRequest));
  DoCheckpointACK_descriptor_ = file->message_type(7);
  static const int DoCheckpointACK_offsets_[1] = {
  };
  DoCheckpointACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DoCheckpointACK_descriptor_,
      DoCheckpointACK::default_instance_,
      DoCheckpointACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoCheckpointACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoCheckpointACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DoCheckpointACK));
  UploadCheckpointRequest_descriptor_ = file->message_type(8);
  static const int UploadCheckpointRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadCheckpointRequest, peid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadCheckpointRequest, chkpdir_),
  };
  UploadCheckpointRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UploadCheckpointRequest_descriptor_,
      UploadCheckpointRequest::default_instance_,
      UploadCheckpointRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadCheckpointRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadCheckpointRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UploadCheckpointRequest));
  UploadCheckpointACK_descriptor_ = file->message_type(9);
  static const int UploadCheckpointACK_offsets_[1] = {
  };
  UploadCheckpointACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UploadCheckpointACK_descriptor_,
      UploadCheckpointACK::default_instance_,
      UploadCheckpointACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadCheckpointACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadCheckpointACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UploadCheckpointACK));
  ReplayRequest_descriptor_ = file->message_type(10);
  static const int ReplayRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayRequest, peid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayRequest, pipeid_),
  };
  ReplayRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplayRequest_descriptor_,
      ReplayRequest::default_instance_,
      ReplayRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplayRequest));
  ReplayACK_descriptor_ = file->message_type(11);
  static const int ReplayACK_offsets_[1] = {
  };
  ReplayACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplayACK_descriptor_,
      ReplayACK::default_instance_,
      ReplayACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplayACK));
  SubscribeRequest_descriptor_ = file->message_type(12);
  static const int SubscribeRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRequest, peid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRequest, peids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRequest, pipeids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRequest, peid_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRequest, debug_info_),
  };
  SubscribeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscribeRequest_descriptor_,
      SubscribeRequest::default_instance_,
      SubscribeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscribeRequest));
  SubscribeACK_descriptor_ = file->message_type(13);
  static const int SubscribeACK_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeACK, peid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeACK, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeACK, peid_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeACK, debug_info_),
  };
  SubscribeACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscribeACK_descriptor_,
      SubscribeACK::default_instance_,
      SubscribeACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscribeACK));
  SubscribeImporterRequest_descriptor_ = file->message_type(14);
  static const int SubscribeImporterRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeImporterRequest, names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeImporterRequest, pipeids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeImporterRequest, debug_info_),
  };
  SubscribeImporterRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscribeImporterRequest_descriptor_,
      SubscribeImporterRequest::default_instance_,
      SubscribeImporterRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeImporterRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeImporterRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscribeImporterRequest));
  SubscribeImporterACK_descriptor_ = file->message_type(15);
  static const int SubscribeImporterACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeImporterACK, debug_info_),
  };
  SubscribeImporterACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscribeImporterACK_descriptor_,
      SubscribeImporterACK::default_instance_,
      SubscribeImporterACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeImporterACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeImporterACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscribeImporterACK));
  HeartbeatRequest_descriptor_ = file->message_type(16);
  static const int HeartbeatRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRequest, peid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRequest, metric_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRequest, metric_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRequest, debug_info_),
  };
  HeartbeatRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartbeatRequest_descriptor_,
      HeartbeatRequest::default_instance_,
      HeartbeatRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartbeatRequest));
  HeartbeatACK_descriptor_ = file->message_type(17);
  static const int HeartbeatACK_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatACK, debug_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatACK, flow_control_),
  };
  HeartbeatACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartbeatACK_descriptor_,
      HeartbeatACK::default_instance_,
      HeartbeatACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartbeatACK));
  TupleMeta_descriptor_ = file->message_type(18);
  static const int TupleMeta_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TupleMeta, hash_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TupleMeta, tags_),
  };
  TupleMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TupleMeta_descriptor_,
      TupleMeta::default_instance_,
      TupleMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TupleMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TupleMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TupleMeta));
  Log_descriptor_ = file->message_type(19);
  static const int Log_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log, upstream_peid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log, upstream_pipeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log, pipeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log, src_peid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log, dst_peid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log, tuples_meta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log, tuples_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log, patch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log, debug_info_),
  };
  Log_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Log_descriptor_,
      Log::default_instance_,
      Log_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Log));
  FetchLogRequest_descriptor_ = file->message_type(20);
  static const int FetchLogRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchLogRequest, peid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchLogRequest, replay_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchLogRequest, debug_info_),
  };
  FetchLogRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FetchLogRequest_descriptor_,
      FetchLogRequest::default_instance_,
      FetchLogRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchLogRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchLogRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FetchLogRequest));
  FetchLogACK_descriptor_ = file->message_type(21);
  static const int FetchLogACK_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchLogACK, delay_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchLogACK, log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchLogACK, end_replay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchLogACK, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchLogACK, debug_info_),
  };
  FetchLogACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FetchLogACK_descriptor_,
      FetchLogACK::default_instance_,
      FetchLogACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchLogACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchLogACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FetchLogACK));
  ForwardLogRequest_descriptor_ = file->message_type(22);
  static const int ForwardLogRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardLogRequest, peid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardLogRequest, log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardLogRequest, debug_info_),
  };
  ForwardLogRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForwardLogRequest_descriptor_,
      ForwardLogRequest::default_instance_,
      ForwardLogRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardLogRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardLogRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForwardLogRequest));
  ForwardLogACK_descriptor_ = file->message_type(23);
  static const int ForwardLogACK_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardLogACK, debug_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardLogACK, status_),
  };
  ForwardLogACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForwardLogACK_descriptor_,
      ForwardLogACK::default_instance_,
      ForwardLogACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardLogACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardLogACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForwardLogACK));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pub_5fsub_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImporterTuple_descriptor_, &ImporterTuple::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PipeID_descriptor_, &PipeID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DebugPNRequest_descriptor_, &DebugPNRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DebugPNACK_descriptor_, &DebugPNACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadyRequest_descriptor_, &ReadyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadyACK_descriptor_, &ReadyACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DoCheckpointRequest_descriptor_, &DoCheckpointRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DoCheckpointACK_descriptor_, &DoCheckpointACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UploadCheckpointRequest_descriptor_, &UploadCheckpointRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UploadCheckpointACK_descriptor_, &UploadCheckpointACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplayRequest_descriptor_, &ReplayRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplayACK_descriptor_, &ReplayACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscribeRequest_descriptor_, &SubscribeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscribeACK_descriptor_, &SubscribeACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscribeImporterRequest_descriptor_, &SubscribeImporterRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscribeImporterACK_descriptor_, &SubscribeImporterACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartbeatRequest_descriptor_, &HeartbeatRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartbeatACK_descriptor_, &HeartbeatACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TupleMeta_descriptor_, &TupleMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Log_descriptor_, &Log::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FetchLogRequest_descriptor_, &FetchLogRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FetchLogACK_descriptor_, &FetchLogACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForwardLogRequest_descriptor_, &ForwardLogRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForwardLogACK_descriptor_, &ForwardLogACK::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pub_5fsub_2eproto() {
  delete ImporterTuple::default_instance_;
  delete ImporterTuple_reflection_;
  delete PipeID::default_instance_;
  delete PipeID_reflection_;
  delete DebugPNRequest::default_instance_;
  delete DebugPNRequest_reflection_;
  delete DebugPNACK::default_instance_;
  delete DebugPNACK_reflection_;
  delete ReadyRequest::default_instance_;
  delete ReadyRequest_reflection_;
  delete ReadyACK::default_instance_;
  delete ReadyACK_reflection_;
  delete DoCheckpointRequest::default_instance_;
  delete DoCheckpointRequest_reflection_;
  delete DoCheckpointACK::default_instance_;
  delete DoCheckpointACK_reflection_;
  delete UploadCheckpointRequest::default_instance_;
  delete UploadCheckpointRequest_reflection_;
  delete UploadCheckpointACK::default_instance_;
  delete UploadCheckpointACK_reflection_;
  delete ReplayRequest::default_instance_;
  delete ReplayRequest_reflection_;
  delete ReplayACK::default_instance_;
  delete ReplayACK_reflection_;
  delete SubscribeRequest::default_instance_;
  delete SubscribeRequest_reflection_;
  delete SubscribeACK::default_instance_;
  delete SubscribeACK_reflection_;
  delete SubscribeImporterRequest::default_instance_;
  delete SubscribeImporterRequest_reflection_;
  delete SubscribeImporterACK::default_instance_;
  delete SubscribeImporterACK_reflection_;
  delete HeartbeatRequest::default_instance_;
  delete HeartbeatRequest_reflection_;
  delete HeartbeatACK::default_instance_;
  delete HeartbeatACK_reflection_;
  delete TupleMeta::default_instance_;
  delete TupleMeta_reflection_;
  delete Log::default_instance_;
  delete Log_reflection_;
  delete FetchLogRequest::default_instance_;
  delete FetchLogRequest_reflection_;
  delete FetchLogACK::default_instance_;
  delete FetchLogACK_reflection_;
  delete ForwardLogRequest::default_instance_;
  delete ForwardLogRequest_reflection_;
  delete ForwardLogACK::default_instance_;
  delete ForwardLogACK_reflection_;
}

void protobuf_AddDesc_pub_5fsub_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::dstream::protobuf_AddDesc_dstream_5fproto_5fcommon_2eproto();
  ::dstream::protobuf_AddDesc_application_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rpub_sub.proto\022\007dstream\032\032dstream_proto_"
    "common.proto\032\021application.proto\"\034\n\rImpor"
    "terTuple\022\013\n\003raw\030\001 \001(\014\"\024\n\006PipeID\022\n\n\002id\030\001 "
    "\001(\006\"+\n\016DebugPNRequest\022\013\n\003cmd\030\001 \001(\t\022\014\n\004ar"
    "gs\030\002 \001(\t\" \n\nDebugPNACK\022\022\n\ndebug_info\030\001 \001"
    "(\t\"+\n\014ReadyRequest\022\033\n\004peid\030\001 \001(\0132\r.dstre"
    "am.PEID\"\032\n\010ReadyACK\022\016\n\006status\030\001 \001(\005\"2\n\023D"
    "oCheckpointRequest\022\033\n\004peid\030\001 \001(\0132\r.dstre"
    "am.PEID\"\021\n\017DoCheckpointACK\"G\n\027UploadChec"
    "kpointRequest\022\033\n\004peid\030\001 \001(\0132\r.dstream.PE"
    "ID\022\017\n\007chkpdir\030\002 \001(\t\"\025\n\023UploadCheckpointA"
    "CK\"M\n\rReplayRequest\022\033\n\004peid\030\001 \001(\0132\r.dstr"
    "eam.PEID\022\037\n\006pipeid\030\002 \001(\0132\017.dstream.PipeI"
    "D\"\013\n\tReplayACK\"\226\001\n\020SubscribeRequest\022\033\n\004p"
    "eid\030\001 \001(\0132\r.dstream.PEID\022\034\n\005peids\030\002 \003(\0132"
    "\r.dstream.PEID\022 \n\007pipeids\030\003 \003(\0132\017.dstrea"
    "m.PipeID\022\021\n\tpeid_time\030\004 \001(\t\022\022\n\ndebug_inf"
    "o\030\005 \001(\t\"_\n\014SubscribeACK\022\033\n\004peid\030\001 \003(\0132\r."
    "dstream.PEID\022\013\n\003res\030\002 \003(\007\022\021\n\tpeid_time\030\003"
    " \001(\t\022\022\n\ndebug_info\030\004 \001(\t\"_\n\030SubscribeImp"
    "orterRequest\022\r\n\005names\030\001 \003(\t\022 \n\007pipeids\030\002"
    " \003(\0132\017.dstream.PipeID\022\022\n\ndebug_info\030\003 \001("
    "\t\"*\n\024SubscribeImporterACK\022\022\n\ndebug_info\030"
    "\001 \001(\t\"n\n\020HeartbeatRequest\022\033\n\004peid\030\001 \001(\0132"
    "\r.dstream.PEID\022\023\n\013metric_name\030\002 \003(\t\022\024\n\014m"
    "etric_value\030\003 \003(\t\022\022\n\ndebug_info\030\004 \001(\t\"N\n"
    "\014HeartbeatACK\022\022\n\ndebug_info\030\001 \001(\t\022*\n\014flo"
    "w_control\030\002 \001(\0132\024.dstream.FlowControl\",\n"
    "\tTupleMeta\022\021\n\thash_code\030\001 \001(\006\022\014\n\004tags\030\002 "
    "\001(\t\"\224\002\n\003Log\022$\n\rupstream_peid\030\001 \001(\0132\r.dst"
    "ream.PEID\022(\n\017upstream_pipeid\030\002 \001(\0132\017.dst"
    "ream.PipeID\022\037\n\006pipeid\030\013 \001(\0132\017.dstream.Pi"
    "peID\022\037\n\010src_peid\030\025 \001(\0132\r.dstream.PEID\022\037\n"
    "\010dst_peid\030\026 \001(\0132\r.dstream.PEID\022\'\n\013tuples"
    "_meta\030\037 \003(\0132\022.dstream.TupleMeta\022\016\n\006tuple"
    "s\030  \003(\014\022\r\n\005patch\030! \001(\014\022\022\n\ndebug_info\030\" \002"
    "(\t\"W\n\017FetchLogRequest\022\033\n\004peid\030\001 \001(\0132\r.ds"
    "tream.PEID\022\023\n\013replay_mode\030\002 \001(\010\022\022\n\ndebug"
    "_info\030\003 \001(\t\"o\n\013FetchLogACK\022\020\n\010delay_ms\030\001"
    " \001(\004\022\031\n\003log\030\002 \001(\0132\014.dstream.Log\022\022\n\nend_r"
    "eplay\030\003 \001(\010\022\013\n\003res\030\004 \001(\007\022\022\n\ndebug_info\030\005"
    " \001(\t\"_\n\021ForwardLogRequest\022\033\n\004peid\030\001 \001(\0132"
    "\r.dstream.PEID\022\031\n\003log\030\002 \001(\0132\014.dstream.Lo"
    "g\022\022\n\ndebug_info\030\003 \001(\t\"3\n\rForwardLogACK\022\022"
    "\n\ndebug_info\030\001 \001(\t\022\016\n\006status\030\002 \001(\005", 1794);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pub_sub.proto", &protobuf_RegisterTypes);
  ImporterTuple::default_instance_ = new ImporterTuple();
  PipeID::default_instance_ = new PipeID();
  DebugPNRequest::default_instance_ = new DebugPNRequest();
  DebugPNACK::default_instance_ = new DebugPNACK();
  ReadyRequest::default_instance_ = new ReadyRequest();
  ReadyACK::default_instance_ = new ReadyACK();
  DoCheckpointRequest::default_instance_ = new DoCheckpointRequest();
  DoCheckpointACK::default_instance_ = new DoCheckpointACK();
  UploadCheckpointRequest::default_instance_ = new UploadCheckpointRequest();
  UploadCheckpointACK::default_instance_ = new UploadCheckpointACK();
  ReplayRequest::default_instance_ = new ReplayRequest();
  ReplayACK::default_instance_ = new ReplayACK();
  SubscribeRequest::default_instance_ = new SubscribeRequest();
  SubscribeACK::default_instance_ = new SubscribeACK();
  SubscribeImporterRequest::default_instance_ = new SubscribeImporterRequest();
  SubscribeImporterACK::default_instance_ = new SubscribeImporterACK();
  HeartbeatRequest::default_instance_ = new HeartbeatRequest();
  HeartbeatACK::default_instance_ = new HeartbeatACK();
  TupleMeta::default_instance_ = new TupleMeta();
  Log::default_instance_ = new Log();
  FetchLogRequest::default_instance_ = new FetchLogRequest();
  FetchLogACK::default_instance_ = new FetchLogACK();
  ForwardLogRequest::default_instance_ = new ForwardLogRequest();
  ForwardLogACK::default_instance_ = new ForwardLogACK();
  ImporterTuple::default_instance_->InitAsDefaultInstance();
  PipeID::default_instance_->InitAsDefaultInstance();
  DebugPNRequest::default_instance_->InitAsDefaultInstance();
  DebugPNACK::default_instance_->InitAsDefaultInstance();
  ReadyRequest::default_instance_->InitAsDefaultInstance();
  ReadyACK::default_instance_->InitAsDefaultInstance();
  DoCheckpointRequest::default_instance_->InitAsDefaultInstance();
  DoCheckpointACK::default_instance_->InitAsDefaultInstance();
  UploadCheckpointRequest::default_instance_->InitAsDefaultInstance();
  UploadCheckpointACK::default_instance_->InitAsDefaultInstance();
  ReplayRequest::default_instance_->InitAsDefaultInstance();
  ReplayACK::default_instance_->InitAsDefaultInstance();
  SubscribeRequest::default_instance_->InitAsDefaultInstance();
  SubscribeACK::default_instance_->InitAsDefaultInstance();
  SubscribeImporterRequest::default_instance_->InitAsDefaultInstance();
  SubscribeImporterACK::default_instance_->InitAsDefaultInstance();
  HeartbeatRequest::default_instance_->InitAsDefaultInstance();
  HeartbeatACK::default_instance_->InitAsDefaultInstance();
  TupleMeta::default_instance_->InitAsDefaultInstance();
  Log::default_instance_->InitAsDefaultInstance();
  FetchLogRequest::default_instance_->InitAsDefaultInstance();
  FetchLogACK::default_instance_->InitAsDefaultInstance();
  ForwardLogRequest::default_instance_->InitAsDefaultInstance();
  ForwardLogACK::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pub_5fsub_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pub_5fsub_2eproto {
  StaticDescriptorInitializer_pub_5fsub_2eproto() {
    protobuf_AddDesc_pub_5fsub_2eproto();
  }
} static_descriptor_initializer_pub_5fsub_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ImporterTuple::kRawFieldNumber;
#endif  // !_MSC_VER

ImporterTuple::ImporterTuple()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ImporterTuple::InitAsDefaultInstance() {
}

ImporterTuple::ImporterTuple(const ImporterTuple& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ImporterTuple::SharedCtor() {
  _cached_size_ = 0;
  raw_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImporterTuple::~ImporterTuple() {
  SharedDtor();
}

void ImporterTuple::SharedDtor() {
  if (raw_ != &::google::protobuf::internal::kEmptyString) {
    delete raw_;
  }
  if (this != default_instance_) {
  }
}

void ImporterTuple::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImporterTuple::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImporterTuple_descriptor_;
}

const ImporterTuple& ImporterTuple::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pub_5fsub_2eproto();  return *default_instance_;
}

ImporterTuple* ImporterTuple::default_instance_ = NULL;

ImporterTuple* ImporterTuple::New() const {
  return new ImporterTuple;
}

void ImporterTuple::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_raw()) {
      if (raw_ != &::google::protobuf::internal::kEmptyString) {
        raw_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImporterTuple::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes raw = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_raw()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ImporterTuple::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes raw = 1;
  if (has_raw()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->raw(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ImporterTuple::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes raw = 1;
  if (has_raw()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->raw(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ImporterTuple::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes raw = 1;
    if (has_raw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->raw());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImporterTuple::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImporterTuple* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImporterTuple*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImporterTuple::MergeFrom(const ImporterTuple& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_raw()) {
      set_raw(from.raw());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImporterTuple::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImporterTuple::CopyFrom(const ImporterTuple& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImporterTuple::IsInitialized() const {
  
  return true;
}

void ImporterTuple::Swap(ImporterTuple* other) {
  if (other != this) {
    std::swap(raw_, other->raw_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImporterTuple::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImporterTuple_descriptor_;
  metadata.reflection = ImporterTuple_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PipeID::kIdFieldNumber;
#endif  // !_MSC_VER

PipeID::PipeID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PipeID::InitAsDefaultInstance() {
}

PipeID::PipeID(const PipeID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PipeID::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PipeID::~PipeID() {
  SharedDtor();
}

void PipeID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PipeID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PipeID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PipeID_descriptor_;
}

const PipeID& PipeID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pub_5fsub_2eproto();  return *default_instance_;
}

PipeID* PipeID::default_instance_ = NULL;

PipeID* PipeID::New() const {
  return new PipeID;
}

void PipeID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PipeID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PipeID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PipeID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PipeID::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 id = 1;
    if (has_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PipeID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PipeID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PipeID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PipeID::MergeFrom(const PipeID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PipeID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PipeID::CopyFrom(const PipeID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PipeID::IsInitialized() const {
  
  return true;
}

void PipeID::Swap(PipeID* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PipeID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PipeID_descriptor_;
  metadata.reflection = PipeID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DebugPNRequest::kCmdFieldNumber;
const int DebugPNRequest::kArgsFieldNumber;
#endif  // !_MSC_VER

DebugPNRequest::DebugPNRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DebugPNRequest::InitAsDefaultInstance() {
}

DebugPNRequest::DebugPNRequest(const DebugPNRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DebugPNRequest::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  args_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DebugPNRequest::~DebugPNRequest() {
  SharedDtor();
}

void DebugPNRequest::SharedDtor() {
  if (cmd_ != &::google::protobuf::internal::kEmptyString) {
    delete cmd_;
  }
  if (args_ != &::google::protobuf::internal::kEmptyString) {
    delete args_;
  }
  if (this != default_instance_) {
  }
}

void DebugPNRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugPNRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugPNRequest_descriptor_;
}

const DebugPNRequest& DebugPNRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pub_5fsub_2eproto();  return *default_instance_;
}

DebugPNRequest* DebugPNRequest::default_instance_ = NULL;

DebugPNRequest* DebugPNRequest::New() const {
  return new DebugPNRequest;
}

void DebugPNRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cmd()) {
      if (cmd_ != &::google::protobuf::internal::kEmptyString) {
        cmd_->clear();
      }
    }
    if (has_args()) {
      if (args_ != &::google::protobuf::internal::kEmptyString) {
        args_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DebugPNRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cmd().data(), this->cmd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_args;
        break;
      }
      
      // optional string args = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_args()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->args().data(), this->args().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DebugPNRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cmd(), output);
  }
  
  // optional string args = 2;
  if (has_args()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->args().data(), this->args().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->args(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DebugPNRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cmd(), target);
  }
  
  // optional string args = 2;
  if (has_args()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->args().data(), this->args().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->args(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DebugPNRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cmd());
    }
    
    // optional string args = 2;
    if (has_args()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->args());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugPNRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DebugPNRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DebugPNRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DebugPNRequest::MergeFrom(const DebugPNRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_args()) {
      set_args(from.args());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DebugPNRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugPNRequest::CopyFrom(const DebugPNRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugPNRequest::IsInitialized() const {
  
  return true;
}

void DebugPNRequest::Swap(DebugPNRequest* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(args_, other->args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DebugPNRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DebugPNRequest_descriptor_;
  metadata.reflection = DebugPNRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DebugPNACK::kDebugInfoFieldNumber;
#endif  // !_MSC_VER

DebugPNACK::DebugPNACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DebugPNACK::InitAsDefaultInstance() {
}

DebugPNACK::DebugPNACK(const DebugPNACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DebugPNACK::SharedCtor() {
  _cached_size_ = 0;
  debug_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DebugPNACK::~DebugPNACK() {
  SharedDtor();
}

void DebugPNACK::SharedDtor() {
  if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_info_;
  }
  if (this != default_instance_) {
  }
}

void DebugPNACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugPNACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugPNACK_descriptor_;
}

const DebugPNACK& DebugPNACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pub_5fsub_2eproto();  return *default_instance_;
}

DebugPNACK* DebugPNACK::default_instance_ = NULL;

DebugPNACK* DebugPNACK::New() const {
  return new DebugPNACK;
}

void DebugPNACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_debug_info()) {
      if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
        debug_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DebugPNACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string debug_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->debug_info().data(), this->debug_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DebugPNACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string debug_info = 1;
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_info().data(), this->debug_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->debug_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DebugPNACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string debug_info = 1;
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_info().data(), this->debug_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->debug_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DebugPNACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string debug_info = 1;
    if (has_debug_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugPNACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DebugPNACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DebugPNACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DebugPNACK::MergeFrom(const DebugPNACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_debug_info()) {
      set_debug_info(from.debug_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DebugPNACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugPNACK::CopyFrom(const DebugPNACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugPNACK::IsInitialized() const {
  
  return true;
}

void DebugPNACK::Swap(DebugPNACK* other) {
  if (other != this) {
    std::swap(debug_info_, other->debug_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DebugPNACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DebugPNACK_descriptor_;
  metadata.reflection = DebugPNACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReadyRequest::kPeidFieldNumber;
#endif  // !_MSC_VER

ReadyRequest::ReadyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReadyRequest::InitAsDefaultInstance() {
  peid_ = const_cast< ::dstream::PEID*>(&::dstream::PEID::default_instance());
}

ReadyRequest::ReadyRequest(const ReadyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReadyRequest::SharedCtor() {
  _cached_size_ = 0;
  peid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadyRequest::~ReadyRequest() {
  SharedDtor();
}

void ReadyRequest::SharedDtor() {
  if (this != default_instance_) {
    delete peid_;
  }
}

void ReadyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadyRequest_descriptor_;
}

const ReadyRequest& ReadyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pub_5fsub_2eproto();  return *default_instance_;
}

ReadyRequest* ReadyRequest::default_instance_ = NULL;

ReadyRequest* ReadyRequest::New() const {
  return new ReadyRequest;
}

void ReadyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_peid()) {
      if (peid_ != NULL) peid_->::dstream::PEID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dstream.PEID peid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReadyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dstream.PEID peid = 1;
  if (has_peid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->peid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReadyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dstream.PEID peid = 1;
  if (has_peid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->peid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReadyRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dstream.PEID peid = 1;
    if (has_peid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->peid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadyRequest::MergeFrom(const ReadyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_peid()) {
      mutable_peid()->::dstream::PEID::MergeFrom(from.peid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadyRequest::CopyFrom(const ReadyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadyRequest::IsInitialized() const {
  
  return true;
}

void ReadyRequest::Swap(ReadyRequest* other) {
  if (other != this) {
    std::swap(peid_, other->peid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadyRequest_descriptor_;
  metadata.reflection = ReadyRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReadyACK::kStatusFieldNumber;
#endif  // !_MSC_VER

ReadyACK::ReadyACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReadyACK::InitAsDefaultInstance() {
}

ReadyACK::ReadyACK(const ReadyACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReadyACK::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadyACK::~ReadyACK() {
  SharedDtor();
}

void ReadyACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReadyACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadyACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadyACK_descriptor_;
}

const ReadyACK& ReadyACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pub_5fsub_2eproto();  return *default_instance_;
}

ReadyACK* ReadyACK::default_instance_ = NULL;

ReadyACK* ReadyACK::New() const {
  return new ReadyACK;
}

void ReadyACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadyACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReadyACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReadyACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReadyACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadyACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadyACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadyACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadyACK::MergeFrom(const ReadyACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadyACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadyACK::CopyFrom(const ReadyACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadyACK::IsInitialized() const {
  
  return true;
}

void ReadyACK::Swap(ReadyACK* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadyACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadyACK_descriptor_;
  metadata.reflection = ReadyACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DoCheckpointRequest::kPeidFieldNumber;
#endif  // !_MSC_VER

DoCheckpointRequest::DoCheckpointRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DoCheckpointRequest::InitAsDefaultInstance() {
  peid_ = const_cast< ::dstream::PEID*>(&::dstream::PEID::default_instance());
}

DoCheckpointRequest::DoCheckpointRequest(const DoCheckpointRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DoCheckpointRequest::SharedCtor() {
  _cached_size_ = 0;
  peid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DoCheckpointRequest::~DoCheckpointRequest() {
  SharedDtor();
}

void DoCheckpointRequest::SharedDtor() {
  if (this != default_instance_) {
    delete peid_;
  }
}

void DoCheckpointRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DoCheckpointRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DoCheckpointRequest_descriptor_;
}

const DoCheckpointRequest& DoCheckpointRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pub_5fsub_2eproto();  return *default_instance_;
}

DoCheckpointRequest* DoCheckpointRequest::default_instance_ = NULL;

DoCheckpointRequest* DoCheckpointRequest::New() const {
  return new DoCheckpointRequest;
}

void DoCheckpointRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_peid()) {
      if (peid_ != NULL) peid_->::dstream::PEID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DoCheckpointRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dstream.PEID peid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DoCheckpointRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dstream.PEID peid = 1;
  if (has_peid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->peid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DoCheckpointRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dstream.PEID peid = 1;
  if (has_peid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->peid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DoCheckpointRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dstream.PEID peid = 1;
    if (has_peid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->peid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DoCheckpointRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DoCheckpointRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DoCheckpointRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DoCheckpointRequest::MergeFrom(const DoCheckpointRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_peid()) {
      mutable_peid()->::dstream::PEID::MergeFrom(from.peid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DoCheckpointRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoCheckpointRequest::CopyFrom(const DoCheckpointRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoCheckpointRequest::IsInitialized() const {
  
  return true;
}

void DoCheckpointRequest::Swap(DoCheckpointRequest* other) {
  if (other != this) {
    std::swap(peid_, other->peid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DoCheckpointRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DoCheckpointRequest_descriptor_;
  metadata.reflection = DoCheckpointRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DoCheckpointACK::DoCheckpointACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DoCheckpointACK::InitAsDefaultInstance() {
}

DoCheckpointACK::DoCheckpointACK(const DoCheckpointACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DoCheckpointACK::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DoCheckpointACK::~DoCheckpointACK() {
  SharedDtor();
}

void DoCheckpointACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DoCheckpointACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DoCheckpointACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DoCheckpointACK_descriptor_;
}

const DoCheckpointACK& DoCheckpointACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pub_5fsub_2eproto();  return *default_instance_;
}

DoCheckpointACK* DoCheckpointACK::default_instance_ = NULL;

DoCheckpointACK* DoCheckpointACK::New() const {
  return new DoCheckpointACK;
}

void DoCheckpointACK::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DoCheckpointACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DoCheckpointACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DoCheckpointACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DoCheckpointACK::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DoCheckpointACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DoCheckpointACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DoCheckpointACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DoCheckpointACK::MergeFrom(const DoCheckpointACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DoCheckpointACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoCheckpointACK::CopyFrom(const DoCheckpointACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoCheckpointACK::IsInitialized() const {
  
  return true;
}

void DoCheckpointACK::Swap(DoCheckpointACK* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DoCheckpointACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DoCheckpointACK_descriptor_;
  metadata.reflection = DoCheckpointACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UploadCheckpointRequest::kPeidFieldNumber;
const int UploadCheckpointRequest::kChkpdirFieldNumber;
#endif  // !_MSC_VER

UploadCheckpointRequest::UploadCheckpointRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UploadCheckpointRequest::InitAsDefaultInstance() {
  peid_ = const_cast< ::dstream::PEID*>(&::dstream::PEID::default_instance());
}

UploadCheckpointRequest::UploadCheckpointRequest(const UploadCheckpointRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UploadCheckpointRequest::SharedCtor() {
  _cached_size_ = 0;
  peid_ = NULL;
  chkpdir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadCheckpointRequest::~UploadCheckpointRequest() {
  SharedDtor();
}

void UploadCheckpointRequest::SharedDtor() {
  if (chkpdir_ != &::google::protobuf::internal::kEmptyString) {
    delete chkpdir_;
  }
  if (this != default_instance_) {
    delete peid_;
  }
}

void UploadCheckpointRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadCheckpointRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UploadCheckpointRequest_descriptor_;
}

const UploadCheckpointRequest& UploadCheckpointRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pub_5fsub_2eproto();  return *default_instance_;
}

UploadCheckpointRequest* UploadCheckpointRequest::default_instance_ = NULL;

UploadCheckpointRequest* UploadCheckpointRequest::New() const {
  return new UploadCheckpointRequest;
}

void UploadCheckpointRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_peid()) {
      if (peid_ != NULL) peid_->::dstream::PEID::Clear();
    }
    if (has_chkpdir()) {
      if (chkpdir_ != &::google::protobuf::internal::kEmptyString) {
        chkpdir_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UploadCheckpointRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dstream.PEID peid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chkpdir;
        break;
      }
      
      // optional string chkpdir = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chkpdir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chkpdir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chkpdir().data(), this->chkpdir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UploadCheckpointRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dstream.PEID peid = 1;
  if (has_peid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->peid(), output);
  }
  
  // optional string chkpdir = 2;
  if (has_chkpdir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chkpdir().data(), this->chkpdir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->chkpdir(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UploadCheckpointRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dstream.PEID peid = 1;
  if (has_peid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->peid(), target);
  }
  
  // optional string chkpdir = 2;
  if (has_chkpdir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chkpdir().data(), this->chkpdir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chkpdir(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UploadCheckpointRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dstream.PEID peid = 1;
    if (has_peid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->peid());
    }
    
    // optional string chkpdir = 2;
    if (has_chkpdir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chkpdir());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadCheckpointRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UploadCheckpointRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UploadCheckpointRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UploadCheckpointRequest::MergeFrom(const UploadCheckpointRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_peid()) {
      mutable_peid()->::dstream::PEID::MergeFrom(from.peid());
    }
    if (from.has_chkpdir()) {
      set_chkpdir(from.chkpdir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UploadCheckpointRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadCheckpointRequest::CopyFrom(const UploadCheckpointRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadCheckpointRequest::IsInitialized() const {
  
  return true;
}

void UploadCheckpointRequest::Swap(UploadCheckpointRequest* other) {
  if (other != this) {
    std::swap(peid_, other->peid_);
    std::swap(chkpdir_, other->chkpdir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UploadCheckpointRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UploadCheckpointRequest_descriptor_;
  metadata.reflection = UploadCheckpointRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

UploadCheckpointACK::UploadCheckpointACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UploadCheckpointACK::InitAsDefaultInstance() {
}

UploadCheckpointACK::UploadCheckpointACK(const UploadCheckpointACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UploadCheckpointACK::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadCheckpointACK::~UploadCheckpointACK() {
  SharedDtor();
}

void UploadCheckpointACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UploadCheckpointACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadCheckpointACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UploadCheckpointACK_descriptor_;
}

const UploadCheckpointACK& UploadCheckpointACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pub_5fsub_2eproto();  return *default_instance_;
}

UploadCheckpointACK* UploadCheckpointACK::default_instance_ = NULL;

UploadCheckpointACK* UploadCheckpointACK::New() const {
  return new UploadCheckpointACK;
}

void UploadCheckpointACK::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UploadCheckpointACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void UploadCheckpointACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UploadCheckpointACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UploadCheckpointACK::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadCheckpointACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UploadCheckpointACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UploadCheckpointACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UploadCheckpointACK::MergeFrom(const UploadCheckpointACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UploadCheckpointACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadCheckpointACK::CopyFrom(const UploadCheckpointACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadCheckpointACK::IsInitialized() const {
  
  return true;
}

void UploadCheckpointACK::Swap(UploadCheckpointACK* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UploadCheckpointACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UploadCheckpointACK_descriptor_;
  metadata.reflection = UploadCheckpointACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplayRequest::kPeidFieldNumber;
const int ReplayRequest::kPipeidFieldNumber;
#endif  // !_MSC_VER

ReplayRequest::ReplayRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReplayRequest::InitAsDefaultInstance() {
  peid_ = const_cast< ::dstream::PEID*>(&::dstream::PEID::default_instance());
  pipeid_ = const_cast< ::dstream::PipeID*>(&::dstream::PipeID::default_instance());
}

ReplayRequest::ReplayRequest(const ReplayRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReplayRequest::SharedCtor() {
  _cached_size_ = 0;
  peid_ = NULL;
  pipeid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplayRequest::~ReplayRequest() {
  SharedDtor();
}

void ReplayRequest::SharedDtor() {
  if (this != default_instance_) {
    delete peid_;
    delete pipeid_;
  }
}

void ReplayRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplayRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplayRequest_descriptor_;
}

const ReplayRequest& ReplayRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pub_5fsub_2eproto();  return *default_instance_;
}

ReplayRequest* ReplayRequest::default_instance_ = NULL;

ReplayRequest* ReplayRequest::New() const {
  return new ReplayRequest;
}

void ReplayRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_peid()) {
      if (peid_ != NULL) peid_->::dstream::PEID::Clear();
    }
    if (has_pipeid()) {
      if (pipeid_ != NULL) pipeid_->::dstream::PipeID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplayRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dstream.PEID peid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pipeid;
        break;
      }
      
      // optional .dstream.PipeID pipeid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pipeid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pipeid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReplayRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dstream.PEID peid = 1;
  if (has_peid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->peid(), output);
  }
  
  // optional .dstream.PipeID pipeid = 2;
  if (has_pipeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pipeid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReplayRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dstream.PEID peid = 1;
  if (has_peid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->peid(), target);
  }
  
  // optional .dstream.PipeID pipeid = 2;
  if (has_pipeid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pipeid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReplayRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dstream.PEID peid = 1;
    if (has_peid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->peid());
    }
    
    // optional .dstream.PipeID pipeid = 2;
    if (has_pipeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pipeid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplayRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplayRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplayRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplayRequest::MergeFrom(const ReplayRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_peid()) {
      mutable_peid()->::dstream::PEID::MergeFrom(from.peid());
    }
    if (from.has_pipeid()) {
      mutable_pipeid()->::dstream::PipeID::MergeFrom(from.pipeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplayRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplayRequest::CopyFrom(const ReplayRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplayRequest::IsInitialized() const {
  
  return true;
}

void ReplayRequest::Swap(ReplayRequest* other) {
  if (other != this) {
    std::swap(peid_, other->peid_);
    std::swap(pipeid_, other->pipeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplayRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplayRequest_descriptor_;
  metadata.reflection = ReplayRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReplayACK::ReplayACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReplayACK::InitAsDefaultInstance() {
}

ReplayACK::ReplayACK(const ReplayACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReplayACK::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplayACK::~ReplayACK() {
  SharedDtor();
}

void ReplayACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplayACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplayACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplayACK_descriptor_;
}

const ReplayACK& ReplayACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pub_5fsub_2eproto();  return *default_instance_;
}

ReplayACK* ReplayACK::default_instance_ = NULL;

ReplayACK* ReplayACK::New() const {
  return new ReplayACK;
}

void ReplayACK::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplayACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReplayACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReplayACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReplayACK::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplayACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplayACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplayACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplayACK::MergeFrom(const ReplayACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplayACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplayACK::CopyFrom(const ReplayACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplayACK::IsInitialized() const {
  
  return true;
}

void ReplayACK::Swap(ReplayACK* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplayACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplayACK_descriptor_;
  metadata.reflection = ReplayACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubscribeRequest::kPeidFieldNumber;
const int SubscribeRequest::kPeidsFieldNumber;
const int SubscribeRequest::kPipeidsFieldNumber;
const int SubscribeRequest::kPeidTimeFieldNumber;
const int SubscribeRequest::kDebugInfoFieldNumber;
#endif  // !_MSC_VER

SubscribeRequest::SubscribeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubscribeRequest::InitAsDefaultInstance() {
  peid_ = const_cast< ::dstream::PEID*>(&::dstream::PEID::default_instance());
}

SubscribeRequest::SubscribeRequest(const SubscribeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubscribeRequest::SharedCtor() {
  _cached_size_ = 0;
  peid_ = NULL;
  peid_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  debug_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscribeRequest::~SubscribeRequest() {
  SharedDtor();
}

void SubscribeRequest::SharedDtor() {
  if (peid_time_ != &::google::protobuf::internal::kEmptyString) {
    delete peid_time_;
  }
  if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_info_;
  }
  if (this != default_instance_) {
    delete peid_;
  }
}

void SubscribeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeRequest_descriptor_;
}

const SubscribeRequest& SubscribeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pub_5fsub_2eproto();  return *default_instance_;
}

SubscribeRequest* SubscribeRequest::default_instance_ = NULL;

SubscribeRequest* SubscribeRequest::New() const {
  return new SubscribeRequest;
}

void SubscribeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_peid()) {
      if (peid_ != NULL) peid_->::dstream::PEID::Clear();
    }
    if (has_peid_time()) {
      if (peid_time_ != &::google::protobuf::internal::kEmptyString) {
        peid_time_->clear();
      }
    }
    if (has_debug_info()) {
      if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
        debug_info_->clear();
      }
    }
  }
  peids_.Clear();
  pipeids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscribeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dstream.PEID peid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_peids;
        break;
      }
      
      // repeated .dstream.PEID peids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_peids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_peids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_peids;
        if (input->ExpectTag(26)) goto parse_pipeids;
        break;
      }
      
      // repeated .dstream.PipeID pipeids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pipeids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pipeids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pipeids;
        if (input->ExpectTag(34)) goto parse_peid_time;
        break;
      }
      
      // optional string peid_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_peid_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peid_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->peid_time().data(), this->peid_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_debug_info;
        break;
      }
      
      // optional string debug_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debug_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->debug_info().data(), this->debug_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubscribeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dstream.PEID peid = 1;
  if (has_peid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->peid(), output);
  }
  
  // repeated .dstream.PEID peids = 2;
  for (int i = 0; i < this->peids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->peids(i), output);
  }
  
  // repeated .dstream.PipeID pipeids = 3;
  for (int i = 0; i < this->pipeids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pipeids(i), output);
  }
  
  // optional string peid_time = 4;
  if (has_peid_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peid_time().data(), this->peid_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->peid_time(), output);
  }
  
  // optional string debug_info = 5;
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_info().data(), this->debug_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->debug_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubscribeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dstream.PEID peid = 1;
  if (has_peid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->peid(), target);
  }
  
  // repeated .dstream.PEID peids = 2;
  for (int i = 0; i < this->peids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->peids(i), target);
  }
  
  // repeated .dstream.PipeID pipeids = 3;
  for (int i = 0; i < this->pipeids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pipeids(i), target);
  }
  
  // optional string peid_time = 4;
  if (has_peid_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peid_time().data(), this->peid_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->peid_time(), target);
  }
  
  // optional string debug_info = 5;
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_info().data(), this->debug_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->debug_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubscribeRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dstream.PEID peid = 1;
    if (has_peid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->peid());
    }
    
    // optional string peid_time = 4;
    if (has_peid_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->peid_time());
    }
    
    // optional string debug_info = 5;
    if (has_debug_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug_info());
    }
    
  }
  // repeated .dstream.PEID peids = 2;
  total_size += 1 * this->peids_size();
  for (int i = 0; i < this->peids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->peids(i));
  }
  
  // repeated .dstream.PipeID pipeids = 3;
  total_size += 1 * this->pipeids_size();
  for (int i = 0; i < this->pipeids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pipeids(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscribeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscribeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscribeRequest::MergeFrom(const SubscribeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  peids_.MergeFrom(from.peids_);
  pipeids_.MergeFrom(from.pipeids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_peid()) {
      mutable_peid()->::dstream::PEID::MergeFrom(from.peid());
    }
    if (from.has_peid_time()) {
      set_peid_time(from.peid_time());
    }
    if (from.has_debug_info()) {
      set_debug_info(from.debug_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscribeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeRequest::CopyFrom(const SubscribeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeRequest::IsInitialized() const {
  
  return true;
}

void SubscribeRequest::Swap(SubscribeRequest* other) {
  if (other != this) {
    std::swap(peid_, other->peid_);
    peids_.Swap(&other->peids_);
    pipeids_.Swap(&other->pipeids_);
    std::swap(peid_time_, other->peid_time_);
    std::swap(debug_info_, other->debug_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscribeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeRequest_descriptor_;
  metadata.reflection = SubscribeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubscribeACK::kPeidFieldNumber;
const int SubscribeACK::kResFieldNumber;
const int SubscribeACK::kPeidTimeFieldNumber;
const int SubscribeACK::kDebugInfoFieldNumber;
#endif  // !_MSC_VER

SubscribeACK::SubscribeACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubscribeACK::InitAsDefaultInstance() {
}

SubscribeACK::SubscribeACK(const SubscribeACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubscribeACK::SharedCtor() {
  _cached_size_ = 0;
  peid_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  debug_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscribeACK::~SubscribeACK() {
  SharedDtor();
}

void SubscribeACK::SharedDtor() {
  if (peid_time_ != &::google::protobuf::internal::kEmptyString) {
    delete peid_time_;
  }
  if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_info_;
  }
  if (this != default_instance_) {
  }
}

void SubscribeACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeACK_descriptor_;
}

const SubscribeACK& SubscribeACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pub_5fsub_2eproto();  return *default_instance_;
}

SubscribeACK* SubscribeACK::default_instance_ = NULL;

SubscribeACK* SubscribeACK::New() const {
  return new SubscribeACK;
}

void SubscribeACK::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_peid_time()) {
      if (peid_time_ != &::google::protobuf::internal::kEmptyString) {
        peid_time_->clear();
      }
    }
    if (has_debug_info()) {
      if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
        debug_info_->clear();
      }
    }
  }
  peid_.Clear();
  res_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscribeACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dstream.PEID peid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_peid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_peid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_peid;
        if (input->ExpectTag(21)) goto parse_res;
        break;
      }
      
      // repeated fixed32 res = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_res:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 21, input, this->mutable_res())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_res())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_res;
        if (input->ExpectTag(26)) goto parse_peid_time;
        break;
      }
      
      // optional string peid_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_peid_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peid_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->peid_time().data(), this->peid_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_debug_info;
        break;
      }
      
      // optional string debug_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debug_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->debug_info().data(), this->debug_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubscribeACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .dstream.PEID peid = 1;
  for (int i = 0; i < this->peid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->peid(i), output);
  }
  
  // repeated fixed32 res = 2;
  for (int i = 0; i < this->res_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      2, this->res(i), output);
  }
  
  // optional string peid_time = 3;
  if (has_peid_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peid_time().data(), this->peid_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->peid_time(), output);
  }
  
  // optional string debug_info = 4;
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_info().data(), this->debug_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->debug_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubscribeACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .dstream.PEID peid = 1;
  for (int i = 0; i < this->peid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->peid(i), target);
  }
  
  // repeated fixed32 res = 2;
  for (int i = 0; i < this->res_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(2, this->res(i), target);
  }
  
  // optional string peid_time = 3;
  if (has_peid_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peid_time().data(), this->peid_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->peid_time(), target);
  }
  
  // optional string debug_info = 4;
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_info().data(), this->debug_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->debug_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubscribeACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional string peid_time = 3;
    if (has_peid_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->peid_time());
    }
    
    // optional string debug_info = 4;
    if (has_debug_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug_info());
    }
    
  }
  // repeated .dstream.PEID peid = 1;
  total_size += 1 * this->peid_size();
  for (int i = 0; i < this->peid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->peid(i));
  }
  
  // repeated fixed32 res = 2;
  {
    int data_size = 0;
    data_size = 4 * this->res_size();
    total_size += 1 * this->res_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscribeACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscribeACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscribeACK::MergeFrom(const SubscribeACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  peid_.MergeFrom(from.peid_);
  res_.MergeFrom(from.res_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_peid_time()) {
      set_peid_time(from.peid_time());
    }
    if (from.has_debug_info()) {
      set_debug_info(from.debug_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscribeACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeACK::CopyFrom(const SubscribeACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeACK::IsInitialized() const {
  
  return true;
}

void SubscribeACK::Swap(SubscribeACK* other) {
  if (other != this) {
    peid_.Swap(&other->peid_);
    res_.Swap(&other->res_);
    std::swap(peid_time_, other->peid_time_);
    std::swap(debug_info_, other->debug_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscribeACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeACK_descriptor_;
  metadata.reflection = SubscribeACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubscribeImporterRequest::kNamesFieldNumber;
const int SubscribeImporterRequest::kPipeidsFieldNumber;
const int SubscribeImporterRequest::kDebugInfoFieldNumber;
#endif  // !_MSC_VER

SubscribeImporterRequest::SubscribeImporterRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubscribeImporterRequest::InitAsDefaultInstance() {
}

SubscribeImporterRequest::SubscribeImporterRequest(const SubscribeImporterRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubscribeImporterRequest::SharedCtor() {
  _cached_size_ = 0;
  debug_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscribeImporterRequest::~SubscribeImporterRequest() {
  SharedDtor();
}

void SubscribeImporterRequest::SharedDtor() {
  if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_info_;
  }
  if (this != default_instance_) {
  }
}

void SubscribeImporterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeImporterRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeImporterRequest_descriptor_;
}

const SubscribeImporterRequest& SubscribeImporterRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pub_5fsub_2eproto();  return *default_instance_;
}

SubscribeImporterRequest* SubscribeImporterRequest::default_instance_ = NULL;

SubscribeImporterRequest* SubscribeImporterRequest::New() const {
  return new SubscribeImporterRequest;
}

void SubscribeImporterRequest::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_debug_info()) {
      if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
        debug_info_->clear();
      }
    }
  }
  names_.Clear();
  pipeids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscribeImporterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string names = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->names(0).data(), this->names(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_names;
        if (input->ExpectTag(18)) goto parse_pipeids;
        break;
      }
      
      // repeated .dstream.PipeID pipeids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pipeids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pipeids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pipeids;
        if (input->ExpectTag(26)) goto parse_debug_info;
        break;
      }
      
      // optional string debug_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debug_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->debug_info().data(), this->debug_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubscribeImporterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string names = 1;
  for (int i = 0; i < this->names_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->names(i).data(), this->names(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->names(i), output);
  }
  
  // repeated .dstream.PipeID pipeids = 2;
  for (int i = 0; i < this->pipeids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pipeids(i), output);
  }
  
  // optional string debug_info = 3;
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_info().data(), this->debug_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->debug_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubscribeImporterRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string names = 1;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->names(i).data(), this->names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->names(i), target);
  }
  
  // repeated .dstream.PipeID pipeids = 2;
  for (int i = 0; i < this->pipeids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pipeids(i), target);
  }
  
  // optional string debug_info = 3;
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_info().data(), this->debug_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->debug_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubscribeImporterRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional string debug_info = 3;
    if (has_debug_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug_info());
    }
    
  }
  // repeated string names = 1;
  total_size += 1 * this->names_size();
  for (int i = 0; i < this->names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->names(i));
  }
  
  // repeated .dstream.PipeID pipeids = 2;
  total_size += 1 * this->pipeids_size();
  for (int i = 0; i < this->pipeids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pipeids(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeImporterRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscribeImporterRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscribeImporterRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscribeImporterRequest::MergeFrom(const SubscribeImporterRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  names_.MergeFrom(from.names_);
  pipeids_.MergeFrom(from.pipeids_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_debug_info()) {
      set_debug_info(from.debug_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscribeImporterRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeImporterRequest::CopyFrom(const SubscribeImporterRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeImporterRequest::IsInitialized() const {
  
  return true;
}

void SubscribeImporterRequest::Swap(SubscribeImporterRequest* other) {
  if (other != this) {
    names_.Swap(&other->names_);
    pipeids_.Swap(&other->pipeids_);
    std::swap(debug_info_, other->debug_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscribeImporterRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeImporterRequest_descriptor_;
  metadata.reflection = SubscribeImporterRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubscribeImporterACK::kDebugInfoFieldNumber;
#endif  // !_MSC_VER

SubscribeImporterACK::SubscribeImporterACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubscribeImporterACK::InitAsDefaultInstance() {
}

SubscribeImporterACK::SubscribeImporterACK(const SubscribeImporterACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubscribeImporterACK::SharedCtor() {
  _cached_size_ = 0;
  debug_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscribeImporterACK::~SubscribeImporterACK() {
  SharedDtor();
}

void SubscribeImporterACK::SharedDtor() {
  if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_info_;
  }
  if (this != default_instance_) {
  }
}

void SubscribeImporterACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeImporterACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeImporterACK_descriptor_;
}

const SubscribeImporterACK& SubscribeImporterACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pub_5fsub_2eproto();  return *default_instance_;
}

SubscribeImporterACK* SubscribeImporterACK::default_instance_ = NULL;

SubscribeImporterACK* SubscribeImporterACK::New() const {
  return new SubscribeImporterACK;
}

void SubscribeImporterACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_debug_info()) {
      if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
        debug_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscribeImporterACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string debug_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->debug_info().data(), this->debug_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubscribeImporterACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string debug_info = 1;
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_info().data(), this->debug_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->debug_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubscribeImporterACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string debug_info = 1;
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_info().data(), this->debug_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->debug_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubscribeImporterACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string debug_info = 1;
    if (has_debug_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeImporterACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscribeImporterACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscribeImporterACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscribeImporterACK::MergeFrom(const SubscribeImporterACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_debug_info()) {
      set_debug_info(from.debug_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscribeImporterACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeImporterACK::CopyFrom(const SubscribeImporterACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeImporterACK::IsInitialized() const {
  
  return true;
}

void SubscribeImporterACK::Swap(SubscribeImporterACK* other) {
  if (other != this) {
    std::swap(debug_info_, other->debug_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscribeImporterACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeImporterACK_descriptor_;
  metadata.reflection = SubscribeImporterACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeartbeatRequest::kPeidFieldNumber;
const int HeartbeatRequest::kMetricNameFieldNumber;
const int HeartbeatRequest::kMetricValueFieldNumber;
const int HeartbeatRequest::kDebugInfoFieldNumber;
#endif  // !_MSC_VER

HeartbeatRequest::HeartbeatRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeartbeatRequest::InitAsDefaultInstance() {
  peid_ = const_cast< ::dstream::PEID*>(&::dstream::PEID::default_instance());
}

HeartbeatRequest::HeartbeatRequest(const HeartbeatRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeartbeatRequest::SharedCtor() {
  _cached_size_ = 0;
  peid_ = NULL;
  debug_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartbeatRequest::~HeartbeatRequest() {
  SharedDtor();
}

void HeartbeatRequest::SharedDtor() {
  if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_info_;
  }
  if (this != default_instance_) {
    delete peid_;
  }
}

void HeartbeatRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartbeatRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartbeatRequest_descriptor_;
}

const HeartbeatRequest& HeartbeatRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pub_5fsub_2eproto();  return *default_instance_;
}

HeartbeatRequest* HeartbeatRequest::default_instance_ = NULL;

HeartbeatRequest* HeartbeatRequest::New() const {
  return new HeartbeatRequest;
}

void HeartbeatRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_peid()) {
      if (peid_ != NULL) peid_->::dstream::PEID::Clear();
    }
    if (has_debug_info()) {
      if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
        debug_info_->clear();
      }
    }
  }
  metric_name_.Clear();
  metric_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartbeatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dstream.PEID peid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_metric_name;
        break;
      }
      
      // repeated string metric_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_metric_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_metric_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->metric_name(0).data(), this->metric_name(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_metric_name;
        if (input->ExpectTag(26)) goto parse_metric_value;
        break;
      }
      
      // repeated string metric_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_metric_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_metric_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->metric_value(0).data(), this->metric_value(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_metric_value;
        if (input->ExpectTag(34)) goto parse_debug_info;
        break;
      }
      
      // optional string debug_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debug_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->debug_info().data(), this->debug_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeartbeatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dstream.PEID peid = 1;
  if (has_peid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->peid(), output);
  }
  
  // repeated string metric_name = 2;
  for (int i = 0; i < this->metric_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->metric_name(i).data(), this->metric_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->metric_name(i), output);
  }
  
  // repeated string metric_value = 3;
  for (int i = 0; i < this->metric_value_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->metric_value(i).data(), this->metric_value(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->metric_value(i), output);
  }
  
  // optional string debug_info = 4;
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_info().data(), this->debug_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->debug_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeartbeatRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dstream.PEID peid = 1;
  if (has_peid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->peid(), target);
  }
  
  // repeated string metric_name = 2;
  for (int i = 0; i < this->metric_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->metric_name(i).data(), this->metric_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->metric_name(i), target);
  }
  
  // repeated string metric_value = 3;
  for (int i = 0; i < this->metric_value_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->metric_value(i).data(), this->metric_value(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->metric_value(i), target);
  }
  
  // optional string debug_info = 4;
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_info().data(), this->debug_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->debug_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeartbeatRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dstream.PEID peid = 1;
    if (has_peid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->peid());
    }
    
    // optional string debug_info = 4;
    if (has_debug_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug_info());
    }
    
  }
  // repeated string metric_name = 2;
  total_size += 1 * this->metric_name_size();
  for (int i = 0; i < this->metric_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->metric_name(i));
  }
  
  // repeated string metric_value = 3;
  total_size += 1 * this->metric_value_size();
  for (int i = 0; i < this->metric_value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->metric_value(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartbeatRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartbeatRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartbeatRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartbeatRequest::MergeFrom(const HeartbeatRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  metric_name_.MergeFrom(from.metric_name_);
  metric_value_.MergeFrom(from.metric_value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_peid()) {
      mutable_peid()->::dstream::PEID::MergeFrom(from.peid());
    }
    if (from.has_debug_info()) {
      set_debug_info(from.debug_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartbeatRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartbeatRequest::CopyFrom(const HeartbeatRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatRequest::IsInitialized() const {
  
  return true;
}

void HeartbeatRequest::Swap(HeartbeatRequest* other) {
  if (other != this) {
    std::swap(peid_, other->peid_);
    metric_name_.Swap(&other->metric_name_);
    metric_value_.Swap(&other->metric_value_);
    std::swap(debug_info_, other->debug_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartbeatRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartbeatRequest_descriptor_;
  metadata.reflection = HeartbeatRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeartbeatACK::kDebugInfoFieldNumber;
const int HeartbeatACK::kFlowControlFieldNumber;
#endif  // !_MSC_VER

HeartbeatACK::HeartbeatACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeartbeatACK::InitAsDefaultInstance() {
  flow_control_ = const_cast< ::dstream::FlowControl*>(&::dstream::FlowControl::default_instance());
}

HeartbeatACK::HeartbeatACK(const HeartbeatACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeartbeatACK::SharedCtor() {
  _cached_size_ = 0;
  debug_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flow_control_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartbeatACK::~HeartbeatACK() {
  SharedDtor();
}

void HeartbeatACK::SharedDtor() {
  if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_info_;
  }
  if (this != default_instance_) {
    delete flow_control_;
  }
}

void HeartbeatACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartbeatACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartbeatACK_descriptor_;
}

const HeartbeatACK& HeartbeatACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pub_5fsub_2eproto();  return *default_instance_;
}

HeartbeatACK* HeartbeatACK::default_instance_ = NULL;

HeartbeatACK* HeartbeatACK::New() const {
  return new HeartbeatACK;
}

void HeartbeatACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_debug_info()) {
      if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
        debug_info_->clear();
      }
    }
    if (has_flow_control()) {
      if (flow_control_ != NULL) flow_control_->::dstream::FlowControl::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartbeatACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string debug_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->debug_info().data(), this->debug_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_flow_control;
        break;
      }
      
      // optional .dstream.FlowControl flow_control = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flow_control:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flow_control()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeartbeatACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string debug_info = 1;
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_info().data(), this->debug_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->debug_info(), output);
  }
  
  // optional .dstream.FlowControl flow_control = 2;
  if (has_flow_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->flow_control(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeartbeatACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string debug_info = 1;
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_info().data(), this->debug_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->debug_info(), target);
  }
  
  // optional .dstream.FlowControl flow_control = 2;
  if (has_flow_control()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->flow_control(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeartbeatACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string debug_info = 1;
    if (has_debug_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug_info());
    }
    
    // optional .dstream.FlowControl flow_control = 2;
    if (has_flow_control()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flow_control());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartbeatACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartbeatACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartbeatACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartbeatACK::MergeFrom(const HeartbeatACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_debug_info()) {
      set_debug_info(from.debug_info());
    }
    if (from.has_flow_control()) {
      mutable_flow_control()->::dstream::FlowControl::MergeFrom(from.flow_control());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartbeatACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartbeatACK::CopyFrom(const HeartbeatACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatACK::IsInitialized() const {
  
  return true;
}

void HeartbeatACK::Swap(HeartbeatACK* other) {
  if (other != this) {
    std::swap(debug_info_, other->debug_info_);
    std::swap(flow_control_, other->flow_control_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartbeatACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartbeatACK_descriptor_;
  metadata.reflection = HeartbeatACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TupleMeta::kHashCodeFieldNumber;
const int TupleMeta::kTagsFieldNumber;
#endif  // !_MSC_VER

TupleMeta::TupleMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TupleMeta::InitAsDefaultInstance() {
}

TupleMeta::TupleMeta(const TupleMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TupleMeta::SharedCtor() {
  _cached_size_ = 0;
  hash_code_ = GOOGLE_ULONGLONG(0);
  tags_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TupleMeta::~TupleMeta() {
  SharedDtor();
}

void TupleMeta::SharedDtor() {
  if (tags_ != &::google::protobuf::internal::kEmptyString) {
    delete tags_;
  }
  if (this != default_instance_) {
  }
}

void TupleMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TupleMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TupleMeta_descriptor_;
}

const TupleMeta& TupleMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pub_5fsub_2eproto();  return *default_instance_;
}

TupleMeta* TupleMeta::default_instance_ = NULL;

TupleMeta* TupleMeta::New() const {
  return new TupleMeta;
}

void TupleMeta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hash_code_ = GOOGLE_ULONGLONG(0);
    if (has_tags()) {
      if (tags_ != &::google::protobuf::internal::kEmptyString) {
        tags_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TupleMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 hash_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &hash_code_)));
          set_has_hash_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tags;
        break;
      }
      
      // optional string tags = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tags().data(), this->tags().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TupleMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 hash_code = 1;
  if (has_hash_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->hash_code(), output);
  }
  
  // optional string tags = 2;
  if (has_tags()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tags().data(), this->tags().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tags(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TupleMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 hash_code = 1;
  if (has_hash_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->hash_code(), target);
  }
  
  // optional string tags = 2;
  if (has_tags()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tags().data(), this->tags().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tags(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TupleMeta::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 hash_code = 1;
    if (has_hash_code()) {
      total_size += 1 + 8;
    }
    
    // optional string tags = 2;
    if (has_tags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tags());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TupleMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TupleMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TupleMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TupleMeta::MergeFrom(const TupleMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hash_code()) {
      set_hash_code(from.hash_code());
    }
    if (from.has_tags()) {
      set_tags(from.tags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TupleMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TupleMeta::CopyFrom(const TupleMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TupleMeta::IsInitialized() const {
  
  return true;
}

void TupleMeta::Swap(TupleMeta* other) {
  if (other != this) {
    std::swap(hash_code_, other->hash_code_);
    std::swap(tags_, other->tags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TupleMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TupleMeta_descriptor_;
  metadata.reflection = TupleMeta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Log::kUpstreamPeidFieldNumber;
const int Log::kUpstreamPipeidFieldNumber;
const int Log::kPipeidFieldNumber;
const int Log::kSrcPeidFieldNumber;
const int Log::kDstPeidFieldNumber;
const int Log::kTuplesMetaFieldNumber;
const int Log::kTuplesFieldNumber;
const int Log::kPatchFieldNumber;
const int Log::kDebugInfoFieldNumber;
#endif  // !_MSC_VER

Log::Log()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Log::InitAsDefaultInstance() {
  upstream_peid_ = const_cast< ::dstream::PEID*>(&::dstream::PEID::default_instance());
  upstream_pipeid_ = const_cast< ::dstream::PipeID*>(&::dstream::PipeID::default_instance());
  pipeid_ = const_cast< ::dstream::PipeID*>(&::dstream::PipeID::default_instance());
  src_peid_ = const_cast< ::dstream::PEID*>(&::dstream::PEID::default_instance());
  dst_peid_ = const_cast< ::dstream::PEID*>(&::dstream::PEID::default_instance());
}

Log::Log(const Log& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Log::SharedCtor() {
  _cached_size_ = 0;
  upstream_peid_ = NULL;
  upstream_pipeid_ = NULL;
  pipeid_ = NULL;
  src_peid_ = NULL;
  dst_peid_ = NULL;
  patch_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  debug_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Log::~Log() {
  SharedDtor();
}

void Log::SharedDtor() {
  if (patch_ != &::google::protobuf::internal::kEmptyString) {
    delete patch_;
  }
  if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_info_;
  }
  if (this != default_instance_) {
    delete upstream_peid_;
    delete upstream_pipeid_;
    delete pipeid_;
    delete src_peid_;
    delete dst_peid_;
  }
}

void Log::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Log::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Log_descriptor_;
}

const Log& Log::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pub_5fsub_2eproto();  return *default_instance_;
}

Log* Log::default_instance_ = NULL;

Log* Log::New() const {
  return new Log;
}

void Log::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_upstream_peid()) {
      if (upstream_peid_ != NULL) upstream_peid_->::dstream::PEID::Clear();
    }
    if (has_upstream_pipeid()) {
      if (upstream_pipeid_ != NULL) upstream_pipeid_->::dstream::PipeID::Clear();
    }
    if (has_pipeid()) {
      if (pipeid_ != NULL) pipeid_->::dstream::PipeID::Clear();
    }
    if (has_src_peid()) {
      if (src_peid_ != NULL) src_peid_->::dstream::PEID::Clear();
    }
    if (has_dst_peid()) {
      if (dst_peid_ != NULL) dst_peid_->::dstream::PEID::Clear();
    }
    if (has_patch()) {
      if (patch_ != &::google::protobuf::internal::kEmptyString) {
        patch_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_debug_info()) {
      if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
        debug_info_->clear();
      }
    }
  }
  tuples_meta_.Clear();
  tuples_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Log::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dstream.PEID upstream_peid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upstream_peid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_upstream_pipeid;
        break;
      }
      
      // optional .dstream.PipeID upstream_pipeid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_upstream_pipeid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upstream_pipeid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_pipeid;
        break;
      }
      
      // optional .dstream.PipeID pipeid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pipeid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pipeid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_src_peid;
        break;
      }
      
      // optional .dstream.PEID src_peid = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_src_peid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_src_peid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_dst_peid;
        break;
      }
      
      // optional .dstream.PEID dst_peid = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dst_peid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dst_peid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_tuples_meta;
        break;
      }
      
      // repeated .dstream.TupleMeta tuples_meta = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tuples_meta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tuples_meta()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_tuples_meta;
        if (input->ExpectTag(258)) goto parse_tuples;
        break;
      }
      
      // repeated bytes tuples = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tuples:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_tuples()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_tuples;
        if (input->ExpectTag(266)) goto parse_patch;
        break;
      }
      
      // optional bytes patch = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_patch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_debug_info;
        break;
      }
      
      // required string debug_info = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debug_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->debug_info().data(), this->debug_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Log::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dstream.PEID upstream_peid = 1;
  if (has_upstream_peid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->upstream_peid(), output);
  }
  
  // optional .dstream.PipeID upstream_pipeid = 2;
  if (has_upstream_pipeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->upstream_pipeid(), output);
  }
  
  // optional .dstream.PipeID pipeid = 11;
  if (has_pipeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->pipeid(), output);
  }
  
  // optional .dstream.PEID src_peid = 21;
  if (has_src_peid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->src_peid(), output);
  }
  
  // optional .dstream.PEID dst_peid = 22;
  if (has_dst_peid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->dst_peid(), output);
  }
  
  // repeated .dstream.TupleMeta tuples_meta = 31;
  for (int i = 0; i < this->tuples_meta_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->tuples_meta(i), output);
  }
  
  // repeated bytes tuples = 32;
  for (int i = 0; i < this->tuples_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      32, this->tuples(i), output);
  }
  
  // optional bytes patch = 33;
  if (has_patch()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      33, this->patch(), output);
  }
  
  // required string debug_info = 34;
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_info().data(), this->debug_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      34, this->debug_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Log::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dstream.PEID upstream_peid = 1;
  if (has_upstream_peid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->upstream_peid(), target);
  }
  
  // optional .dstream.PipeID upstream_pipeid = 2;
  if (has_upstream_pipeid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->upstream_pipeid(), target);
  }
  
  // optional .dstream.PipeID pipeid = 11;
  if (has_pipeid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->pipeid(), target);
  }
  
  // optional .dstream.PEID src_peid = 21;
  if (has_src_peid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->src_peid(), target);
  }
  
  // optional .dstream.PEID dst_peid = 22;
  if (has_dst_peid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->dst_peid(), target);
  }
  
  // repeated .dstream.TupleMeta tuples_meta = 31;
  for (int i = 0; i < this->tuples_meta_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->tuples_meta(i), target);
  }
  
  // repeated bytes tuples = 32;
  for (int i = 0; i < this->tuples_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(32, this->tuples(i), target);
  }
  
  // optional bytes patch = 33;
  if (has_patch()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        33, this->patch(), target);
  }
  
  // required string debug_info = 34;
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_info().data(), this->debug_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->debug_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Log::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dstream.PEID upstream_peid = 1;
    if (has_upstream_peid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->upstream_peid());
    }
    
    // optional .dstream.PipeID upstream_pipeid = 2;
    if (has_upstream_pipeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->upstream_pipeid());
    }
    
    // optional .dstream.PipeID pipeid = 11;
    if (has_pipeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pipeid());
    }
    
    // optional .dstream.PEID src_peid = 21;
    if (has_src_peid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->src_peid());
    }
    
    // optional .dstream.PEID dst_peid = 22;
    if (has_dst_peid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dst_peid());
    }
    
    // optional bytes patch = 33;
    if (has_patch()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->patch());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string debug_info = 34;
    if (has_debug_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug_info());
    }
    
  }
  // repeated .dstream.TupleMeta tuples_meta = 31;
  total_size += 2 * this->tuples_meta_size();
  for (int i = 0; i < this->tuples_meta_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tuples_meta(i));
  }
  
  // repeated bytes tuples = 32;
  total_size += 2 * this->tuples_size();
  for (int i = 0; i < this->tuples_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->tuples(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Log::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Log* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Log*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Log::MergeFrom(const Log& from) {
  GOOGLE_CHECK_NE(&from, this);
  tuples_meta_.MergeFrom(from.tuples_meta_);
  tuples_.MergeFrom(from.tuples_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_upstream_peid()) {
      mutable_upstream_peid()->::dstream::PEID::MergeFrom(from.upstream_peid());
    }
    if (from.has_upstream_pipeid()) {
      mutable_upstream_pipeid()->::dstream::PipeID::MergeFrom(from.upstream_pipeid());
    }
    if (from.has_pipeid()) {
      mutable_pipeid()->::dstream::PipeID::MergeFrom(from.pipeid());
    }
    if (from.has_src_peid()) {
      mutable_src_peid()->::dstream::PEID::MergeFrom(from.src_peid());
    }
    if (from.has_dst_peid()) {
      mutable_dst_peid()->::dstream::PEID::MergeFrom(from.dst_peid());
    }
    if (from.has_patch()) {
      set_patch(from.patch());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_debug_info()) {
      set_debug_info(from.debug_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Log::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Log::CopyFrom(const Log& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Log::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000100) != 0x00000100) return false;
  
  return true;
}

void Log::Swap(Log* other) {
  if (other != this) {
    std::swap(upstream_peid_, other->upstream_peid_);
    std::swap(upstream_pipeid_, other->upstream_pipeid_);
    std::swap(pipeid_, other->pipeid_);
    std::swap(src_peid_, other->src_peid_);
    std::swap(dst_peid_, other->dst_peid_);
    tuples_meta_.Swap(&other->tuples_meta_);
    tuples_.Swap(&other->tuples_);
    std::swap(patch_, other->patch_);
    std::swap(debug_info_, other->debug_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Log::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Log_descriptor_;
  metadata.reflection = Log_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FetchLogRequest::kPeidFieldNumber;
const int FetchLogRequest::kReplayModeFieldNumber;
const int FetchLogRequest::kDebugInfoFieldNumber;
#endif  // !_MSC_VER

FetchLogRequest::FetchLogRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FetchLogRequest::InitAsDefaultInstance() {
  peid_ = const_cast< ::dstream::PEID*>(&::dstream::PEID::default_instance());
}

FetchLogRequest::FetchLogRequest(const FetchLogRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FetchLogRequest::SharedCtor() {
  _cached_size_ = 0;
  peid_ = NULL;
  replay_mode_ = false;
  debug_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FetchLogRequest::~FetchLogRequest() {
  SharedDtor();
}

void FetchLogRequest::SharedDtor() {
  if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_info_;
  }
  if (this != default_instance_) {
    delete peid_;
  }
}

void FetchLogRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FetchLogRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FetchLogRequest_descriptor_;
}

const FetchLogRequest& FetchLogRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pub_5fsub_2eproto();  return *default_instance_;
}

FetchLogRequest* FetchLogRequest::default_instance_ = NULL;

FetchLogRequest* FetchLogRequest::New() const {
  return new FetchLogRequest;
}

void FetchLogRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_peid()) {
      if (peid_ != NULL) peid_->::dstream::PEID::Clear();
    }
    replay_mode_ = false;
    if (has_debug_info()) {
      if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
        debug_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FetchLogRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dstream.PEID peid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_replay_mode;
        break;
      }
      
      // optional bool replay_mode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_replay_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &replay_mode_)));
          set_has_replay_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_debug_info;
        break;
      }
      
      // optional string debug_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debug_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->debug_info().data(), this->debug_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FetchLogRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dstream.PEID peid = 1;
  if (has_peid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->peid(), output);
  }
  
  // optional bool replay_mode = 2;
  if (has_replay_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->replay_mode(), output);
  }
  
  // optional string debug_info = 3;
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_info().data(), this->debug_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->debug_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FetchLogRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dstream.PEID peid = 1;
  if (has_peid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->peid(), target);
  }
  
  // optional bool replay_mode = 2;
  if (has_replay_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->replay_mode(), target);
  }
  
  // optional string debug_info = 3;
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_info().data(), this->debug_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->debug_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FetchLogRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dstream.PEID peid = 1;
    if (has_peid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->peid());
    }
    
    // optional bool replay_mode = 2;
    if (has_replay_mode()) {
      total_size += 1 + 1;
    }
    
    // optional string debug_info = 3;
    if (has_debug_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FetchLogRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FetchLogRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FetchLogRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FetchLogRequest::MergeFrom(const FetchLogRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_peid()) {
      mutable_peid()->::dstream::PEID::MergeFrom(from.peid());
    }
    if (from.has_replay_mode()) {
      set_replay_mode(from.replay_mode());
    }
    if (from.has_debug_info()) {
      set_debug_info(from.debug_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FetchLogRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchLogRequest::CopyFrom(const FetchLogRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchLogRequest::IsInitialized() const {
  
  return true;
}

void FetchLogRequest::Swap(FetchLogRequest* other) {
  if (other != this) {
    std::swap(peid_, other->peid_);
    std::swap(replay_mode_, other->replay_mode_);
    std::swap(debug_info_, other->debug_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FetchLogRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FetchLogRequest_descriptor_;
  metadata.reflection = FetchLogRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FetchLogACK::kDelayMsFieldNumber;
const int FetchLogACK::kLogFieldNumber;
const int FetchLogACK::kEndReplayFieldNumber;
const int FetchLogACK::kResFieldNumber;
const int FetchLogACK::kDebugInfoFieldNumber;
#endif  // !_MSC_VER

FetchLogACK::FetchLogACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FetchLogACK::InitAsDefaultInstance() {
  log_ = const_cast< ::dstream::Log*>(&::dstream::Log::default_instance());
}

FetchLogACK::FetchLogACK(const FetchLogACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FetchLogACK::SharedCtor() {
  _cached_size_ = 0;
  delay_ms_ = GOOGLE_ULONGLONG(0);
  log_ = NULL;
  end_replay_ = false;
  res_ = 0u;
  debug_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FetchLogACK::~FetchLogACK() {
  SharedDtor();
}

void FetchLogACK::SharedDtor() {
  if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_info_;
  }
  if (this != default_instance_) {
    delete log_;
  }
}

void FetchLogACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FetchLogACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FetchLogACK_descriptor_;
}

const FetchLogACK& FetchLogACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pub_5fsub_2eproto();  return *default_instance_;
}

FetchLogACK* FetchLogACK::default_instance_ = NULL;

FetchLogACK* FetchLogACK::New() const {
  return new FetchLogACK;
}

void FetchLogACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    delay_ms_ = GOOGLE_ULONGLONG(0);
    if (has_log()) {
      if (log_ != NULL) log_->::dstream::Log::Clear();
    }
    end_replay_ = false;
    res_ = 0u;
    if (has_debug_info()) {
      if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
        debug_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FetchLogACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 delay_ms = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &delay_ms_)));
          set_has_delay_ms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_log;
        break;
      }
      
      // optional .dstream.Log log = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_log()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_end_replay;
        break;
      }
      
      // optional bool end_replay = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_replay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &end_replay_)));
          set_has_end_replay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_res;
        break;
      }
      
      // optional fixed32 res = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_res:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_debug_info;
        break;
      }
      
      // optional string debug_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debug_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->debug_info().data(), this->debug_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FetchLogACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 delay_ms = 1;
  if (has_delay_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->delay_ms(), output);
  }
  
  // optional .dstream.Log log = 2;
  if (has_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->log(), output);
  }
  
  // optional bool end_replay = 3;
  if (has_end_replay()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->end_replay(), output);
  }
  
  // optional fixed32 res = 4;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->res(), output);
  }
  
  // optional string debug_info = 5;
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_info().data(), this->debug_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->debug_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FetchLogACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 delay_ms = 1;
  if (has_delay_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->delay_ms(), target);
  }
  
  // optional .dstream.Log log = 2;
  if (has_log()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->log(), target);
  }
  
  // optional bool end_replay = 3;
  if (has_end_replay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->end_replay(), target);
  }
  
  // optional fixed32 res = 4;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->res(), target);
  }
  
  // optional string debug_info = 5;
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_info().data(), this->debug_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->debug_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FetchLogACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 delay_ms = 1;
    if (has_delay_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->delay_ms());
    }
    
    // optional .dstream.Log log = 2;
    if (has_log()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->log());
    }
    
    // optional bool end_replay = 3;
    if (has_end_replay()) {
      total_size += 1 + 1;
    }
    
    // optional fixed32 res = 4;
    if (has_res()) {
      total_size += 1 + 4;
    }
    
    // optional string debug_info = 5;
    if (has_debug_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FetchLogACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FetchLogACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FetchLogACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FetchLogACK::MergeFrom(const FetchLogACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_delay_ms()) {
      set_delay_ms(from.delay_ms());
    }
    if (from.has_log()) {
      mutable_log()->::dstream::Log::MergeFrom(from.log());
    }
    if (from.has_end_replay()) {
      set_end_replay(from.end_replay());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_debug_info()) {
      set_debug_info(from.debug_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FetchLogACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchLogACK::CopyFrom(const FetchLogACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchLogACK::IsInitialized() const {
  
  if (has_log()) {
    if (!this->log().IsInitialized()) return false;
  }
  return true;
}

void FetchLogACK::Swap(FetchLogACK* other) {
  if (other != this) {
    std::swap(delay_ms_, other->delay_ms_);
    std::swap(log_, other->log_);
    std::swap(end_replay_, other->end_replay_);
    std::swap(res_, other->res_);
    std::swap(debug_info_, other->debug_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FetchLogACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FetchLogACK_descriptor_;
  metadata.reflection = FetchLogACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForwardLogRequest::kPeidFieldNumber;
const int ForwardLogRequest::kLogFieldNumber;
const int ForwardLogRequest::kDebugInfoFieldNumber;
#endif  // !_MSC_VER

ForwardLogRequest::ForwardLogRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ForwardLogRequest::InitAsDefaultInstance() {
  peid_ = const_cast< ::dstream::PEID*>(&::dstream::PEID::default_instance());
  log_ = const_cast< ::dstream::Log*>(&::dstream::Log::default_instance());
}

ForwardLogRequest::ForwardLogRequest(const ForwardLogRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ForwardLogRequest::SharedCtor() {
  _cached_size_ = 0;
  peid_ = NULL;
  log_ = NULL;
  debug_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForwardLogRequest::~ForwardLogRequest() {
  SharedDtor();
}

void ForwardLogRequest::SharedDtor() {
  if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_info_;
  }
  if (this != default_instance_) {
    delete peid_;
    delete log_;
  }
}

void ForwardLogRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardLogRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForwardLogRequest_descriptor_;
}

const ForwardLogRequest& ForwardLogRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pub_5fsub_2eproto();  return *default_instance_;
}

ForwardLogRequest* ForwardLogRequest::default_instance_ = NULL;

ForwardLogRequest* ForwardLogRequest::New() const {
  return new ForwardLogRequest;
}

void ForwardLogRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_peid()) {
      if (peid_ != NULL) peid_->::dstream::PEID::Clear();
    }
    if (has_log()) {
      if (log_ != NULL) log_->::dstream::Log::Clear();
    }
    if (has_debug_info()) {
      if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
        debug_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForwardLogRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dstream.PEID peid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_log;
        break;
      }
      
      // optional .dstream.Log log = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_log()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_debug_info;
        break;
      }
      
      // optional string debug_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debug_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->debug_info().data(), this->debug_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ForwardLogRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dstream.PEID peid = 1;
  if (has_peid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->peid(), output);
  }
  
  // optional .dstream.Log log = 2;
  if (has_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->log(), output);
  }
  
  // optional string debug_info = 3;
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_info().data(), this->debug_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->debug_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ForwardLogRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dstream.PEID peid = 1;
  if (has_peid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->peid(), target);
  }
  
  // optional .dstream.Log log = 2;
  if (has_log()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->log(), target);
  }
  
  // optional string debug_info = 3;
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_info().data(), this->debug_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->debug_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ForwardLogRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dstream.PEID peid = 1;
    if (has_peid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->peid());
    }
    
    // optional .dstream.Log log = 2;
    if (has_log()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->log());
    }
    
    // optional string debug_info = 3;
    if (has_debug_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardLogRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForwardLogRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForwardLogRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForwardLogRequest::MergeFrom(const ForwardLogRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_peid()) {
      mutable_peid()->::dstream::PEID::MergeFrom(from.peid());
    }
    if (from.has_log()) {
      mutable_log()->::dstream::Log::MergeFrom(from.log());
    }
    if (from.has_debug_info()) {
      set_debug_info(from.debug_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForwardLogRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardLogRequest::CopyFrom(const ForwardLogRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardLogRequest::IsInitialized() const {
  
  if (has_log()) {
    if (!this->log().IsInitialized()) return false;
  }
  return true;
}

void ForwardLogRequest::Swap(ForwardLogRequest* other) {
  if (other != this) {
    std::swap(peid_, other->peid_);
    std::swap(log_, other->log_);
    std::swap(debug_info_, other->debug_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForwardLogRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForwardLogRequest_descriptor_;
  metadata.reflection = ForwardLogRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForwardLogACK::kDebugInfoFieldNumber;
const int ForwardLogACK::kStatusFieldNumber;
#endif  // !_MSC_VER

ForwardLogACK::ForwardLogACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ForwardLogACK::InitAsDefaultInstance() {
}

ForwardLogACK::ForwardLogACK(const ForwardLogACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ForwardLogACK::SharedCtor() {
  _cached_size_ = 0;
  debug_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForwardLogACK::~ForwardLogACK() {
  SharedDtor();
}

void ForwardLogACK::SharedDtor() {
  if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_info_;
  }
  if (this != default_instance_) {
  }
}

void ForwardLogACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardLogACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForwardLogACK_descriptor_;
}

const ForwardLogACK& ForwardLogACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pub_5fsub_2eproto();  return *default_instance_;
}

ForwardLogACK* ForwardLogACK::default_instance_ = NULL;

ForwardLogACK* ForwardLogACK::New() const {
  return new ForwardLogACK;
}

void ForwardLogACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_debug_info()) {
      if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
        debug_info_->clear();
      }
    }
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForwardLogACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string debug_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->debug_info().data(), this->debug_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }
      
      // optional int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ForwardLogACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string debug_info = 1;
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_info().data(), this->debug_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->debug_info(), output);
  }
  
  // optional int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ForwardLogACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string debug_info = 1;
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_info().data(), this->debug_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->debug_info(), target);
  }
  
  // optional int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ForwardLogACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string debug_info = 1;
    if (has_debug_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug_info());
    }
    
    // optional int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardLogACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForwardLogACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForwardLogACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForwardLogACK::MergeFrom(const ForwardLogACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_debug_info()) {
      set_debug_info(from.debug_info());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForwardLogACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardLogACK::CopyFrom(const ForwardLogACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardLogACK::IsInitialized() const {
  
  return true;
}

void ForwardLogACK::Swap(ForwardLogACK* other) {
  if (other != this) {
    std::swap(debug_info_, other->debug_info_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForwardLogACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForwardLogACK_descriptor_;
  metadata.reflection = ForwardLogACK_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dstream

// @@protoc_insertion_point(global_scope)
